<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1.Unicode码出错 2.判断类型 3.json转换字典或数组</title>
    <url>/2017/04/24/1.Unicode%E7%A0%81%E5%87%BA%E9%94%99%202.%E5%88%A4%E6%96%AD%E7%B1%BB%E5%9E%8B%203.json%E8%BD%AC%E6%8D%A2%E5%AD%97%E5%85%B8%E6%88%96%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<p>这个是一些小坑，大牛们忽略。</p>
<p>1.有些时候，后台传输一些json数据会是Unicode码，如果存在在数组里，就更尴尬了，无法转成数组，那么这时候怎么办呢。</p>
<p><img src="/images/Unicode%E7%A0%81%E5%87%BA%E9%94%99/%E4%BE%8B%E5%A6%82.jpeg" alt="例如.png"></p>
<p>这时候，一定要把\U转换成\u，转换成功即可正常使用。<br>2.如何判断属于什么类型。<br>数据属于什么类型，使用iskindofclass来进行判断</p>
<p><img src="/images/Unicode%E7%A0%81%E5%87%BA%E9%94%99/%E5%86%8D%E4%BE%8B%E5%A6%82.jpeg" alt="再例如.png"></p>
<p>3.如何将json串转换成dic或array<br>如果json数据正常，直接使用如图方法，如json数据为单引号，则进行转义。</p>
<p><img src="/images/Unicode%E7%A0%81%E5%87%BA%E9%94%99/%E8%BD%AC%E6%8D%A2.jpeg" alt="转换.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    NSString *arrString = [jsonDic valueForKey:@&quot;XXX&quot;];</span><br><span class="line">    </span><br><span class="line">    if ([arrString isKindOfClass:[NSString class]]) &#123;</span><br><span class="line">        NSLog(@&quot;NSString类&quot;);</span><br><span class="line">    &#125;else if([arrString isKindOfClass:[NSArray class]])&#123;</span><br><span class="line">        NSLog(@&quot;NSArray类&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//如果是单引号加上这句    </span><br><span class="line">    NSString *str3 = [arrString stringByReplacingOccurrencesOfString:@&quot;&#x27;&quot; withString:@&quot;\&quot;&quot;];</span><br><span class="line">    </span><br><span class="line">    NSData *arrData = [str3 dataUsingEncoding:NSUTF8StringEncoding];//也可以试试NSASCIIStringEncoding</span><br><span class="line">    NSArray *array = [self toArrayOrNSDictionary:arrData];</span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#pragma mark -- 将JSON串转化为NSDictionary或NSArray</span><br><span class="line">- (id)toArrayOrNSDictionary:(NSData *)jsonData&#123;</span><br><span class="line">    NSError *error = nil;</span><br><span class="line">    id jsonObject = [NSJSONSerialization JSONObjectWithData:jsonData</span><br><span class="line">                                                    options:NSJSONReadingAllowFragments</span><br><span class="line">                                                      error:&amp;error];</span><br><span class="line">    </span><br><span class="line">    if (jsonObject != nil &amp;&amp; error == nil)&#123;</span><br><span class="line">        return jsonObject;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        // 解析错误</span><br><span class="line">        return nil;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>AFNetworking如何传递结果</title>
    <url>/2016/12/17/AFNetworking%E5%A6%82%E4%BD%95%E4%BC%A0%E9%80%92%E7%BB%93%E6%9E%9C/</url>
    <content><![CDATA[<p>因为在AFNetworking中的请求结果采用block，是异步请求结果</p>
<p>那么如何返回结果呢？</p>
<p>答案很简单：代理。</p>
<p>例如：</p>
<p><img src="/images/afnet%E4%BC%A0%E9%80%92%E7%BB%93%E6%9E%9C/1.png" alt="img"></p>
<p><img src="/images/afnet%E4%BC%A0%E9%80%92%E7%BB%93%E6%9E%9C/2.png" alt="img"></p>
<p>代理在哪实现，结果在哪返回。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>AFNetworking报错：unacceptable content-type- text/html</title>
    <url>/2017/07/17/AFNetworking%E6%8A%A5%E9%94%99unacceptable%20content-type-texthtml/</url>
    <content><![CDATA[<p>有时候用AFNetworking发送数据的时候会产生这种错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Request failed: unacceptable content-type: text/html</span><br></pre></td></tr></table></figure>


<p><img src="/images/Afnetwork%E6%8A%A5%E9%94%99/1.png" alt="3259244-7ef2c6bad256fe3a.png.jpeg"></p>
<p>这是因为text/html这个方式AF中没有。。这种时候有两种方式解决<br>1.直接修改AF的文件：<br>AFURLResponseSerialization.m文件中大约226行处，将</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">self.acceptableContentTypes = [NSSet setWithObjects:@&quot;application/json&quot;, @&quot;text/json&quot;, @&quot;text/javascript&quot;, nil];</span><br></pre></td></tr></table></figure>
<p>修改为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">self.acceptableContentTypes = [NSSet setWithObjects:@&quot;application/json&quot;, @&quot;text/json&quot;, @&quot;text/javascript&quot;, @&quot;text/html&quot;,nil];</span><br></pre></td></tr></table></figure>

<p><img src="/images/Afnetwork%E6%8A%A5%E9%94%99/2.png" alt="2.jpg"><br>此时便可以正常发送消息了。<br>不过不是很建议直接修改，比如你要封装sdk总不能直接把别人写的第三方封进来吧，一方面别人集成容易产生冲突，第二你的sdk体积会大很多。这时候可以采用第二种方式<br>2.在你发送的时候每次都添加</p>
<p><img src="/images/Afnetwork%E6%8A%A5%E9%94%99/3.png" alt="3.jpg"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">manager.requestSerializer = [AFHTTPRequestSerializer serializer];</span><br><span class="line">manager.responseSerializer = [AFJSONResponseSerializer serializer];</span><br><span class="line">manager.responseSerializer.acceptableContentTypes = [NSSet setWithObjects:@&quot;application/json&quot;, @&quot;text/json&quot;, @&quot;text/javascript&quot;,@&quot;text/html&quot;,@&quot;text/plain&quot;, nil];</span><br></pre></td></tr></table></figure>
<p>即可。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>AFnetworking的常见问题</title>
    <url>/2017/08/31/AFnetworking%E7%9A%84%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>废话不多说，直接上问题：<br>1.如何拼接请求头？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//申明返回的结果是json类型</span><br><span class="line">  </span><br><span class="line">  manager.responseSerializer = [AFJSONResponseSerializer serializer];</span><br><span class="line">  </span><br><span class="line">  //申明请求的数据是json类型</span><br><span class="line">  </span><br><span class="line">  manager.requestSerializer=[AFJSONRequestSerializer serializer];</span><br><span class="line">  </span><br><span class="line">  //  /如果报接受类型不一致请替换一致text/html或别的</span><br><span class="line">  </span><br><span class="line">  [manager.requestSerializer setValue:@&quot;application/json&quot; forHTTPHeaderField:@&quot;Accept&quot;];</span><br><span class="line">  [manager.requestSerializer setValue:@&quot;application/json&quot; forHTTPHeaderField:@&quot;Content-Type&quot;];</span><br><span class="line">  [manager.requestSerializer setValue:value forHTTPHeaderField:key];</span><br><span class="line">  [manager.requestSerializer setValue: value forHTTPHeaderField:key];</span><br><span class="line">  [manager.requestSerializer setValue: value forHTTPHeaderField:key];</span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>2.如何返回参数在调用的同一方法中？</p>
<p>block,参数带有block去实现</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__block NSString *longitude; // __block,静态变量</span><br><span class="line">[self.manager POST:URL parameters:params success:^(NSURLSessionDataTask * _Nonnull task, id  _Nonnull responseObject) &#123;</span><br><span class="line">  </span><br><span class="line">  NSDictionary *locDictionary = [NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableLeaves error:nil];</span><br><span class="line">  longitude = [locDictionary objectForKey:@&quot;lon&quot;]; // 纠正后经度</span><br><span class="line">  </span><br><span class="line">  if (finishBlock)</span><br><span class="line">  &#123;</span><br><span class="line">    finishBlock(longitude, nil);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125; failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) &#123;</span><br><span class="line">  NSLog(@&quot;%@&quot;, error);</span><br><span class="line">  if (finishBlock)</span><br><span class="line">  &#123;</span><br><span class="line">    finishBlock(nil, error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Android studio如何使用jar/aar包（二）</title>
    <url>/2017/01/09/Android%20studio%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8jaraar%E5%8C%85%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<p>上一篇说到如何创建jar/aar，这篇介绍如何使用</p>
<h1 id="一-jar的使用"><a href="#一-jar的使用" class="headerlink" title="一 jar的使用"></a>一 jar的使用</h1><p>jar包的使用很简单，直接将jar包拷如lib目录下</p>
<p><img src="/images/as-jar-arr2/1.png" alt="img"></p>
<p><img src="/images/as-jar-arr2/2.png" alt="img"></p>
<p>运行完之后我们试一下</p>
<p><img src="/images/as-jar-arr2/3.png" alt="img"></p>
<p>使用成功。</p>
<p>二 aar包的使用</p>
<p>同样先导入libs目录下</p>
<p>然后对gradle进行修改</p>
<p>repositories {</p>
<p>​     flatDir {</p>
<p>​          dirs’libs’</p>
<p>​           }</p>
<p>}</p>
<p>compile(name:’wxaar-debug’,ext:’aar’)</p>
<p><img src="/images/as-jar-arr2/4.png" alt="img"></p>
<p>在4运行完成后</p>
<p><img src="/images/as-jar-arr2/5.png" alt="img"></p>
<p>这里会多出一个外部依赖包，说明成功依赖。接下来我们试一下</p>
<p><img src="/images/as-jar-arr2/6.png" alt="img"></p>
<p>运行成功。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android studio如何创建jar/aar包（一）</title>
    <url>/2017/01/09/Android-studio%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BAjaraar%E5%8C%85%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<p>Android studio下，有几种包可以放出去给别的项目调用，这里介绍jar和aar如何用as创建，可能有些简单，但确实有不会的，如有错误，请大牛指正。</p>
<h1 id="一-jar包的创建"><a href="#一-jar包的创建" class="headerlink" title="一 jar包的创建"></a>一 jar包的创建</h1><h3 id="1-新建一个空白工程。"><a href="#1-新建一个空白工程。" class="headerlink" title="1.新建一个空白工程。"></a>1.新建一个空白工程。</h3><p><img src="/images/as-jar-arr1/1.png" alt="img"></p>
<p>新建一个module文件</p>
<p><img src="/images/as-jar-arr1/2.png" alt="img"></p>
<p><img src="/images/as-jar-arr1/3.png" alt="img"></p>
<h3 id="2-新建一个jar可使用的方法"><a href="#2-新建一个jar可使用的方法" class="headerlink" title="2.新建一个jar可使用的方法"></a>2.新建一个jar可使用的方法</h3><p><img src="/images/as-jar-arr1/4.png" alt="img"></p>
<p><img src="/images/as-jar-arr1/5.png" alt="img"></p>
<p><img src="/images/as-jar-arr1/6.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">//task to delete the old jar</span><br><span class="line"></span><br><span class="line">task deleteOldJar(type: Delete) &#123;</span><br><span class="line"></span><br><span class="line">delete &#x27;release/AndroidPlugin.jar&#x27;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//task to export contents as jar</span><br><span class="line"></span><br><span class="line">task exportJar(type: Copy) &#123;</span><br><span class="line"></span><br><span class="line">from(&#x27;build/intermediates/bundles/release/&#x27;)</span><br><span class="line"></span><br><span class="line">into(&#x27;release/&#x27;)</span><br><span class="line"></span><br><span class="line">include(&#x27;classes.jar&#x27;)</span><br><span class="line"></span><br><span class="line">///Rename the jar</span><br><span class="line"></span><br><span class="line">rename(&#x27;classes.jar&#x27;, &#x27;WX.jar&#x27;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exportJar.dependsOn(deleteOldJar, build)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-运行"><a href="#3-运行" class="headerlink" title="3.运行"></a>3.运行</h3><p><img src="/images/as-jar-arr1/7.png" alt="img"></p>
<p><img src="/images/as-jar-arr1/8.png" alt="img"></p>
<p><img src="/images/as-jar-arr1/9.png" alt="img"></p>
<p>双击运行</p>
<p><img src="/images/as-jar-arr1/10.png" alt="img"></p>
<p>运行完毕后，这个jar包就是咱们要的了。</p>
<h1 id="二-aar包"><a href="#二-aar包" class="headerlink" title="二 aar包"></a>二 aar包</h1><p>首先aar包和jar包区别在哪呢，区别在于jar包中只含有class源码文件，而aar包则可以含有资源文件，调用起来更加方便</p>
<h3 id="1-仍然是新建一个项目和一个library文件，同上，就不截图了"><a href="#1-仍然是新建一个项目和一个library文件，同上，就不截图了" class="headerlink" title="1.仍然是新建一个项目和一个library文件，同上，就不截图了"></a>1.仍然是新建一个项目和一个library文件，同上，就不截图了</h3><h3 id="2-仍然是写一个方法，等会用于验证，同上，不截图了"><a href="#2-仍然是写一个方法，等会用于验证，同上，不截图了" class="headerlink" title="2.仍然是写一个方法，等会用于验证，同上，不截图了"></a>2.仍然是写一个方法，等会用于验证，同上，不截图了</h3><h3 id="3-方法写完了，进行Rebulid操作"><a href="#3-方法写完了，进行Rebulid操作" class="headerlink" title="3.方法写完了，进行Rebulid操作"></a>3.方法写完了，进行Rebulid操作</h3><p><img src="/images/as-jar-arr1/11.png" alt="img"></p>
<p>rebuild完成后</p>
<p><img src="/images/as-jar-arr1/12.png" alt="img"></p>
<p>这个aar包就是我们需要的了。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>（转载）Android studio如何将第三方jar包打入一个jar包（三）</title>
    <url>/2017/01/17/Android-studio%E5%A6%82%E4%BD%95%E5%B0%86%E7%AC%AC%E4%B8%89%E6%96%B9jar%E5%8C%85%E6%89%93%E5%85%A5%E4%B8%80%E4%B8%AAjar%E5%8C%85%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<p>问题：</p>
<p>存在这么一种情况：</p>
<p>我们要打包的android项目中已经引用了一个或多个第三方.jar文件。那么我们按上面的方法打成.jar文件，在引入到别的项目中使用中，</p>
<p>会发现出现错误：</p>
<p>NoClassDefFoundError</p>
<p>定位到错误代码位置，会发现生成.jar文件的原始android项目中引用的第三方.jar文件中的类找不到。</p>
<p>这里可以猜测，使用上述方法将android项目打成.jar文件的过程中，并没有将android项目原来引用的第三方.jar文件也一起打入到新的.jar文件中。</p>
<p>可以测试一下，将android项目打成的.jar文件解压缩，会发现只有java代码相关文件，而没有原来android项目中引用的第三方.jar文件</p>
<p>解决方案：</p>
<p>1、首先 问题产生的原因就是生成.jar文件的android项目原先引用的第三方.jar文件没有被打入到 新的.jar文件中</p>
<p>那么我们想：怎么在android项目打成.jar文件的时候 顺带把 android项目引用的第三方.jar文化也一并打入到新的.jar文件？</p>
<p>试了几天，目前没有找到解决办法。。。此路不通</p>
<p>2、既然android项目原来引用的.jar文件打不进 要生成的.jar文件中去，我们是否可以手动的将android项目引用的第三方项目整合到android项目打成的.jar文件中去？</p>
<p>即 将android项目打成的.jar文件和android项目自身引用的.jar文件合并成一个.jar文件</p>
<p>网上查询了一番： 可以使用 ANT 工具实现 将两个或多个.jar文件合并成一个.jar文件</p>
<p>Apache Ant是一个基于Java的生成工具。据最初的创始人James Duncan Davidson的介绍，这个工具的名称是another neat tool(另一个整洁的工具)的首字母的缩写。</p>
<p>实现步骤：</p>
<p>（1）、下载ANT,这个网上百度一堆</p>
<p>（2）、配置环境变量</p>
<p><img src="/images/as-jar-arr3/1.png" alt="img"></p>
<p>（3）、检测是否配置成功</p>
<p>点击 开始 -&gt; 运行 -&gt; 输入cmd</p>
<p>打开命令窗口，</p>
<p>输入如下命令：ant</p>
<p>如果出现如下内容，说明安装成功：</p>
<p>Buildfile: build.xml does not exist!</p>
<p>Build failed</p>
<p>注意：因为ant默认运行build.xml文件，这个文件需要我们创建。</p>
<p>如果不想命名为build.xml，运行时可以使用 ant -buildfile test.xml 命令指明要运行的构建文件。</p>
<p>（4）、编辑xml文件，命名随意，这里命名build.xml</p>
<p>打开文件编辑：</p>
<p><img src="/images/as-jar-arr3/2.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project</span><br><span class="line"></span><br><span class="line">name=&quot;hosa&quot;</span><br><span class="line"></span><br><span class="line">basedir=&quot;E:\soft&quot;</span><br><span class="line"></span><br><span class="line">default=&quot;makeSuperJar&quot; &gt;</span><br><span class="line"></span><br><span class="line">&lt;target    name=&quot;makeSuperJar&quot;            description=&quot;description&quot; &gt;</span><br><span class="line"></span><br><span class="line">&lt;jar destfile=&quot;ChanPaySdk.jar&quot; &gt;</span><br><span class="line"></span><br><span class="line">&lt;zipfileset src=&quot;volley.jar&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;zipfileset src=&quot;cpsdk.jar&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/jar&gt;</span><br><span class="line"></span><br><span class="line">&lt;/target&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>
<p>（5）、命令行执行合并操作，输入第一行命令，红色部分是我们编辑的build.xml文件的地址</p>
<p><img src="/images/as-jar-arr3/3.png" alt="img"></p>
<p>（6）、打开build.xml文件中basedir=”H:\soft\jar”该目录，即可看到合并后的jar文件。</p>
<p>转载自博客地址：<a href="http://www.cnblogs.com/xqxacm/p/5893400.html">http://www.cnblogs.com/xqxacm/p/5893400.html</a></p>
<p>使用ant可打包。另外作者的XML文件使用时请将注释移除，多余不提了。。。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Cocoapods CDN问题</title>
    <url>/2019/11/23/Cocoapods-CDN%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>cocoapods 1.8以上，采用了CDN，目的是为了不再将索引放在本地，下载又慢，还占据本地内存。</p>
<p>事是个好事，但是国内有墙，cdn又是外国的地址，对国内开发者来说就很烦。</p>
<p>所以我们还得用以前的方式，本地下载索引。</p>
<p>只需要执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod repo add master https://github.com/CocoaPods/Specs.git</span><br></pre></td></tr></table></figure>

<p>上面那个是官方源，你也可以用国内的清华源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod repo add master https://mirrors.tuna.tsinghua.edu.cn/git/CocoaPods/Specs.git</span><br></pre></td></tr></table></figure>


<p>二者任选其一即可。</p>
<p>如何查看成功没</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod repo</span><br></pre></td></tr></table></figure>
<p>看看有多少源就行</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Cocoapods发布Framework</title>
    <url>/2018/12/17/Cocoapods%E5%8F%91%E5%B8%83Framework/</url>
    <content><![CDATA[<h2 id="1-创建git仓库"><a href="#1-创建git仓库" class="headerlink" title="1.创建git仓库"></a>1.创建git仓库</h2><p>本项目由于属于商业项目，不开源，因此使用framework方式上传。</p>
<p><img src="/images/cocoapods-fm/1.png"></p>
<p>创建完毕以后，拉到本地</p>
<h2 id="2-创建trunk账号"><a href="#2-创建trunk账号" class="headerlink" title="2.创建trunk账号"></a>2.创建trunk账号</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod trunk register 邮箱地址 ‘用户名’ --verbose</span><br></pre></td></tr></table></figure>
<p>这里我用了自己的账号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod trunk register 329106954@qq.com 无星 --verbose</span><br></pre></td></tr></table></figure>

<p>需要去邮箱验证链接</p>
<p>完成以后</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod trunk me</span><br></pre></td></tr></table></figure>
<p>查看当前pod账户是谁</p>
<h2 id="3-创建-podspec文件"><a href="#3-创建-podspec文件" class="headerlink" title="3.创建.podspec文件"></a>3.创建.podspec文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd 到sdk目录下</span><br><span class="line">pod spec create BjcaSignSDK</span><br></pre></td></tr></table></figure>

<p>创建完以后用xcode双击打开</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Pod::Spec.new do |s|</span><br><span class="line"></span><br><span class="line">#名称</span><br><span class="line">s.name         = &#x27;BjcaSignSDK&#x27;</span><br><span class="line"></span><br><span class="line">#版本号</span><br><span class="line">s.version      = &#x27;0.0.3&#x27;</span><br><span class="line"></span><br><span class="line">#许可证</span><br><span class="line">s.license      = &#123; :type =&gt; &#x27;MIT&#x27; &#125;</span><br><span class="line"></span><br><span class="line">#项目主页地址</span><br><span class="line">s.homepage     = &#x27;https://github.com/XingXiaoWu/BjcaSignSDK&#x27;</span><br><span class="line"></span><br><span class="line">#作者</span><br><span class="line">s.authors      = &#123; &#x27;无星&#x27; =&gt; &#x27;wuxing@bjca.org.cn&#x27; &#125;</span><br><span class="line"></span><br><span class="line">#简介</span><br><span class="line">s.summary      = &quot;北京数字医信签名SDK&quot;</span><br><span class="line"></span><br><span class="line">#项目的地址 （注意这里的tag位置，可以自己写也可以直接用s.version，但是与s.version一定要统一）</span><br><span class="line">s.source       = &#123; :git =&gt; &#x27;https://github.com/XingXiaoWu/BjcaSignSDK.git&#x27;, :tag =&gt; s.version &#125;</span><br><span class="line"></span><br><span class="line">#支持最小系统版本</span><br><span class="line">s.platform     = :ios, &#x27;9.0&#x27;</span><br><span class="line"></span><br><span class="line">#需要包含的源文件</span><br><span class="line">s.source_files = &#x27;BjcaSignSDK/BjcaSignSDK.framework/Headers/*.&#123;h&#125;&#x27;</span><br><span class="line"></span><br><span class="line">#你的SDK路径</span><br><span class="line">s.vendored_frameworks = &#x27;BjcaSignSDK/BjcaSignSDK.framework&#x27;</span><br><span class="line"></span><br><span class="line">#SDK头文件路径</span><br><span class="line">s.public_header_files = &#x27;BjcaSignSDK/BjcaSignSDK.framework/Headers/*.&#123;h&#125;&#x27;</span><br><span class="line"></span><br><span class="line">#依赖库</span><br><span class="line">#s.libraries    = &#x27;sqlite3&#x27;,&#x27;icucore&#x27;,&#x27;z&#x27;</span><br><span class="line"></span><br><span class="line">#依赖库</span><br><span class="line">#s.frameworks   = &#x27;UIKit&#x27;,&#x27;Foundation&#x27;</span><br><span class="line"></span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>保存，然后把打包好的framework放到本地仓库</p>
<p><img src="/images/cocoapods-fm/2.png"><br>注意层级关系</p>
<h2 id="4-传到git上并打tag"><a href="#4-传到git上并打tag" class="headerlink" title="4.传到git上并打tag"></a>4.传到git上并打tag</h2><p>命令如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#创建版本0.0.1的tag</span><br><span class="line">git tag 0.0.1</span><br><span class="line">#把0.0.1版本的tag push到github上</span><br><span class="line">git push origin tag 0.0.1</span><br><span class="line">#删除名为0.0.1的tag，这个是敲错了tag名使用</span><br><span class="line">git tag -d 0.0.1</span><br></pre></td></tr></table></figure>

<p>注意了，这里的tag名要和上面第3步填写的version相符合</p>
<h2 id="5-验证podspec文件是否正常"><a href="#5-验证podspec文件是否正常" class="headerlink" title="5.验证podspec文件是否正常"></a>5.验证podspec文件是否正常</h2><p>一般的验证</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd 到sdk目录</span><br><span class="line">pod spec lint BjcaSignSDK.podspec</span><br></pre></td></tr></table></figure>
<p>但是我们不一样，我们的framework里面包含了.a库</p>
<p>所以我们需要使用命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod spec lint BjcaSignSDK.podspec --verbose --use-libraries</span><br></pre></td></tr></table></figure>
<p>进行验证</p>
<p>可以看到，后面带了个use libraries</p>
<p>提醒：如果遇到报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unknown: Encountered an unknown error (/usr/bin/xcrun simctl list -j devices</span><br><span class="line"></span><br><span class="line">xcrun: error: unable to find utility &quot;simctl&quot;, not a developer tool or in PATH</span><br></pre></td></tr></table></figure>
<p>打开xcode</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xcode-&gt;preferences-&gt;locations</span><br></pre></td></tr></table></figure>
<p>如下图</p>
<p><img src="/images/cocoapods-fm/3.png"></p>
<h2 id="5-验证通过以后，发布"><a href="#5-验证通过以后，发布" class="headerlink" title="5.验证通过以后，发布"></a>5.验证通过以后，发布</h2><p>正常发布</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod trunk push BjcaSignSDK.podspec</span><br></pre></td></tr></table></figure>
<p>不过我们还是用下面这个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod trunk push  BjcaSignSDK.podspec --allow-warnings --use-libraries</span><br></pre></td></tr></table></figure>

<p>更新也是这个命令，改完podspec后重新验证上传即可</p>
<h3 id="疑惑1：为什么我的包才25m，传却传了贼大的一个包"><a href="#疑惑1：为什么我的包才25m，传却传了贼大的一个包" class="headerlink" title="疑惑1：为什么我的包才25m，传却传了贼大的一个包"></a>疑惑1：为什么我的包才25m，传却传了贼大的一个包</h3><p>答：是接收，不是上传，英语不好emmmm</p>
<h3 id="疑惑2：如何把bundle一起传上去？"><a href="#疑惑2：如何把bundle一起传上去？" class="headerlink" title="疑惑2：如何把bundle一起传上去？"></a>疑惑2：如何把bundle一起传上去？</h3><p>s.resources = “bundle文件的路径”</p>
<p>参考资料：</p>
<p>(提交Framework到CocoaPods)[<a href="https://www.jianshu.com/p/40f854f6380f]">https://www.jianshu.com/p/40f854f6380f]</a></p>
<p>(发布开源项目到cocoapods上去)[<a href="https://www.jianshu.com/p/69ebc6a4cae4]">https://www.jianshu.com/p/69ebc6a4cae4]</a></p>
<p>(iOS中Cocoapods的Bundle)[<a href="https://www.jianshu.com/p/73e4262136fc]">https://www.jianshu.com/p/73e4262136fc]</a></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>FastLane-ios自动打包效率神器</title>
    <url>/2019/07/08/FastLane-ios%E8%87%AA%E5%8A%A8%E6%89%93%E5%8C%85%E6%95%88%E7%8E%87%E7%A5%9E%E5%99%A8/</url>
    <content><![CDATA[<h1 id="FastLane-ios自动打包效率神器"><a href="#FastLane-ios自动打包效率神器" class="headerlink" title="FastLane-ios自动打包效率神器"></a>FastLane-ios自动打包效率神器</h1><p>背景: 不想每次测试都喊我打包,很累的,所以开始寻找,有你的世界在哪里</p>
<h2 id="一-安装fastlane"><a href="#一-安装fastlane" class="headerlink" title="一.安装fastlane"></a>一.安装fastlane</h2><h3 id="1-换ruby源"><a href="#1-换ruby源" class="headerlink" title="1.换ruby源"></a>1.换ruby源</h3><p>多话不说,墙,换成国内镜像源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/</span><br><span class="line">$ gem sources -l</span><br><span class="line">https://gems.ruby-china.com</span><br><span class="line"># 确保只有 gems.ruby-china.com</span><br></pre></td></tr></table></figure>
<h3 id="2-开始用gem安装-不建议使用brew-cask安装"><a href="#2-开始用gem安装-不建议使用brew-cask安装" class="headerlink" title="2.开始用gem安装(不建议使用brew cask安装)"></a>2.开始用gem安装(不建议使用brew cask安装)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo gem install fastlane -NV</span><br></pre></td></tr></table></figure>
<p>耐心等待,等装完</p>
<h2 id="二-为项目配置fastlane"><a href="#二-为项目配置fastlane" class="headerlink" title="二.为项目配置fastlane"></a>二.为项目配置fastlane</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd 到你的ios项目根目录下</span><br><span class="line">fastlane init</span><br></pre></td></tr></table></figure>
<p><img src="/images/fastlane/1.png" alt="如图"></p>
<p>这时候有个选项,根据自己需求选就行,我选择的4,自定义,然后回车</p>
<p>当命令执行到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bundle update</span><br></pre></td></tr></table></figure>
<p>接着你会发现,你卡在这了,也是墙的原因,不要犹豫,ctrl+c暂停一哈</p>
<p>用finder打开你的ios项目根目录,你会发现生成了<br>GemFile文件和fastlane文件夹(里面包含一个Appfile和FastFile)</p>
<p>这时候我们打开GemFile,将里面的ruby源改为国内镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#旧,删除这行</span><br><span class="line">source &quot;https://rubygems.org&quot;</span><br><span class="line">#新</span><br><span class="line">source &quot;https://gems.ruby-china.com&quot;</span><br></pre></td></tr></table></figure>
<p>保存以后,cd到ios根目录下,输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bundle update</span><br></pre></td></tr></table></figure>
<p>继续升级,期间可能问你要几次密码,输入你的mac开机密码即可.</p>
<p>至此,为项目做准备工作完毕.</p>
<h2 id="三-FastLane编写"><a href="#三-FastLane编写" class="headerlink" title="三.FastLane编写"></a>三.FastLane编写</h2><p>FastLane文件夹下有个FastLane文件,这个文件其实就是我们进行打包工作用的ruby脚本<br>(不要看到ruby脚本就害怕,我也不会,但是依葫芦画瓢没什么难的)<br>如图,给我们留了一个示例.</p>
<p><img src="/images/fastlane/2.png" alt="示例"><br>再百度一下别人咋写的,我们依葫芦画瓢抄一份,如下图</p>
<p><img src="/images/fastlane/3.png" alt="我写的"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">desc &quot;打一个测试包看看&quot;</span><br><span class="line">  lane :test_ad do |options|</span><br><span class="line">  gym(</span><br><span class="line">    clean:true, #打包前clean项目</span><br><span class="line">    export_method: &quot;ad-hoc&quot;, #导出方式,平时打包这个肯定看过,不用我多说</span><br><span class="line">    scheme:&quot;RevenueReport&quot;, #scheme,写你项目的target名</span><br><span class="line">    configuration: &quot;Release&quot;,#环境 Debug,Release,或者你自己改过项目可能还有别的环境,这个你填自己项目的就行</span><br><span class="line">    output_directory:&quot;./app&quot;,#ipa的存放目录,没有文件夹会自动生成</span><br><span class="line">    #output_name:get_build_number()#输出ipa的文件名为当前的build号,我改成了我app的名字如下</span><br><span class="line">    output_name:&quot;RevenueReport&quot;</span><br><span class="line">  )</span><br><span class="line">    # add actions here: https://docs.fastlane.tools/actions</span><br><span class="line">  end</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>保存,我们开始打个ad包看看(如果你有多个target或者使用pod等三方库管理,怎么编写自行百度一下,我因为是react-native的项目,没有使用pod管理,这里就不写了)</p>
<h3 id="四-打包"><a href="#四-打包" class="headerlink" title="四.打包"></a>四.打包</h3><p>依旧,我们cd到ios根目录下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd 项目根目录</span><br><span class="line">#test_ad是刚刚在fastlane的文件中起的名字,你写自己的</span><br><span class="line">fastlane test_ad</span><br></pre></td></tr></table></figure>
<p>中途可能会问你要appid和appid密码以及开了双重认证的密码,这个就不用说了,你填写就行.我因为填写过,这里就不截图了.</p>
<p>耐心等待即可.</p>
<p><img src="/images/fastlane/4.png" alt="image"></p>
<p><img src="/images/fastlane/5.png" alt="image"><br>打包就完成了,ipa和dsym都有.稳</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins配合FastLane完成打包</title>
    <url>/2019/07/08/Jenkins%E9%85%8D%E5%90%88FastLane%E5%AE%8C%E6%88%90%E6%89%93%E5%8C%85/</url>
    <content><![CDATA[<h1 id="Jenkins配合FastLane完成打包"><a href="#Jenkins配合FastLane完成打包" class="headerlink" title="Jenkins配合FastLane完成打包"></a>Jenkins配合FastLane完成打包</h1><p><a href="https://www.jianshu.com/p/69d6e4cf90bf">FastLane的使用</a></p>
<p><a href="https://www.jianshu.com/p/321928ac0f28">Jenkins的安装</a></p>
<p>我们将两者组合起来.</p>
<p>首先说一下,ios打包用的xcbuild命令,所以必须是macos环境,这个不用多解释.</p>
<p>所以….Jenkins所在宿主机得是mac系统的(如果有大神知道别的方式,麻烦指点一下),因为没有多余的mac机子,我就搭在了我自己的机子上.</p>
<p>接下来我们说说怎么搞</p>
<h2 id="启动Jenkins"><a href="#启动Jenkins" class="headerlink" title="启动Jenkins"></a>启动Jenkins</h2><p>首先,启动终端,输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Jenkins</span><br></pre></td></tr></table></figure>
<p>启动Jenkins,打开地址(没改过端口就是8080了)<a href="http://localhost:8080/">http://localhost:8080</a></p>
<h2 id="新建任务"><a href="#新建任务" class="headerlink" title="新建任务"></a>新建任务</h2><p>新建item<br><img src="/images/jenkins-fastlane/1.png" alt="新建item"><br><img src="/images/jenkins-fastlane/2.png" alt="新建自由项目"></p>
<p>啥也不用勾,写个描述差不多了<br><img src="/images/jenkins-fastlane/3.png" alt="image"><br>源代码管理需要写一下<br><img src="/images/jenkins-fastlane/4.png" alt="源代码管理"></p>
<p><img src="/images/jenkins-fastlane/5.png" alt="触发器什么的啥也不用写"></p>
<p>最后就是这个Execute shell了</p>
<p>Jenkins从git上拉完代码,会执行这里面的shell</p>
<p>shell脚本的编写就需要各位去学习一下了</p>
<p>下图是我的shell脚本,我给大家讲解一下我每一行的作用</p>
<p><img src="/images/jenkins-fastlane/6.png" alt="Execute shell"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#Jenkins部署在我本机,我本机作为宿主机,拉下来的代码也在我本机,所以我想看一下代码拉下来以后的路径,因此在这里打印一下</span><br><span class="line">echo &quot;获取当前项目路径&quot;</span><br><span class="line">echo $(pwd)</span><br><span class="line">#------------react-native的三方库操作 start--------------#</span><br><span class="line">#做一次yarn操作,因为我的项目是react-native项目,且node_modules不上传git,因此从git上拉下来的代码是不包含node_modules的,我需要做一次yarn操作.</span><br><span class="line">#同理,你的ios项目如果是使用pod管理,你可以做一次pod install,把需要的三方库拉下来</span><br><span class="line">echo &quot;执行yarn操作&quot;</span><br><span class="line">yarn</span><br><span class="line">#替换需要修改的文件,这个install2是我在项目里写的脚本,做我需要的一些事,可以忽略</span><br><span class="line">npm run install2</span><br><span class="line">#------------react-native的三方库操作 end--------------#</span><br><span class="line">#上述动作执行完毕以后执行下面的操作</span><br><span class="line">echo &quot;执行完毕,cd到ios下做打包工作&quot;</span><br><span class="line">#cd到ios目录下,当然,如果你本身就是ios纯原生项目,你就不要cd了</span><br><span class="line">cd ./ios</span><br><span class="line">echo &quot;开始打包&quot;</span><br><span class="line">#执行你写的FastLane的action,可以见文章开头的FastLane的使用</span><br><span class="line">fastlane test_ad</span><br><span class="line">echo &quot;打包完毕&quot;</span><br><span class="line">#------------打包完毕,下面是我自定义的一些操作--------------#</span><br><span class="line">#因为我打完包需要给测试做内测分发,自己搭建了一个内测分发的压面,下面是我自定义的一些操作,这里就省略了</span><br><span class="line">#....</span><br></pre></td></tr></table></figure>
<p>点击保存,就这样,打包脚本的编写就完成了<br><img src="/images/jenkins-fastlane/7.png" alt="保存"></p>
<h2 id="测试一下"><a href="#测试一下" class="headerlink" title="测试一下"></a>测试一下</h2><p>直接上图把,看图比较直观</p>
<p><img src="/images/jenkins-fastlane/8.png" alt="开始构建"></p>
<p><img src="/images/jenkins-fastlane/9.png" alt="查看正在构建的任务"></p>
<p><img src="/images/jenkins-fastlane/10.png" alt="查看控制台输出"><br>所有的log信息都在这里看,报错了也可以在这里看到底什么地方报错了,针对性解决对应错误.如下图</p>
<p><img src="/images/jenkins-fastlane/11.png" alt="控制台输出"><br>最后的结果如下图</p>
<p><img src="/images/jenkins-fastlane/12.png" alt="结果"></p>
<p><img src="/images/jenkins-fastlane/13.png" alt="产物"><br>Jenkins拉下来的项目,成功打出ipa包和dsym文件.</p>
<p>同时,你有打出来的包文件的路径,你是想上传蒲公英或者别的平台或公司内部有分发,都是可以直接拿着产物为所欲为的.例如:我将它放到了我们自己的服务器上进行分发.见下面这篇文章</p>
<p><a href="https://www.jianshu.com/p/74bb3d7eb36d">ios内测分发(企业/非企业分发)</a></p>
<p><a href>Jenkins打完包以后公司内部服务器分发(还没写,挖坑待填)</a></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Postman批量请求并保存请求结果</title>
    <url>/2022/09/06/Postman%E6%89%B9%E9%87%8F%E8%AF%B7%E6%B1%82%E5%B9%B6%E4%BF%9D%E5%AD%98%E8%AF%B7%E6%B1%82%E7%BB%93%E6%9E%9C/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>现在基本不怎么写代码了，偶尔会用技术去辅助业务。</p>
<p>这次业务上碰到这样一个问题，要去采集客户系统的数据信息，之前是相关业务人员一页一页查，然后复制粘贴，所以我们使用postman进行批量请求，并保存结果</p>
<h2 id="1-设置请求变化参数"><a href="#1-设置请求变化参数" class="headerlink" title="1.设置请求变化参数"></a>1.设置请求变化参数</h2><p>假设前期的请求已经设置好了，那么接下来就是设置变化的参数</p>
<p>其实肥肠简单，只要把相关参数设置为<code>&#123;&#123;参数名&#125;&#125;</code></p>
<p>如下图</p>
<p><img src="/images/postman1/1.png" alt="配置"></p>
<h2 id="2-放置待变化的参数，数组类型"><a href="#2-放置待变化的参数，数组类型" class="headerlink" title="2.放置待变化的参数，数组类型"></a>2.放置待变化的参数，数组类型</h2><h3 id="2-1打开Run"><a href="#2-1打开Run" class="headerlink" title="2.1打开Run"></a>2.1打开<code>Run</code></h3><p><img src="/images/postman1/2.png" alt="配置"></p>
<h3 id="2-2勾选相关配置"><a href="#2-2勾选相关配置" class="headerlink" title="2.2勾选相关配置"></a>2.2勾选相关配置</h3><p>勾选需要进行批量请求的接口，并将需要变化的值用数组的方式写在json文件里，<code>select file</code>选择相关文件</p>
<p>例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//aaa.json</span><br><span class="line">[&#123;</span><br><span class="line">    aaa:123,</span><br><span class="line">&#125;,&#123;</span><br><span class="line">    aaa:456,</span><br><span class="line">&#125;]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>当然也可以用<code>xlxs</code>等文件，这里就不做详解，开发常用的还是<code>json</code></p>
<p><img src="/images/postman1/3.png" alt="勾选内容"></p>
<h3 id="点击Run，此时会发现，看不到请求任何结果-。"><a href="#点击Run，此时会发现，看不到请求任何结果-。" class="headerlink" title="点击Run，此时会发现，看不到请求任何结果=。="></a>点击Run，此时会发现，看不到请求任何结果=。=</h3><h2 id="3-填写Test"><a href="#3-填写Test" class="headerlink" title="3.填写Test"></a>3.填写Test</h2><p>其实关键就是填写<code>Test</code>，通过<code>Test</code>将请求结果打印出来，或者只打印自己要的参数</p>
<p><code>Test</code>是填写测试用的，可以用来测试请求结果符合预期，就像写单元测试一样</p>
<p><img src="/images/postman1/4.png" alt="test"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pm.test(pm.response.json().data.XINGMING+&quot;,&quot;+pm.response.json().data.ZHENGJIANYXQ+&quot;,&quot;+pm.response.json().data.LIANXIFS+&quot;,&quot;+pm.response.json().data.HUJIDDWMC+&quot;,&quot;+pm.response.json().data.XIANCHANGZD,function ()&#123;</span><br><span class="line">    console.log(responseBody)</span><br><span class="line">    console.log(pm.response.body)</span><br><span class="line">    pm.expect(pm.response.text()).to.include(&quot;XINGMING&quot;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="4-再次run，等待请求结束，导出结果"><a href="#4-再次run，等待请求结束，导出结果" class="headerlink" title="4.再次run，等待请求结束，导出结果"></a>4.再次run，等待请求结束，导出结果</h2><p><img src="/images/postman1/5.png" alt="导出"></p>
<p><img src="/images/postman1/6.png" alt="结果"></p>
]]></content>
      <categories>
        <category>Postman</category>
      </categories>
      <tags>
        <tag>Postman</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins安装-2019</title>
    <url>/2019/04/28/Jenkins%E5%AE%89%E8%A3%85-2019/</url>
    <content><![CDATA[<h1 id="本文写于2019-4-28-应该是最新安装教程了"><a href="#本文写于2019-4-28-应该是最新安装教程了" class="headerlink" title="本文写于2019-4-28,应该是最新安装教程了"></a>本文写于2019-4-28,应该是最新安装教程了</h1><h2 id="一-安装Java"><a href="#一-安装Java" class="headerlink" title="一.安装Java"></a>一.安装Java</h2><p><strong>声明,我不是干安卓开发或者后台开发的,我以下安装的这些版本的java会不会对后台或者安卓项目产生影响我一概不知,我只是为了安装Jenkins而加入一个java8而已,不习惯的同学可以自行去<a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html">Orcale</a>的官网下载java8</strong></p>
<h3 id="1-安装sdkman"><a href="#1-安装sdkman" class="headerlink" title="1.安装sdkman"></a>1.安装sdkman</h3><p>使用brew安装Jenkins的时候,如果你没有安装java8肯定会报错要求你安装java1.8版本(我试过装java11不行),所以不要挣扎了,装java8吧</p>
<p>这时候你肯定想用brew安装java,你会发现只有java6和java11,java8的安装包被删了</p>
<p>你肯定搜到过下面两个命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew tap caskroom/versions</span><br><span class="line">brew cask install java8</span><br></pre></td></tr></table></figure>
<p>放弃吧.不行的</p>
<p>这里我推荐另外一个安装工具:<a href="https://sdkman.io/">SDKMAN</a></p>
<p>安装步骤如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#1.安装</span><br><span class="line">curl -s &quot;https://get.sdkman.io&quot; | bash</span><br><span class="line">#2.添加path</span><br><span class="line">source &quot;$HOME/.sdkman/bin/sdkman-init.sh&quot;</span><br><span class="line">#3.检查一下版本看是否安装好了</span><br><span class="line">sdk version</span><br></pre></td></tr></table></figure>
<h3 id="2-安装java"><a href="#2-安装java" class="headerlink" title="2.安装java"></a>2.安装java</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#搜索当前可安装java版本</span><br><span class="line">sdk list java</span><br></pre></td></tr></table></figure>
<p><img src="/images/jenkins/1.png" alt="java列表.png"><br>你会发现有一堆java8,后面又有一些后缀,且唯独没有Orcale的,这里有个文章给解释一下这些后缀是干嘛用的:<a href="https://www.oschina.net/news/99836/time-to-look-beyond-oracles-jdk?origin=zhzd">了解其他java版本</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#我安装了这个版本,你可以安装其他的</span><br><span class="line">sdk install java 8.0.212-zulu</span><br><span class="line">#安装完成以后,查看一下当前的java版本</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure>

<h2 id="二-安装Jenkins"><a href="#二-安装Jenkins" class="headerlink" title="二.安装Jenkins"></a>二.安装Jenkins</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install Jenkins</span><br></pre></td></tr></table></figure>

<p>安装完成以后,做一下软连接,下面的地址里面的<strong>wuxing</strong>需要你们自己替换成自己mac的用户名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#输入如下命令</span><br><span class="line">ln -sfv /usr/local/opt/jenkins/*.plist ~/Library/LaunchAgents</span><br><span class="line">#你会得到</span><br><span class="line">#/Users/wuxing/Library/LaunchAgents/homebrew.mxcl.jenkins.plist -&gt; /usr/local/opt/jenkins/homebrew.mxcl.jenkins.plist</span><br><span class="line"></span><br><span class="line">#接下来把地址下的plist搞一下</span><br><span class="line">launchctl load /Users/wuxing/Library/LaunchAgents/homebrew.mxcl.jenkins.plist</span><br></pre></td></tr></table></figure>
<h2 id="三-运行Jenkins"><a href="#三-运行Jenkins" class="headerlink" title="三.运行Jenkins"></a>三.运行Jenkins</h2><p>###1.运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#输入</span><br><span class="line">jenkins</span><br></pre></td></tr></table></figure>
<p>如果没有报错的话.你可以打开浏览器输入<a href="http://localhost:8080/">http://localhost:8080/</a>了,会出来一个需要你输入密码的页面<br><img src="/images/jenkins/2.png" alt="解锁"></p>
<p>上面有一个红色的地址,打开finder进到该目录下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#目录地址,wuxing替换成自己的mac用户名</span><br><span class="line">/Users/wuxing/.jenkins/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure>
<p>其中的initialAdminPassword就是密码了,用文稿打开,复制一哈,粘贴到网页上,进入Jenkins的配置</p>
<h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h3><p>选择推荐配置(左边的),等待安装完毕,下一步即可</p>
<p>这里就不配图了</p>
<h3 id="3-管理员用户配置"><a href="#3-管理员用户配置" class="headerlink" title="3.管理员用户配置"></a>3.管理员用户配置</h3><p>如下图<br><img src="/images/jenkins/3.png" alt="image.png"><br>点击保存并完成</p>
<p><img src="/images/jenkins/4.png" alt="image.png"><br>这个地方我也不知道怎么搞,我选择了跳过,你设置了不要怕,后期可以在</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Jenkins-管理</span><br></pre></td></tr></table></figure>
<p>里面进行修改</p>
<p><img src="/images/jenkins/5.png" alt="搞定"></p>
<p>搞定了</p>
<h3 id="2019-8-13更新"><a href="#2019-8-13更新" class="headerlink" title="2019.8.13更新"></a>2019.8.13更新</h3><h3 id="jdk安装"><a href="#jdk安装" class="headerlink" title="jdk安装"></a>jdk安装</h3><p>可以通过这个命令安装jdk8,装的是openjdk</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew cask intall homebrew/cask-versions/adoptopenjdk8</span><br></pre></td></tr></table></figure>
<h3 id="brew运行"><a href="#brew运行" class="headerlink" title="brew运行"></a>brew运行</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//第一次运行</span><br><span class="line">//2.189是Jenkins版本号,如果你不知是多少,可以cd到文件夹下看看</span><br><span class="line">java -jar /usr/local/Cellar/jenkins/2.189/libexec/jenkins.war --httpPort=8080</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//以后运行</span><br><span class="line">brew services start jenkins</span><br></pre></td></tr></table></figure>
<h3 id="brew安装的Jenkins更改端口"><a href="#brew安装的Jenkins更改端口" class="headerlink" title="brew安装的Jenkins更改端口"></a>brew安装的Jenkins更改端口</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew services stop jenkins</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /usr/local/opt/jenkins/homebrew.mxcl.jenkins.plist</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  &lt;string&gt;--httpListenAddress=127.0.0.1&lt;/string&gt;</span><br><span class="line">      &lt;string&gt;--httpPort=8080&lt;/string&gt;</span><br><span class="line">//修改为</span><br><span class="line">  &lt;string&gt;--httpListenAddress=0.0.0.0&lt;/string&gt;</span><br><span class="line">      &lt;string&gt;--httpPort=任意端口&lt;/string&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew services restart jenkins</span><br></pre></td></tr></table></figure>
<p>好了</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接:"></a>参考链接:</h1><p><a href="https://blog.csdn.net/qwfys200/article/details/84888924">SDKMan安装参考</a><br><a href="https://www.jianshu.com/p/3668979476ad">Jenkins安装</a></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>RN分享二</title>
    <url>/2019/04/23/RN%E5%88%86%E4%BA%AB%E4%BA%8C/</url>
    <content><![CDATA[<h1 id="常用三方库"><a href="#常用三方库" class="headerlink" title="常用三方库"></a>常用三方库</h1><h2 id="一-如何引入三方库"><a href="#一-如何引入三方库" class="headerlink" title="一. 如何引入三方库"></a>一. 如何引入三方库</h2><p>上次分享我们讲到我们使用npm或者yarn进行管理</p>
<p>我们建议使用yarn进行管理,原因上节课也说过了,有下面几点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.Yarn是由Facebook、Google、Exponent 和 Tilde 联合推出了一个新的 JS 包管理工具 ,我们写的RN是Facebook开源的,我们当然要用匹配的东西</span><br><span class="line">2.npm很慢,因为是安装完一个package再安装下一个;yarn是并行安装,并且会生成离线库,安装过的库第二次安装都是从缓存的离线库读取,速度很快</span><br><span class="line">3.yarn安装版本统一.存在yarn.lock文件去管理每个库的版本统一</span><br><span class="line">4.yarn能对多注册来源进行处理：所有的依赖包，不管他被不同的库间接关联引用多少次，安装这个包时，只会从一个注册来源去装，要么是 npm 要么是 bower, 防止出现混乱不一致。</span><br><span class="line">5.…………</span><br></pre></td></tr></table></figure>
<h3 id="1-常用命令符"><a href="#1-常用命令符" class="headerlink" title="1.常用命令符"></a>1.常用命令符</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#xxxx代表库名</span><br><span class="line">#1.安装package.json中已经存在的库</span><br><span class="line">yarn</span><br><span class="line">#2.新增一个库</span><br><span class="line">yarn add xxxx</span><br><span class="line">#3.新增一个库到开发依赖</span><br><span class="line">yarn add xxxx --dev</span><br><span class="line">#4.移除一个库</span><br><span class="line">yarn remove xxxx</span><br></pre></td></tr></table></figure>
<p>附赠一个<a href="https://yarn.bootcss.com/" target="_blank">yarn的中文社区文档</a></p>
<h3 id="二-常用三方库列表"><a href="#二-常用三方库列表" class="headerlink" title="二.常用三方库列表"></a>二.常用三方库列表</h3><table>
<thead>
<tr>
<th>三方库名称</th>
<th align="center">描述</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://reactnavigation.org/zh-Hans/" target="_blank">react-navigation</a></td>
<td align="center">是RN上较为优秀的路由管理库,几乎可以说是项目必备的路由管理框架</td>
<td></td>
</tr>
<tr>
<td><a href="http://momentjs.cn/" target="_blank">moment</a></td>
<td align="center">一个前端应该非常熟悉的时间库,用于前端的时间解析之类的</td>
<td></td>
</tr>
<tr>
<td><a href="https://cn.eslint.org/" target="_blank">ESLint</a></td>
<td align="center">一个前端应该非常熟悉格式规范库,用于规范代码编写</td>
<td></td>
</tr>
<tr>
<td><a href="https://cn.mobx.js.org/" target="_blank">mobx</a></td>
<td align="center">一个状态管理库,用于应用内部状态的统一管理</td>
<td></td>
</tr>
</tbody></table>
<h4 id="1-react-navigation"><a href="#1-react-navigation" class="headerlink" title="1.react-navigation"></a>1.react-navigation</h4><p><a href="https://juejin.im/post/5cbec7b66fb9a0321437619a">引入react-navigation</a></p>
<h4 id="2-引入moment"><a href="#2-引入moment" class="headerlink" title="2.引入moment"></a>2.引入moment</h4><p>参照以上方式</p>
<h4 id="3-引入ESLint"><a href="#3-引入ESLint" class="headerlink" title="3.引入ESLint"></a>3.引入ESLint</h4><p><a href="https://www.jianshu.com/p/8c5ba6ab4ca9">ESLint引入</a></p>
<h4 id="4-mobx引入"><a href="#4-mobx引入" class="headerlink" title="4.mobx引入"></a>4.mobx引入</h4><p>只讲引入,使用放到第三次分享讲,下面链接中的使用并不是最佳实践,未更新,只看引入方面</p>
<p><a href="https://www.jianshu.com/p/14bc2805270c">mobx引入</a></p>
<h2 id="二-开发小技巧"><a href="#二-开发小技巧" class="headerlink" title="二.开发小技巧"></a>二.开发小技巧</h2><h3 id="1-webstrom模板文件"><a href="#1-webstrom模板文件" class="headerlink" title="1.webstrom模板文件"></a>1.webstrom模板文件</h3><p>新建文件的时候,肯定会有一些默认必须的东西,我们可以进行如下操作.</p>
<p>1.webstrom-Preferences-Editor-File and Code Templates</p>
<p>2.如下图</p>
<p><img src="/images/rn%E5%88%86%E4%BA%AB%E4%BA%8C1/1.png" alt="如图"></p>
<p>我给出一份默认View的模板,大家也可以自己替换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*************************************************************************************************</span><br><span class="line"> * &lt;pre&gt;</span><br><span class="line"> * @项目名称:   $&#123;PROJECT_NAME&#125;</span><br><span class="line"> * @版权所有:   </span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> * @类描述:</span><br><span class="line"> * @版本:         </span><br><span class="line"> * @作者:         $&#123;USER&#125;</span><br><span class="line"> * @邮箱:         </span><br><span class="line"> * @创建时间:     $&#123;YEAR&#125;-$&#123;MONTH&#125;-$&#123;DAY&#125; $&#123;TIME&#125;</span><br><span class="line"> *</span><br><span class="line"> * @修改记录：</span><br><span class="line"> -----------------------------------------------------------------------------------------------</span><br><span class="line"> ----------- 时间      |   修改人    |     修改的方法       |         修改描述   ---------------</span><br><span class="line"> -----------------------------------------------------------------------------------------------</span><br><span class="line"> &lt;/pre&gt;</span><br><span class="line"> ************************************************************************************************/</span><br><span class="line">import React, &#123; Component &#125; from &#x27;react&#x27;;</span><br><span class="line">import &#123;</span><br><span class="line">  StyleSheet,</span><br><span class="line">  Text,</span><br><span class="line">  View,</span><br><span class="line">  Image,</span><br><span class="line">&#125; from &#x27;react-native&#x27;;</span><br><span class="line"></span><br><span class="line">export class  $&#123;NAME&#125;  extends Component &#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">      render() &#123;</span><br><span class="line">        return (</span><br><span class="line">          &lt;View style=&#123;$&#123;NAME&#125;Styles.container&#125;&gt;</span><br><span class="line">           &lt;Text&gt;$&#123;NAME&#125;&lt;/Text&gt;</span><br><span class="line">          &lt;/View&gt;</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let $&#123;NAME&#125;Styles = StyleSheet.create(&#123;</span><br><span class="line">  container: &#123;</span><br><span class="line">    flex: 1,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这样,新建一个文件,就会包含这些默认代码了,不需要自己再写了.</p>
<h3 id="2-webstrom的RN代码提示"><a href="#2-webstrom的RN代码提示" class="headerlink" title="2.webstrom的RN代码提示"></a>2.webstrom的RN代码提示</h3><p>写代码的时候肯定需要代码提示,RN的代码提示可以通过以下方式添加</p>
<p>1.webstrom | Preferences | Languages &amp; Frameworks | JavaScript | Libraries</p>
<p><img src="/images/rn%E5%88%86%E4%BA%AB%E4%BA%8C1/2.png" alt="如图"></p>
<p>我们需要点击右边你的down(此处可能需要翻墙,懂我意思吧)</p>
<p>然后添加如下两个库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@types/react</span><br><span class="line">@types/react-native</span><br></pre></td></tr></table></figure>

<h3 id="3-webstrom代码块"><a href="#3-webstrom代码块" class="headerlink" title="3.webstrom代码块"></a>3.webstrom代码块</h3><p>有些代码块是经常会使用到的,比如我们在一个js文件中可能会拼写一些在本页面用到的基础组件,新建的class是必不可少的</p>
<p>我们可以采取代码块的方式完成这些(当然,dash的代码块也是可以的,而且可能更好用)</p>
<p>1.webstrom | Preferences | Editor | Live Templates</p>
<p>如图<br><img src="/images/rn%E5%88%86%E4%BA%AB%E4%BA%8C1/3.png" alt="如图"></p>
<p>我们可以使用这种方式添加代码块,效果如下</p>
<p><img src="/images/rn%E5%88%86%E4%BA%AB%E4%BA%8C1/4.gif" alt="效果图"></p>
<h3 id="4-webstrom上eslint格式化快捷"><a href="#4-webstrom上eslint格式化快捷" class="headerlink" title="4.webstrom上eslint格式化快捷"></a>4.webstrom上eslint格式化快捷</h3><p><a href="https://www.jianshu.com/p/8c5ba6ab4ca9">点击这里</a></p>
<h3 id="5-iOS利用xcode查看层级"><a href="#5-iOS利用xcode查看层级" class="headerlink" title="5.iOS利用xcode查看层级"></a>5.iOS利用xcode查看层级</h3><p>使用xcode运行项目查看页面层级</p>
<p><img src="/images/rn%E5%88%86%E4%BA%AB%E4%BA%8C1/5.png" alt="层级查看"></p>
<h3 id="6-iOS查看项目中使用AsyncStorage存储的数据"><a href="#6-iOS查看项目中使用AsyncStorage存储的数据" class="headerlink" title="6.iOS查看项目中使用AsyncStorage存储的数据"></a>6.iOS查看项目中使用AsyncStorage存储的数据</h3><p>模拟器:打印沙盒路径直接查看</p>
<p>真机:<a href="https://www.jianshu.com/p/cccf744bdd8d">五.RN持久化</a></p>
<h3 id="7-mock平台搭建-帮助前端开发者先行"><a href="#7-mock平台搭建-帮助前端开发者先行" class="headerlink" title="7.mock平台搭建,帮助前端开发者先行"></a>7.mock平台搭建,帮助前端开发者先行</h3><p><a href="https://www.jianshu.com/p/38d47aca33bc">mock</a></p>
<h3 id="8-Charles的使用"><a href="#8-Charles的使用" class="headerlink" title="8.Charles的使用"></a>8.Charles的使用</h3><p>建议百度</p>
]]></content>
      <categories>
        <category>react-native</category>
      </categories>
      <tags>
        <tag>react-native</tag>
      </tags>
  </entry>
  <entry>
    <title>React-Native 分享二之React-Navigation</title>
    <url>/2019/04/23/React-Native-%E5%88%86%E4%BA%AB%E4%BA%8C%E4%B9%8BReact-Navigation/</url>
    <content><![CDATA[<p>我们使用的是<strong>3.x版本</strong>,需要做如下操作</p>
<h1 id="一-引入react-navigation"><a href="#一-引入react-navigation" class="headerlink" title="一.引入react-navigation"></a>一.引入react-navigation</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add react-navigation</span><br></pre></td></tr></table></figure>

<p><img src="/images/rn%E5%88%86%E4%BA%AB%E4%BA%8C/1.png" alt="如图"><br>如图,我们发现有很多warn,报的是一些依赖没满足,一般我们说程序员不看warn,肯定就直接运行了.</p>
<p>但是作为过来人,告诉你肯定会报错,缺少这个warn当中的一个库<strong>react-native-gesture-handler</strong>所以也别走弯路,把这些库都给加上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#这是一个手势库</span><br><span class="line">yarn add react-native-gesture-handler</span><br><span class="line">#我也不知道用来干嘛的库,大概是一些屏幕设计吧,这是它的github:https://github.com/browniefed/react-native-screens</span><br><span class="line">yarn add react-native-screens</span><br><span class="line"></span><br><span class="line">#react-native-gesture-handler又依赖如下库</span><br><span class="line">yarn add react-art</span><br><span class="line">yarn add react-dom</span><br><span class="line">yarn add react-native-web</span><br></pre></td></tr></table></figure>
<p>全都装完以后,link一下项目</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">react-native link</span><br></pre></td></tr></table></figure>

<p><img src="/images/rn%E5%88%86%E4%BA%AB%E4%BA%8C/2.png" alt="link警告"></p>
<p>这里注意了,在0.59中已经提到,不建议这样做,后续会移除这个命令,必须带上包名link才行</p>
<p><strong>友情提示一下:三方库带原生的需要link,不带原生的没必要link</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#xxxx为三方库名字</span><br><span class="line">react-native link xxxx</span><br></pre></td></tr></table></figure>


<p>运行一下项目,可以正常运行,说明没有link错误,接下来我们分享一下这个三方库的基本使用</p>
<h1 id="二-使用"><a href="#二-使用" class="headerlink" title="二.使用"></a>二.使用</h1><p>常用的有三个API<br>| API名                    | 描述                              |<br>| ———————— | :——————————– |<br>| createAppContainer       | 肯定会用到,这是对外暴露的顶级出口 |<br>| createStackNavigator     | 创建正常页面的navigation          |<br>| createBottomTabNavigator | 创建带tabbar的navigation          |<br>| createSwitchNavigator    | 用于路由切割                      |</p>
<p>先说我们的目的:创建一个登录页和两个业务的带tab的基础页面<br>效果如下</p>
<p><img src="/images/rn%E5%88%86%E4%BA%AB%E4%BA%8C/3.gif" alt="效果"></p>
<p>接下来在构建这样一个基础页面的过程中我逐步讲解</p>
<h2 id="1-创建一个包含两个页面的基础路由"><a href="#1-创建一个包含两个页面的基础路由" class="headerlink" title="1.创建一个包含两个页面的基础路由"></a>1.创建一个包含两个页面的基础路由</h2><p><img src="/images/rn%E5%88%86%E4%BA%AB%E4%BA%8C/4.png" alt="先创建一个基础路由"><br>如图,我们创建了一个基础的路由,包含两个view,并将其作为参数,导出了一个用createAppContainer包裹的App,我们运行看一下效果</p>
<p><img src="/images/rn%E5%88%86%E4%BA%AB%E4%BA%8C/5.gif" alt="效果如图"><br>可以看到两个页面间的跳转</p>
<h2 id="2-创建带tab的路由"><a href="#2-创建带tab的路由" class="headerlink" title="2.创建带tab的路由"></a>2.创建带tab的路由</h2><p>我们需要创建一个带tab的路由,并把homeView和MyView放到这个tab里面</p>
<p>这里要声明一下,带tab的路由,有很多种创建方式,我这里写两种,<strong>一种是我推荐的,一种是react-navigation团队推荐的(但是我不推荐).</strong></p>
<h3 id="react-navigation推荐的方式-我找不到推荐的git地址了"><a href="#react-navigation推荐的方式-我找不到推荐的git地址了" class="headerlink" title="react-navigation推荐的方式(我找不到推荐的git地址了)"></a>react-navigation推荐的方式(我找不到推荐的git地址了)</h3><p>直接上代码</p>
<p><img src="/images/rn%E5%88%86%E4%BA%AB%E4%BA%8C/6.png" alt="路由栈代码"><br>如图,我们分了3个路由栈,路由栈1,2和tab栈</p>
<p>tab栈里面包含了12,其他所有页面需要写到1和2中<br>如图中,我在路由栈1和路由栈2中分别新增了1个页面H1和My1.</p>
<p>我们运行一下项目</p>
<p><img src="/images/rn%E5%88%86%E4%BA%AB%E4%BA%8C/7.gif" alt="团队推荐"></p>
<p>可以发现如下问题:</p>
<ul>
<li>1.二级页面仍然有底下的tabbar</li>
</ul>
<p>从上述的gif可以看到,当我从一级页面HomeView跳转到二级页面H1,在H1的页面中,tabbar还存在.当然,这个问题是可以解决的.并且官网也提供了<a href="https://reactnavigation.org/docs/zh-Hans/navigation-options-resolution.html#tab-navigator-%E5%8C%85%E5%90%AB-stack-navigator-%E4%BD%A0%E5%B8%8C%E6%9C%9B%E9%9A%90%E8%97%8F%E7%89%B9%E5%AE%9A%E9%A1%B5%E9%9D%A2%E4%B8%8A%E7%9A%84-tabbar">解决方案</a></p>
<ul>
<li>2.路由层级”混乱”,可能会引发非预期的后果</li>
</ul>
<p>如gif,可以发现,我们从MyView跳转到H1,但是H1的返回却是返回到HomeView,可能会和我们的预期不同.</p>
<p>当然也是可以解决的,只需要将H1也放到路由栈2中即可.但这意味着可能一个页面你需要注册好几次路由栈,凭空添加了一些维护成本</p>
<h3 id="我推荐的方式"><a href="#我推荐的方式" class="headerlink" title="我推荐的方式"></a>我推荐的方式</h3><p>第一次改写代码如图<br><img src="/images/rn%E5%88%86%E4%BA%AB%E4%BA%8C/8.png" alt="代码"><br>    效果如下</p>
<p><img src="/images/rn%E5%88%86%E4%BA%AB%E4%BA%8C/9.png" alt="第一次运行"><br>我们会发现,有首页有两个navigation头,这是为什么呢?</p>
<p>回到上一个截图,我们可以看到,路由层级关系是</p>
<p><img src="/images/rn%E5%88%86%E4%BA%AB%E4%BA%8C/10.png" alt="层级是这样的"></p>
<p>我们可以看到,root包含一个header,里面的路由栈1也包含一个header.</p>
<p>因此我们只需要去掉一个header即可,这里我们去掉root顶级的header,原因是tab中两个页面都是共享root的一个header,在视觉上这是不正确的</p>
<p>最终代码如下(没变的部分我就折叠起来了,不然一张图截不下):</p>
<p><img src="/images/rn%E5%88%86%E4%BA%AB%E4%BA%8C/11.png" alt="最终代码"></p>
<p>我们再运行一下,效果如下</p>
<p><img src="/images/rn%E5%88%86%E4%BA%AB%E4%BA%8C/12.gif" alt="最终效果"></p>
<h3 id="3-创建包含login页面的路由栈"><a href="#3-创建包含login页面的路由栈" class="headerlink" title="3.创建包含login页面的路由栈"></a>3.创建包含login页面的路由栈</h3><p>创建一个新的js文件放此路由栈,如图<br><img src="/images/rn%E5%88%86%E4%BA%AB%E4%BA%8C/14.png" alt="Login路由栈"></p>
<h3 id="4-路由导出"><a href="#4-路由导出" class="headerlink" title="4.路由导出"></a>4.路由导出</h3><p>由于最终要导出了,我们对前面的路由栈也做了一些小改动</p>
<p>包含tab的路由栈<br><img src="/images/rn%E5%88%86%E4%BA%AB%E4%BA%8C/15.png" alt="AppNav"></p>
<p>包含导航的路由栈没有变化</p>
<p>创建做一个新的js文件导出最终的路由栈,如图</p>
<p><img src="/images/rn%E5%88%86%E4%BA%AB%E4%BA%8C/16.png" alt="最终路由栈"><br>我们可以看到,我们使用createSwitchNavigator这个API切割了两个路由栈,且第二个参数配置项中默认路由是AppLogin,这样默认就进入首页这个路由栈</p>
<p>我们再使用createAppContainer将createSwitchNavigator包裹,得到最终的一个顶级路由,注意createAppContainer方法最终得到的是一个Commponent,可以直接当做组件应用</p>
<p><font color="#cf6659" size="5">这时候,你直接导出AppTopNav是可以正常使用的</font></p>
<p>至于为什么我要额外做一个组件,请继续往后看<strong>4.构建不带props的API路由</strong></p>
<p>最终效果:<br><img src="/images/rn%E5%88%86%E4%BA%AB%E4%BA%8C/17.gif" alt="最终效果"></p>
<h2 id="3-常见使用方式"><a href="#3-常见使用方式" class="headerlink" title="3.常见使用方式"></a>3.常见使用方式</h2><p>例如下面的Login页面,由于login本身页面是被createStackNavigator包裹的,navigation这个对象已经通过props传递了,使用如图</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">this.props.navigation.navigate(&quot;注册的页面名称&quot;,&quot;传递参数对象,可选项&quot;)</span><br></pre></td></tr></table></figure>
<p><img src="/images/rn%E5%88%86%E4%BA%AB%E4%BA%8C/18.png" alt="Login"></p>
<h2 id="4-构建不带props的API路由层"><a href="#4-构建不带props的API路由层" class="headerlink" title="4.构建不带props的API路由层"></a>4.构建不带props的API路由层</h2><p>我们经常会有各种”切面”需求,举个例子:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">无论当前在哪个页面,只要发现你的登录状态过期,立即跳回到登录页.</span><br><span class="line"></span><br><span class="line">在代码层面看,你接受到&quot;登录状态过期&quot;这个信号的时候,你百分之八十的可能性是不在UI层的,可能在网络层其他层面,这时候你就会发现没有navigation给你用,就很难受.</span><br></pre></td></tr></table></figure>

<p>因此,我们需要构建一个存储顶级路由,只暴露API方法的路由层</p>
<p>我们可以新建一个js如下图<br><img src="/images/rn%E5%88%86%E4%BA%AB%E4%BA%8C/19.png" alt="NavigationService"></p>
<p>设置好了set方法和跳转方法,接下来就是怎么set顶级路由进去,回答我们👆的问题</p>
<p><img src="/images/rn%E5%88%86%E4%BA%AB%E4%BA%8C/20.png" alt="设置"><br>我们可以在这里通过ref的方式获取这个顶级路由,并用于后续跳转</p>
<p>使用起来只需要:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NavigationService.navigate(&quot;注册的页面名称&quot;,&quot;传递参数对象,可选项&quot;)</span><br></pre></td></tr></table></figure>

<p><img src="/images/rn%E5%88%86%E4%BA%AB%E4%BA%8C/21.png" alt="如图"><br>路由构造搭建到此完毕</p>
<p><a href="https://github.com/XingXiaoWu/react-navigation3xdemo">demo地址</a></p>
]]></content>
      <categories>
        <category>react-native</category>
      </categories>
      <tags>
        <tag>react-native</tag>
      </tags>
  </entry>
  <entry>
    <title>Swift-ObjectMapper入门</title>
    <url>/2019/04/06/Swift-ObjectMapper%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>突然很想学swift…不怕死的我在完全没用过的情况下决定通过重构公司的古老项目来完成这段学习之旅….<br>model转json或者json转model是很常见的需求….所以这就是为什么我要用ObjectMapper了…(其实是我把# <a href="http://tangplin.github.io/swiftyjson/" title="SwiftyJSON介绍">SwiftyJSON</a><br>的star数错了..我可能会趁用的还不多改成SwiftyJSON,毕竟ObjectMapper实在查不到什么资料不是吗…)</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import UIKit</span><br><span class="line">import ObjectMapper</span><br><span class="line"></span><br><span class="line">class BaseModel: Mappable &#123;</span><br><span class="line">    //定义属性</span><br><span class="line">    var name : String? = &quot;wuxing&quot;    </span><br><span class="line">    init() &#123;</span><br><span class="line">//为什么要写这个init,原因很简单,总有些时候你仅仅想初始化一个model,而非通过外部传入数据初始化</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    required init?(map: Map) &#123;</span><br><span class="line">        //重写ObjectMapper的init</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func mapping(map: Map) &#123;</span><br><span class="line">        //转换规则</span><br><span class="line">        name &lt;- map[&quot;name&quot;]</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>如图,基本已经写得很清楚了emm</p>
<h3 id="规则转换"><a href="#规则转换" class="headerlink" title="规则转换"></a>规则转换</h3><p>有些时候,有的值是int或者bool,你会发现死活转换不出来…这时候就要自己写转换规则了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">import UIKit</span><br><span class="line">import ObjectMapper</span><br><span class="line"></span><br><span class="line">class BaseModel: Mappable &#123;</span><br><span class="line">    var man : Bool? = true</span><br><span class="line"></span><br><span class="line">    var age : Int? = 21</span><br><span class="line">    init() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    required init?(map: Map) &#123;</span><br><span class="line">        print(&quot;BaseModel初始化&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func mapping(map: Map) &#123;</span><br><span class="line">        man &lt;- (map[&quot;man&quot;],transformBool)</span><br><span class="line"></span><br><span class="line">        age &lt;- (map[&quot;age&quot;],transformInt)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">//    转换规则</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    let transformInt = TransformOf&lt;Int, String&gt;(fromJSON: &#123; (value: String?) -&gt; Int? in</span><br><span class="line">        if let value = value &#123;</span><br><span class="line">            return Int(value)!</span><br><span class="line">        &#125;</span><br><span class="line">        return nil</span><br><span class="line">    &#125;, toJSON: &#123; (value: Int?) -&gt; String? in</span><br><span class="line">        // transform value from Int? to String?</span><br><span class="line">        if let value = value &#123;</span><br><span class="line">            return String(value)</span><br><span class="line">        &#125;</span><br><span class="line">        return nil</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    let transformBool = TransformOf&lt;Bool, String&gt;(fromJSON: &#123; (value: String?) -&gt; Bool? in</span><br><span class="line">        if let value = value &#123;</span><br><span class="line">            return (value as NSString).boolValue</span><br><span class="line">        &#125;</span><br><span class="line">        return false</span><br><span class="line">    &#125;, toJSON: &#123; (value: Bool?) -&gt; String? in</span><br><span class="line">        if let value = value &#123;</span><br><span class="line">            return String(value)</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;false&quot;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>就这样,就能转换了.</p>
<h1 id="end"><a href="#end" class="headerlink" title="end"></a>end</h1><p>其他好像也没什么好写的…不过我写得时候说实话,搜都搜不到什么示例…<br>不会的时候确实觉得很难用,会用了觉得还ok,不过用使用范围更广的框架一定是更好的(坑都被人踩完了emmm)</p>
<p>看看我能不能把ObjectMapper换成SwiftyJSON吧</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>element-plus如何跑起来</title>
    <url>/2021/05/19/element-plus%E5%A6%82%E4%BD%95%E8%B7%91%E8%B5%B7%E6%9D%A5/</url>
    <content><![CDATA[<h1 id="想给开源社区贡献点代码（遇到bug了）"><a href="#想给开源社区贡献点代码（遇到bug了）" class="headerlink" title="想给开源社区贡献点代码（遇到bug了）"></a>想给开源社区贡献点代码（遇到bug了）</h1><h1 id="文档启动"><a href="#文档启动" class="headerlink" title="文档启动"></a>文档启动</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone </span><br><span class="line">yarn</span><br><span class="line">yarn bootstrap</span><br><span class="line">yarn website-dev</span><br></pre></td></tr></table></figure>

<h1 id="代码改动"><a href="#代码改动" class="headerlink" title="代码改动"></a>代码改动</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone </span><br><span class="line">yarn</span><br><span class="line">yarn bootstrap</span><br></pre></td></tr></table></figure>
<p><code>/website/play</code>下新建一个index.vue<br>填写调试代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn website-dev:play</span><br></pre></td></tr></table></figure>


<p>完毕</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS  encode</title>
    <url>/2016/12/26/iOS%20%20encode/</url>
    <content><![CDATA[<p>相信大家总会碰到需要encode的时候，接着百度啊，然后发现stringByAddingPercentEscapesUsingEncoding这个方法，但是这个方法有时候无法对+等符号进行encode。那这时候咋办呢？</p>
<p><img src="/images/ios-encode/1.png" alt="img"></p>
<p><img src="/images/ios-encode/2.png" alt="img"></p>
<p>//encode</p>
<p>CF_EXPORT</p>
<p>CFStringRef CFURLCreateStringByAddingPercentEscapes(CFAllocatorRef allocator, CFStringRef originalString, CFStringRef charactersToLeaveUnescaped, CFStringRef legalURLCharactersToBeEscaped, CFStringEncoding encoding);</p>
<p>NSString <em>encodedValue = (NSString</em>)CFBridgingRelease(CFURLCreateStringByAddingPercentEscapes(nil,(CFStringRef)value, nil,(CFStringRef)@”!*’();:@&amp;=+$,/ %#[]”, kCFStringEncodingUTF8));</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS封装SDK</title>
    <url>/2016/12/16/iOS%20%20%E5%B0%81%E8%A3%85SDK/</url>
    <content><![CDATA[<p>背景</p>
<p>因为老大让封装sdk，看了几天的博客，水了几个群，最后大牛们告知如何选择。（如果写的有错，望大牛指正QAQ）</p>
<p>lz使用的是XCode8.1</p>
<h2 id="1-选择文件"><a href="#1-选择文件" class="headerlink" title="1.选择文件"></a>1.选择文件</h2><p><img src="/images/ios-sdk/1.png" alt="img"></p>
<p>一般选择这两个</p>
<h3 id="a"><a href="#a" class="headerlink" title="a."></a>a.</h3><p>Framework  动态库。如果包含什么资源文件可使用这种方法。一般开发不包含两个framework，因为可能会起冲突。不过可以做到多个应用使用一份内存。（以前动态库无法上架，好像去年才开放的）</p>
<h1 id="b"><a href="#b" class="headerlink" title="b."></a><strong>b.</strong></h1><p>Library 静态库。 .a文件。一般不会发生冲突。也较为常见。（水平较差的我选择了这个- -）不过资源文件得放入.bundle中。</p>
<p>无论你选择哪个，<strong>如果你在封装SDK时使用了某开放的第三方框架，需在说明文件声明，以免开发者重复导入引起冲突。</strong></p>
<h2 id="2-选择好之后"><a href="#2-选择好之后" class="headerlink" title="2.选择好之后"></a>2.选择好之后</h2><p><img src="/images/ios-sdk/2.png" alt="img"></p>
<p>把.m文件去掉，因为要封装出去用的就是.h文件啊。。。</p>
<p><img src="/images/ios-sdk/3.png" alt="img"></p>
<p>接着选择5处，支持最低版本（要支持到哪就选哪）。</p>
<p>当然，途中最左边的Project也是要选择最低版本的，方法同上。</p>
<p>接下来开始放入要使用的类或者其他文件。</p>
<h2 id="3-bundle文件"><a href="#3-bundle文件" class="headerlink" title="3.bundle文件"></a>3.bundle文件</h2><p>刚刚说了，如果静态库有资源文件要使用，必须放入.bundle文件。</p>
<p><img src="/images/ios-sdk/4.png" alt="img"></p>
<p>可以看到这里有两个bundle，一个是Apple Watch下的一个是Resource下的。这里我们选择resource下的bundle。名字一般与sdk名称相同。</p>
<p>准备工作准备完成之后如图：</p>
<p><img src="/images/ios-sdk/5.png" alt="img"></p>
<h1 id="4-写代码"><a href="#4-写代码" class="headerlink" title="4.写代码"></a>4.写代码</h1><p>我们可以看到一个.h文件一个.m文件。</p>
<p>此时，在里面写代码就行。仍然是.h写方法声明,.m写方法实现。</p>
<p>写完之后，在此处放入你要暴露的头文件</p>
<p><img src="/images/ios-sdk/6.png" alt="img"></p>
<p>你问我怎么放进去？</p>
<p><img src="/images/ios-sdk/7.png" alt="img"></p>
<h1 id="5-生成静态库"><a href="#5-生成静态库" class="headerlink" title="5.生成静态库"></a>5.生成静态库</h1><p><img src="/images/ios-sdk/8.png" alt="img"></p>
<p><img src="/images/ios-sdk/9.png" alt="img"></p>
<p>真机就用真机那个，模拟器就随便选一个，然后cmb+b运行</p>
<p><img src="/images/ios-sdk/10.png" alt="img"></p>
<p>可以看见红色的.a文件在编译之后变成了黑色，show in finder可以找到路径</p>
<p><img src="/images/ios-sdk/11.png" alt="img"></p>
<p>将.a和include下暴露的.h文件放在一个文件夹下</p>
<p><img src="/images/ios-sdk/12.png" alt="img"></p>
<p>欧克~~~带着这个文件夹去需要使用的工程里使用吧~~~</p>
<p>在这里感谢一下交流群的几位大佬：一位是凉白开，她的简书地址：<a href="http://www.jianshu.com/users/ff48a18f7b8d/latest_articles">http://www.jianshu.com/users/ff48a18f7b8d/latest_articles</a></p>
<p>还有走走大佬，他的CSDN：</p>
<p><a href="http://my.csdn.net/u011496891">http://my.csdn.net/u011496891</a></p>
<p>以及觉，我不知道他的地址- -</p>
<p>PS：生成的是真机版本或模拟器版本，怎么生成一个真机和模拟器都可以使用的版本我就不提了，百度一下一大堆教程。另外，建议第三方库不要封进库里，容易产生冲突，如果你非要封，记得改名字。至于怎么封进去，我百度了也尝试很多种方法，反正我是没有成功封进去过，，，如果你成功封进去，麻烦告诉一下我~~~</p>
<p>———我是分界线————</p>
<p>12.26更新</p>
<p>我知道第三方怎么封进去了，如果不暴露头文件，把#improt写进.m文件中，然后打包即可</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS  openssl库导入与RSA加密与签名</title>
    <url>/2016/12/17/iOS%20%20openssl%E5%BA%93%E5%AF%BC%E5%85%A5%E4%B8%8ERSA%E5%8A%A0%E5%AF%86%E4%B8%8E%E7%AD%BE%E5%90%8D/</url>
    <content><![CDATA[<p>背景：RSA加密，是一种非对称形式的加密方法。因为是支付公司，决定做自己的SDK，然后写示例代码，因此会将加密和加签都写进去方便集成者阅读。找了好天找的脑壳疼。。。不过好在最后找到了。分享出来，以免大家难以寻找。。。</p>
<p>至于怎么生成密钥大家就自己百度一下吧。。。方法到处都能找到，我这里就不多说了。主要讲一下openssl的引入。</p>
<p>rsa加密和签名的代码我就放在这里了。需要自取，也可以点个✨✨哟~。也是我找了好久问了好多人才找到的。（对了，还有一个签名方法在是支付宝的sdk，可以自行去支付宝开放平台下载，不过它的验签方法要输入的参数有支付宝后台的返回信息，所以没法单独拿来使用，签名完成也没法验签所以我就没用那个，有需要的也可以自己研究研究。）</p>
<p>RSA加密:<a href="https://github.com/XingXiaoWu/RSA-demo">https://github.com/XingXiaoWu/RSA-demo</a></p>
<p>RSA签名:<a href="https://github.com/XingXiaoWu/RSA-">https://github.com/XingXiaoWu/RSA-</a></p>
<h3 id="不会引入openssl的童鞋继续往下看吧"><a href="#不会引入openssl的童鞋继续往下看吧" class="headerlink" title="不会引入openssl的童鞋继续往下看吧"></a>不会引入openssl的童鞋继续往下看吧</h3><p>1.首先，自己生产一对秘钥。然后将openssl导入库。</p>
<p>ps：openssl这个库哪都有，自己生成也行，我后面给的rsa加密中也有，支付宝sdk里也有。</p>
<p><img src="/images/ios-openssl/1.png" alt="img"></p>
<p>这个时候运行是会报错的</p>
<p><img src="/images/ios-openssl/2.png" alt="img"></p>
<p>解决办法如下：</p>
<p>1.如图搜索</p>
<p><img src="/images/ios-openssl/3.png" alt="img"></p>
<p>这里给大家解释一下这个要添加的地方怎么写</p>
<p><img src="/images/ios-openssl/4.png" alt="img"></p>
<p>首先添加$(SRCROOT)</p>
<p>我们可以看见，包含rsa的openssl文件夹是4文件夹下的openssl</p>
<p><strong>所以路径构成是：$(SRCROOT)/项目名称1（TestDemo）/包含的文件夹2（WXRSASignopen）/包含的文件夹3（openssl）/包含的文件夹4（include）</strong></p>
<p>同理，填写你的项目的包含的路径。</p>
<h1 id="运行一下，成功就不必看下面的了，不成功就继续往下看。"><a href="#运行一下，成功就不必看下面的了，不成功就继续往下看。" class="headerlink" title="运行一下，成功就不必看下面的了，不成功就继续往下看。"></a>运行一下，成功就不必看下面的了，不成功就继续往下看。</h1><p><em><strong>如果你使用的是支付宝sdk中的openssl文件和Untils工具类的话，可能其中的rsa.h或其他文件还会报错，这个时候可以打开报错的文件向其中添加#import即可，如果你嫌一个个添加太麻烦，可以做如下操作创建一个pch文件。</strong></em></p>
<p>1.创建一个pch文件</p>
<p><img src="/images/ios-openssl/5.png" alt="img"></p>
<p>2.在创建的pch文件中写上#import&lt;Foundation/Foundation.h&gt;</p>
<p><img src="/images/ios-openssl/6.png" alt="img"></p>
<p>3.复制这个$(TARGET_NAME)</p>
<p><img src="/images/ios-openssl/7.png" alt="img"></p>
<p>4.接着</p>
<p><img src="/images/ios-openssl/8.png" alt="img"></p>
<p>运行一下，一般就成功了。这样就完成了openssl库的导入。</p>
<h2 id="libcrypto-a和libssl-a这两个-a文件别忘了导入！！！"><a href="#libcrypto-a和libssl-a这两个-a文件别忘了导入！！！" class="headerlink" title="libcrypto.a和libssl.a这两个.a文件别忘了导入！！！"></a><strong>libcrypto.a和libssl.a这两个.a文件别忘了导入！！！</strong></h2><h2 id="libcrypto-a和libssl-a这两个-a文件别忘了导入！！！-1"><a href="#libcrypto-a和libssl-a这两个-a文件别忘了导入！！！-1" class="headerlink" title="**libcrypto.a和libssl.a这两个.a文件别忘了导入！！！ **"></a>**libcrypto.a和libssl.a这两个.a文件别忘了导入！！！ **</h2><h1 id="libcrypto-a和libssl-a这两个-a文件别忘了导入！！！-2"><a href="#libcrypto-a和libssl-a这两个-a文件别忘了导入！！！-2" class="headerlink" title="**libcrypto.a和libssl.a这两个.a文件别忘了导入！！！ **"></a>**libcrypto.a和libssl.a这两个.a文件别忘了导入！！！ **</h1><p><strong>欧克，有问题的话在下方留言吧~~</strong></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS-存储</title>
    <url>/2019/03/20/iOS-%E5%AD%98%E5%82%A8/</url>
    <content><![CDATA[<p>多话8说,我就记录一个聊天记录,有空了一一证实一下</p>
<p>##问:NSKeyedArchiver存的是什么?二进制吗?<br>###答:嗯<br><br><br>##问:NSKeyedArchiver存在哪?沙盒还是内存<br>###答:沙盒<br><br><br>##问:NSFileManager和NSKeyedArchiver 是什么关系<br>###答:NSFileManager是操作文件的，和NSkeyedArchiver没太大关系<br><br><br>##问:所以使用NSFileManager操作文件并不一定会走归档解档对吗<br>###答:是的，就好比你是人，你需要吃饭，但是你和饭是不同的<br><br><br>##问:NSKeyedArchiver归档的文件路径可指定吗?<br>###答:可以的，方法都提供了路径<br><br><br>##问:NSUserDefaults这个呢,存在内存?<br>###答:NSUserDefaults也是沙盒<br><br><br>##问:那它和NSFileManager区别在哪<br>###答:NSFileManager就是操作文件的，和他么有任何关系.如果你说NSKeyedArchiver和它有什么差别,一个序列化了,一个没序列化</p>
<p>没了</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS内测分发</title>
    <url>/2019/06/27/iOS%E5%86%85%E6%B5%8B%E5%88%86%E5%8F%91/</url>
    <content><![CDATA[<h1 id="iOS内测分发"><a href="#iOS内测分发" class="headerlink" title="iOS内测分发"></a>iOS内测分发</h1><h5 id="2019-12-10更新"><a href="#2019-12-10更新" class="headerlink" title="2019-12-10更新"></a>2019-12-10更新</h5><p>gitee似乎不让下载了。可以考虑放到别的带https的地方，比如腾讯云的对象存储桶，github等等，反正有https就行，方法不变。</p>
<h5 id="2019-11-15更新"><a href="#2019-11-15更新" class="headerlink" title="2019-11-15更新"></a>2019-11-15更新</h5><p>不要再问android怎么搞了。。。直接apk往仓库一丢，网页给个链接，点一下不就完事了，比iOS省事多了</p>
<h3 id="背景"><a href="#背景" class="headerlink" title="背景:"></a>背景:</h3><p>我写博客一般都会写背景,因为我觉得光写某个技术点没有意义,技术最终都是为业务服务,因此我喜欢交代自己的使用场景,基于什么原因,我做过哪些常识,为什么最终这么做,这么做能解决我的什么问题….</p>
<p>我们是一个小业务部,而且是传统行业转型互联网,业务部内还处于”史前洪荒”的状况,各种现在流行的东西都没有使用,移动端更是如此,开发迭代出的app都是靠微信/内部邮件转发来转发去,iOS更难受,由于ipa包不能像Android一样,随下随装,”必须”依赖电脑用iTools或类似的工具去安装ipa包,很是繁琐.</p>
<p>说到这里肯定就有人提到:”为啥不用蒲公英(fir)等内测分发平台?”</p>
<p>说实话我第一反应也是盯上了这些,但是要实名信息注册啊QAQ,企业要传营业执照,个人要传身份证信息,作为一个较为保守且不想这么兴师动众的人,我选择了放弃使用这些平台.那么没办法了,只能自己写了.那么接下来,我会告诉你,他们是怎么把ipa包,转成一个二维码让你能够下载的(都是猜的).当然,有企业账号自己做企业分发,也可以用我这个方式</p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作:"></a>准备工作:</h3><p>1.公司能够提供https的服务器/github/码云/其他任何能够提供https连接的平台(部门太小,么有https证书,所以最后我个人在这里选择了码云,原因只有一个,它在国内,快)</p>
<p>2.一个57x57的小图标和一个512x512的大图标(随便找两张图片做成这个尺寸就行)</p>
<h3 id="一-在码云创建一个仓库"><a href="#一-在码云创建一个仓库" class="headerlink" title="一.在码云创建一个仓库"></a>一.在码云创建一个仓库</h3><p>就正常创建即可,创建完如下图</p>
<p><img src="/images/ios-%E5%86%85%E6%B5%8B%E5%88%86%E5%8F%91/1.png" alt="image"></p>
<p>然后把项目拉下来,git操作大家肯定都会.</p>
<p>拉下来以后,新建一个名为  index.html  的html文件,我们开始写网页(没错,就是写web,放心,不是很难得web)</p>
<p>代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;DOCTYPE html&gt;</span><br><span class="line">    &lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;测试下载&lt;/title&gt;</span><br><span class="line">        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot; /&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;a id=&quot;clickMe&quot;</span><br><span class="line">            href=&quot;itms-services:///?action=download-manifest&amp;url=plist文件的路径&quot;&gt;点我下载iOS版本&lt;/a&gt;</span><br><span class="line">        </span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/html&gt;</span><br><span class="line">&lt;/DOCTYPE&gt;</span><br></pre></td></tr></table></figure>

<p>重点就是这个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a id=&quot;clickMe&quot;</span><br><span class="line">            href=&quot;itms-services:///?action=download-manifest&amp;url=plist文件的路径&quot;&gt;点我下载iOS版本&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<p>url=  后面拼接的这个路径最后将填写为你放plist文件的路径,暂时可以先空着不填</p>
<p>创建完毕以后,提交文件到码云</p>
<h3 id="二-开启page服务"><a href="#二-开启page服务" class="headerlink" title="二.开启page服务"></a>二.开启page服务</h3><p>应该有很多朋友看过什么&lt;&lt;利用github/gitee一分钟搭建自己的博客&gt;&gt;之类的文章,当然,没有看过也没关系,你可以简单的理解为,他给你一个地址,点开就是你写的index.html所呈现的静态网页.</p>
<p>这里我们要用到码云提供的page服务如下图(github也有,具体位置我就不截图了,可以百度搜一下)</p>
<p><img src="/images/ios-%E5%86%85%E6%B5%8B%E5%88%86%E5%8F%91/2.png" alt="image"></p>
<p><img src="/images/ios-%E5%86%85%E6%B5%8B%E5%88%86%E5%8F%91/3.png" alt="image"></p>
<p>这样,我们开启了服务,能看到有个地址,我们点击一下,就跳转到你写的页面了</p>
<p><img src="/images/ios-%E5%86%85%E6%B5%8B%E5%88%86%E5%8F%91/4.png" alt="image"></p>
<h3 id="三-iOS打包"><a href="#三-iOS打包" class="headerlink" title="三.iOS打包"></a>三.iOS打包</h3><p>接下来我们就要打包了.</p>
<p>有企业账户,自己做过企业分发的同学,应该会对我接下来的操作比较熟悉</p>
<p>依旧,我们和往常一样,选择打包.这里我们选打得是adhoc包</p>
<p><img src="/images/ios-%E5%86%85%E6%B5%8B%E5%88%86%E5%8F%91/5.png" alt="image"></p>
<p><img src="/images/ios-%E5%86%85%E6%B5%8B%E5%88%86%E5%8F%91/6.png" alt="image"><br>这里就要注意了,把这个选项勾上,实际上我们能做分发,就是通过这个选项,这个选项能允许你提供一个安全(https)的包下载路径,允许内测用户(设备在公司或个人账号下注册过 / 企业账户不限制用户)进行直接下载</p>
<p><img src="/images/ios-%E5%86%85%E6%B5%8B%E5%88%86%E5%8F%91/7.png" alt="image"></p>
<p>这三个路径写你想放的路径(如果你不懂我这句话的意思,那你跟着我操作好了),我们回到之前创建的码云仓库</p>
<p>在仓库中,新建一个ios文件夹,再ios文件夹下新建一个app文件夹,用来存放ipa包</p>
<p>在ios文件夹下再新建一个icons文件夹,把准备好的两张图片丢进去,57和512的,像这样</p>
<p><img src="/images/ios-%E5%86%85%E6%B5%8B%E5%88%86%E5%8F%91/8.png" alt="image"></p>
<p>接着,拷贝你刚刚在码云生成的链接,并在后面拼接路径,例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//我在码云生成的链接为https://wuxinggg.gitee.io/wuxinggg.gitee.io</span><br><span class="line">我要填写的三个路径分别为:xxx.ipa为打包出来的ipa文件名</span><br><span class="line">https://wuxinggg.gitee.io/wuxinggg.gitee.io/ios/app/xxxx.ipa</span><br><span class="line">https://wuxinggg.gitee.io/wuxinggg.gitee.io/ios/icons/appicon1.png</span><br><span class="line">https://wuxinggg.gitee.io/wuxinggg.gitee.io/ios/icons/appicon2.png</span><br></pre></td></tr></table></figure>
<p>然后正常打包,最后你打包出来的文件里会包含一个<br>ipa包和一个名为manifest.plist的文件<br>将这两个文件,放入刚刚的app文件夹下</p>
<h3 id="四-修改index-html中的值"><a href="#四-修改index-html中的值" class="headerlink" title="四.修改index.html中的值"></a>四.修改index.html中的值</h3><p>修改为你放置manifest的路径,例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a id=&quot;clickMe&quot;</span><br><span class="line">            href=&quot;itms-services:///?action=download-manifest&amp;url=https://wuxinggg.gitee.io/wuxinggg.gitee.io/ios/app/manifest.plist&quot;&gt;点我下载iOS版本&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<h3 id="五-提交码云仓库-并刷新page服务"><a href="#五-提交码云仓库-并刷新page服务" class="headerlink" title="五.提交码云仓库,并刷新page服务"></a>五.提交码云仓库,并刷新page服务</h3><h3 id="六-用ios设备上的浏览器访问提供的链接-点击下载-就能成功安装ipa包了"><a href="#六-用ios设备上的浏览器访问提供的链接-点击下载-就能成功安装ipa包了" class="headerlink" title="六.用ios设备上的浏览器访问提供的链接,点击下载,就能成功安装ipa包了"></a>六.用ios设备上的浏览器访问提供的链接,点击下载,就能成功安装ipa包了</h3><h3 id="题外话-猜猜蒲公英他们的二维码怎么生成的"><a href="#题外话-猜猜蒲公英他们的二维码怎么生成的" class="headerlink" title="题外话 猜猜蒲公英他们的二维码怎么生成的"></a>题外话 猜猜蒲公英他们的二维码怎么生成的</h3><p>很简单,把</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">itms-services:///?action=download-manifest&amp;url=https://wuxinggg.gitee.io/wuxinggg.gitee.io/ios/app/manifest.plist</span><br></pre></td></tr></table></figure>
<p>这个地址转成二维码即可</p>
<p>不信?</p>
<p>百度搜一个二维码转码工具把你的地址转一下,然后扫码试试~</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS的xcode的version，build以及App Store的version</title>
    <url>/2017/10/09/iOS%E7%9A%84xcode%E7%9A%84version%EF%BC%8Cbuild%E4%BB%A5%E5%8F%8AApp%20Store%E7%9A%84version/</url>
    <content><![CDATA[<p>前人挖坑后人填。。。。<br>阐述一下背景：<br>&emsp;App更新迭代，需要跟后台做一个版本控制更新的开关。正常来说应该是将xcode的version与App Store的version对应，并通过该值判断开关是否打开。<br>&emsp;但是问题来了。。上一位iOS工程师一直是使用的build进行版本控制，本地xocde的version比App Store的version高出不少。<br> &emsp;先说一说Version。分为xcode的version和App Store的version。理论上应该两者一致。方便维护。</p>
<p>###xcode的version<br>可以通过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//  获得version号</span><br><span class="line">  NSString *versionCode =[[NSBundle mainBundle] objectForInfoDictionaryKey:@&quot;CFBundleShortVersionString&quot;];</span><br></pre></td></tr></table></figure>
<p>获取，获取的是info.plist文件中的<br><img src="/images/ios-version/1.png" alt="335E8913-16AA-4B95-B4CB-63B50AEF28F6.png"></p>
<p>###App Store的version<br>则是通过调取接口:<br><a href="https://itunes.apple.com/lookup?id=%E4%BD%A0%E7%9A%84app%E7%9A%84id%E5%8F%B7%EF%BC%9B">https://itunes.apple.com/lookup?id=你的app的id号；</a><br>调用方式：post<br>返回结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NSArray *array = responseObject[@&quot;results&quot;];</span><br><span class="line">NSDictionary *dict = [array lastObject];</span><br><span class="line">NSLog(@&quot;当前版本为：%@&quot;, dict[@&quot;version&quot;]);</span><br></pre></td></tr></table></figure>
<p>代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];</span><br><span class="line">    [manager POST:@&quot;https://itunes.apple.com/lookup?id=414478124&quot; parameters:nil success:^(AFHTTPRequestOperation * _Nonnull operation, id  _Nonnull responseObject) &#123;</span><br><span class="line">        NSArray *array = responseObject[@&quot;results&quot;];</span><br><span class="line">        NSDictionary *dict = [array lastObject];</span><br><span class="line">        NSLog(@&quot;当前版本为：%@&quot;, dict[@&quot;version&quot;]);</span><br><span class="line">    &#125; failure:^(AFHTTPRequestOperation * _Nullable operation, NSError * _Nonnull error) &#123;</span><br><span class="line">        NSLog @&quot;请求失败&quot;;</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>正常来说都是对外暴露的版本，xcode与App Store的版本理应一致。方便维护。</p>
<p>###build：<br>开发内部测试版本号，写多少都行，内部开发测试用的，写多少都行，最好是不要对外暴露。因为每次打包都需要往上+，所以用于版本控制效果不好。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//获得build号:</span><br><span class="line">  NSString *versionName =[[[NSBundle mainBundle] infoDictionary] objectForKey:@&quot;CFBundleVersion&quot;];</span><br></pre></td></tr></table></figure>



<p>由于不可逆的缘故，version是没办法往下降了。我只能将错就错，尽量更新大版本，去追xcode的version，希望多几次更新能将版本回归正常。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS重新开始</title>
    <url>/2021/07/21/iOS%E9%87%8D%E6%96%B0%E5%BC%80%E5%A7%8B/</url>
    <content><![CDATA[<h1 id="重新添加rootview"><a href="#重新添加rootview" class="headerlink" title="重新添加rootview"></a>重新添加<code>rootview</code></h1><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SceneDelegate.swift</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">scene</span>(<span class="keyword">_</span> <span class="params">scene</span>: <span class="type">UIScene</span>, <span class="params">willConnectTo</span> <span class="params">session</span>: <span class="type">UISceneSession</span>, <span class="params">options</span> <span class="params">connectionOptions</span>: <span class="type">UIScene</span>.<span class="type">ConnectionOptions</span>) &#123;</span><br><span class="line">        <span class="comment">// Use this method to optionally configure and attach the UIWindow `window` to the provided UIWindowScene `scene`.</span></span><br><span class="line">        <span class="comment">// If using a storyboard, the `window` property will automatically be initialized and attached to the scene.</span></span><br><span class="line">        <span class="comment">// This delegate does not imply the connecting scene or session are new (see `application:configurationForConnectingSceneSession` instead).</span></span><br><span class="line">        <span class="keyword">let</span> tmpScene <span class="operator">=</span> (scene <span class="keyword">as?</span> <span class="type">UIWindowScene</span>)</span><br><span class="line">        <span class="keyword">if</span> ((tmpScene) <span class="operator">!=</span> <span class="literal">nil</span>) &#123;</span><br><span class="line">            window <span class="operator">=</span> <span class="type">UIWindow</span>.<span class="keyword">init</span>(windowScene: tmpScene<span class="operator">!</span>)</span><br><span class="line">            <span class="keyword">let</span> viewCotroller <span class="operator">=</span> <span class="type">HomeViewController</span>()</span><br><span class="line">            <span class="keyword">let</span> navigationViewController <span class="operator">=</span> <span class="type">UINavigationController</span>.<span class="keyword">init</span>(rootViewController: viewCotroller)</span><br><span class="line">            navigationViewController.navigationBar.barTintColor <span class="operator">=</span> <span class="type">WXTools</span>.<span class="type">ColorHex</span>(<span class="string">&quot;#213241&quot;</span>)</span><br><span class="line">            window<span class="operator">?</span>.rootViewController <span class="operator">=</span> navigationViewController</span><br><span class="line">            window<span class="operator">?</span>.makeKeyAndVisible()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="布局从nav以下开始"><a href="#布局从nav以下开始" class="headerlink" title="布局从nav以下开始"></a>布局从nav以下开始</h1><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">self</span>.navigationController<span class="operator">?</span>.navigationBar.isTranslucent <span class="operator">=</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h1 id="去掉nav下面的横线"><a href="#去掉nav下面的横线" class="headerlink" title="去掉nav下面的横线"></a>去掉nav下面的横线</h1><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//        去除下划线</span></span><br><span class="line">        <span class="keyword">self</span>.navigationController<span class="operator">?</span>.navigationBar.setBackgroundImage(<span class="type">UIImage</span>(), for: .default)</span><br><span class="line">        <span class="keyword">self</span>.navigationController<span class="operator">?</span>.navigationBar.shadowImage <span class="operator">=</span> <span class="type">UIImage</span>()</span><br></pre></td></tr></table></figure>

<h1 id="nav"><a href="#nav" class="headerlink" title="nav"></a>nav</h1><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 状态栏高度</span></span><br><span class="line"><span class="keyword">let</span> statusBarHeight <span class="operator">=</span> <span class="type">UIApplication</span>.shared.statusBarFrame.height</span><br><span class="line"><span class="comment">// nav高度</span></span><br><span class="line"><span class="keyword">let</span> navigationBarHeight <span class="operator">=</span> (navigationController<span class="operator">?</span>.navigationBar.frame.height)<span class="operator">!</span></span><br></pre></td></tr></table></figure>

<h1 id="移除SceneDelegate"><a href="#移除SceneDelegate" class="headerlink" title="移除SceneDelegate"></a>移除SceneDelegate</h1><h2 id="1-修改Info-plist"><a href="#1-修改Info-plist" class="headerlink" title="1.修改Info.plist"></a>1.修改Info.plist</h2><p>移除如下信息</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>UIApplicationSceneManifest<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>UIApplicationSupportsMultipleScenes<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">false</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>UISceneConfigurations<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">key</span>&gt;</span>UIWindowSceneSessionRoleApplication<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">key</span>&gt;</span>UISceneConfigurationName<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">string</span>&gt;</span>Default Configuration<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">key</span>&gt;</span>UISceneDelegateClassName<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">string</span>&gt;</span>$(PRODUCT_MODULE_NAME).SceneDelegate<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">key</span>&gt;</span>UISceneStoryboardFile<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">string</span>&gt;</span>Main<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-删除SceneDelegate-swift文件"><a href="#2-删除SceneDelegate-swift文件" class="headerlink" title="2.删除SceneDelegate.swift文件"></a>2.删除SceneDelegate.swift文件</h2><h2 id="3-修改AppDelegate-swift文件"><a href="#3-修改AppDelegate-swift文件" class="headerlink" title="3.修改AppDelegate.swift文件"></a>3.修改AppDelegate.swift文件</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="keyword">@UIApplicationMain</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AppDelegate</span>: <span class="title class_">UIResponder</span>, <span class="title class_">UIApplicationDelegate</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> window: <span class="type">UIWindow</span>?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">application</span>(<span class="keyword">_</span> <span class="params">application</span>: <span class="type">UIApplication</span>, <span class="params">didFinishLaunchingWithOptions</span> <span class="params">launchOptions</span>: [<span class="type">UIApplication</span>.<span class="params">LaunchOptionsKey</span>: <span class="keyword">Any</span>]<span class="operator">?</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="comment">// Override point for customization after application launch.</span></span><br><span class="line">        <span class="keyword">self</span>.window <span class="operator">=</span> <span class="type">UIWindow</span>(frame: <span class="type">UIScreen</span>.main.bounds)</span><br><span class="line">        <span class="keyword">self</span>.window<span class="operator">?</span>.backgroundColor <span class="operator">=</span> <span class="type">UIColor</span>.white</span><br><span class="line">        <span class="keyword">self</span>.window<span class="operator">?</span>.rootViewController <span class="operator">=</span> <span class="type">ViewController</span>()</span><br><span class="line">        <span class="keyword">self</span>.window<span class="operator">?</span>.makeKeyAndVisible()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="snap"><a href="#snap" class="headerlink" title="snap"></a>snap</h1>]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>iPhone的指纹识别与面部识别（FaceID）</title>
    <url>/2018/01/20/iPhone%E7%9A%84%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB%E4%B8%8E%E9%9D%A2%E9%83%A8%E8%AF%86%E5%88%AB%EF%BC%88FaceID%EF%BC%89/</url>
    <content><![CDATA[<p>其实iPhone的指纹识别有很多教程，但其实有两套策略，而且好多都只写了一套，而且有的你会发现，错误码压根就试不出来啊，还以为苹果给的错误码都是瞎扯淡的。</p>
<p>首先，需要导入苹果的安全策略库LocalAuthentication。<br><img src="/images/ios-faceid/1.png" alt="导入库"><br>这个库提供了指纹识别这一安全策略库公开发者们使用。<br>对于开发者来说，只需要调用几个很简单的方法便可以进行指纹识别了。至于是如何识别，这些苹果并没有公开，开发者只能获取成功或失败状态以及message。<br>###一.判断设备是否支持指纹识别</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LAContext *context = [[LAContext alloc] init];</span><br><span class="line">  NSError *error = nil;</span><br><span class="line">  </span><br><span class="line">  // 判断设置是否支持指纹识别(iPhone5s+、iOS8+支持)</span><br><span class="line">  BOOL support = [context canEvaluatePolicy:LAPolicyDeviceOwnerAuthenticationWithBiometrics error:&amp;error];</span><br></pre></td></tr></table></figure>

<p>###但是注意了，这里的support如果为NO并不代表设备就不支持指纹识别了。<br>因为当出现：<br>1.设备支持TouchID但TouchId被锁时：LAErrorTouchIDLockout<br>2.设备支持TouchID但没有设置密码：LAErrorPasscodeNotSet（但实际上会走LAErrorTouchIDNotEnrolled）<br>3.设备支持TouchID，设置了密码，但没有设置TouchID：LAErrorTouchIDNotEnrolled<br>这几种情况统统都会报Support为NO</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (support) &#123;</span><br><span class="line">    return AllRight;</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">    switch (error.code) &#123;</span><br><span class="line">//        没有设置指纹（没有设置密码也会走到这），但是支持指纹识别</span><br><span class="line">      case LAErrorTouchIDNotEnrolled:&#123;</span><br><span class="line">        return TouchOK;</span><br><span class="line">      &#125;</span><br><span class="line">        break;</span><br><span class="line">//        理论上是没有设置密码,至今没有尝试出什么情况下走这个,希望有试出来场景的兄弟告知一下我</span><br><span class="line">      case LAErrorPasscodeNotSet:&#123;</span><br><span class="line">        return TouchOK;</span><br><span class="line">      &#125;</span><br><span class="line">        break;</span><br><span class="line">//       在使用touchID的场景中,错误太多次（根据策略不同为5次到6次）而导致touchID被锁不可用</span><br><span class="line">      case LAErrorTouchIDLockout:&#123;</span><br><span class="line">        NSLog(@&quot;密码封锁&quot;);</span><br><span class="line">        return TouchOK;</span><br><span class="line">      &#125;</span><br><span class="line">//        设备不支持指纹识别</span><br><span class="line">      default:&#123;</span><br><span class="line">        return AllError;</span><br><span class="line">      &#125;</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>###二.指纹识别如何唤起（其实是安全策略的唤起）<br>其实整个LocalAuthentication库是一个安全策略库，我们所说的指纹只是安全策略的一种，主要为生物技术的使用。这种策略有非常多的种类，现在常用的指纹，iPhone X的face ID，没准以后还会有虹膜等更多的安全策略出现。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[authenticationContext evaluatePolicy:LAPolicyDeviceOwnerAuthenticationWithBiometrics localizedReason:@&quot;通过Home键验证已有手机指纹&quot; reply:^(BOOL success, NSError * _Nullable error) &#123;</span><br><span class="line">            // 指纹识别错误调用分为以下情况,</span><br><span class="line">            // 点击取消按钮 : domain = com.apple.LocalAuthentication code = -2</span><br><span class="line">            // 点击输入密码按钮 : domain = com.apple.LocalAuthentication code = -3</span><br><span class="line">            // 输入密码重新进入指纹系统 : domain = com.apple.LocalAuthentication code = -8</span><br><span class="line">            // 指纹三次错误 : domain = com.apple.LocalAuthentication code = -1</span><br><span class="line">            // 指纹验证成功 : error = nil</span><br><span class="line">            if (error) &#123;</span><br><span class="line">                switch (error.code) &#123;</span><br><span class="line">//                        指纹识别3次失败进入这里</span><br><span class="line">                    case LAErrorAuthenticationFailed:</span><br><span class="line">                        NSLog(@&quot;验证失败&quot;);</span><br><span class="line">                        break;</span><br><span class="line">//                        指纹识别时，点击取消</span><br><span class="line">                    case LAErrorUserCancel:</span><br><span class="line">                        NSLog(@&quot;点击取消按钮&quot;);</span><br><span class="line">                        break;</span><br><span class="line">//                        指纹识别时，点击输入密码按钮</span><br><span class="line">                    case LAErrorUserFallback:</span><br><span class="line">                        NSLog(@&quot;点击输入密码按钮&quot;);</span><br><span class="line">                        break;</span><br><span class="line">//                        没有在设备上设置密码（我没试出来这一项，有试出来的兄弟评论告诉我一下）</span><br><span class="line">                    case LAErrorPasscodeNotSet:</span><br><span class="line">                        NSLog(@&quot;没有在设备上设置密码&quot;);</span><br><span class="line">                        break;</span><br><span class="line">//                        设备上TouchID不可用，例如未打开（我没试出来这一项，有试出来的兄弟评论告诉我一下）</span><br><span class="line">                    case LAErrorTouchIDNotAvailable:</span><br><span class="line">                        NSLog(@&quot;设备不支持TouchID&quot;);</span><br><span class="line">                        break;</span><br><span class="line">//                        没有设置TouchID</span><br><span class="line">                    case LAErrorTouchIDNotEnrolled:</span><br><span class="line">                        NSLog(@&quot;设备没有注册TouchID&quot;);</span><br><span class="line">                        break;</span><br><span class="line">//                        设备TouchID被锁，且只会在iOS9以上设备出现</span><br><span class="line">                    case LAErrorTouchIDLockout:</span><br><span class="line">                        NSLog(@&quot;TouchID被锁&quot;);</span><br><span class="line">                        break;</span><br><span class="line">//                        由于不可抗拒力，应用进入后台（其实很简单，你写两个测试demo，在一个启动指纹时开启另一个项目，你的指纹项目就会因为不可抗力进入后台，这时候就会走到这）</span><br><span class="line">                    case LAErrorSystemCancel:</span><br><span class="line">                        NSLog(@&quot;由于系统阻止，转入后台&quot;);</span><br><span class="line">                        break;</span><br><span class="line">                    default:</span><br><span class="line">//                        直接写失败吧，也没别的原因了，进入这里都很难了</span><br><span class="line">                        break;</span><br><span class="line">                &#125;</span><br><span class="line">                return ;</span><br><span class="line">            &#125;</span><br><span class="line">            else&#123;</span><br><span class="line">                NSLog(@&quot;识别成功&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>一般用上面写的这段代码就行了<br>接下来咱们说说策略</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/// @param policy 策略</span><br><span class="line">/// @param localizedReason 提示语</span><br><span class="line">/// @param reply Reply block 回调的代码块</span><br><span class="line">[myContext evaluatePolicy:&lt;#(LAPolicy)#&gt; localizedReason:&lt;#(nonnull NSString *)#&gt; reply:^(BOOL success, NSError * _Nullable error) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;];</span><br></pre></td></tr></table></figure>
<p>咱们来谈谈policy，这玩意有两个枚举值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">typedef NS_ENUM(NSInteger, LAPolicy)</span><br><span class="line">&#123;</span><br><span class="line">    LAPolicyDeviceOwnerAuthenticationWithBiometrics NS_ENUM_AVAILABLE(10_12_2, 8_0) __WATCHOS_AVAILABLE(3.0) __TVOS_AVAILABLE(10.0) = kLAPolicyDeviceOwnerAuthenticationWithBiometrics,</span><br><span class="line"></span><br><span class="line">    LAPolicyDeviceOwnerAuthentication NS_ENUM_AVAILABLE(10_11, 9_0) = kLAPolicyDeviceOwnerAuthentication</span><br><span class="line"></span><br><span class="line">&#125; NS_ENUM_AVAILABLE(10_10, 8_0) __WATCHOS_AVAILABLE(3.0) __TVOS_AVAILABLE(10.0);</span><br></pre></td></tr></table></figure>
<p>这两个枚举值有啥区别呢？<br>###LAPolicyDeviceOwnerAuthenticationWithBiometrics<br>首先，必须要确定生物技术（TouchID或者FaceID）是可用的（就是指一切正常）。不然会报错。错误码为LAErrorBiometryNotAvailable（生物技术硬件不支持）,LAErrorBiometryNotEnrolled（没有设置生物技术） 或 LAErrorBiometryLockout（被锁了）。<br>当生物技术可用时，注册并没有被锁定，但是没有设置密码，那么该评估就会失败，报错是LAErrorPasscodeNotSet。不过说真的，这个错误码我真的没试出来。。。我猜测出现场景应该是设置了指纹但是没有设置密码，但我手上只有一个7P，iOS10的版本，只要设置指纹就必须要设置密码，所以我没尝试出这个错误码的出现场景。<br>Touch ID认证对话框包含一个取消按钮，默认的标题是“取消”，可以使用localizedCancelTitle属性自定义。还有一个失败后的按钮，默认标题“输入密码”，可以使用localizedFallbackTitle进行自定义，这里说的密码指的是iPhone设置的锁屏密码，跟业务密码无关。点取消的错误码是LAErrorUserCancel，点输入密码的错误码是LAErrorUserFallback。</p>
<p>以上说的都是本策略的指纹情况，下面说的是FaceID情况：<br>Face ID身份验证从一个动画弹窗开始。如果第一次尝试成功，弹窗将消失，没有其他UI显示。如果第一次尝试失败了，那么LocalAuthentication将显示一个带有两个按钮的对话框:“取消”和“再次尝试Face ID”。在第二次失败后，按钮被“取消”和“输入密码”。语义和结果就像Touch ID一样。</p>
<p>生物认证将在5次尝试失败后被锁定。在那之后,用户必须输入密码才能解锁。密码可以在锁屏后解锁时输入。但是谁会在用app时锁个屏幕然后解锁，所以碰到这种情况还是挺操蛋的。</p>
<p>而且在指纹识别3次错误后，直接抛出错误码。</p>
<p>###LAPolicyDeviceOwnerAuthentication<br>至于这个，其实和上面那个差不多，区别在于这个策略，生物认证将在6次尝试失败后被锁定。<br>同时，这种策略说实话一般不会出现失败，只会出现取消和正确以及被锁。因为这种策略在指纹识别3次错误后会直接弹出锁屏的密码而不会抛出指纹认证结果失败或是其他错误码。</p>
<p>所以用啥大家自己看着来吧。业务度定制比较高的我觉得用LAPolicyDeviceOwnerAuthenticationWithBiometrics这种比较好，比较结果回调的比较多。<br>基本就是这样，其他也没啥说的，苹果爸爸把什么都封装好了，咱们随便写写就能用这么屌的功能。╮(╯▽╰)╭</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>mock入门教程-图文版</title>
    <url>/2018/08/25/mock%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B-%E5%9B%BE%E6%96%87%E7%89%88/</url>
    <content><![CDATA[<p>背景：相信经常有这种情况，后端定义好了接口文档，但是还没开发，这时候前端或者客户端就无法进行联调，只能通过自己伪造数据进行开发。</p>
<p>###伪造数据这个过程，就叫做mock<br>但是总是因为各种各样的情况，不能总拿死数据来开发，需要一些随机数据，这样才能更好的覆盖整个用例的可能性<br>mock的方法其实很多：<br>本地写死返回值，抓包工具断点篡改返回值，本地结果替换等等。<br>这次介绍的是使用mock这个开源项目进行随机返回值的替换<br>###<a href="http://mockjs.com/">Mock.js</a>虽然名字是js，不过可不限于前端哟<br>###部署的方式很多，比如部署专门的服务器，或者本地部署等等<br>但是我比较菜，也比较懒，我就直接用别人部署好的服务器进行使用，其他的部署方式就需要各位老哥自行学习了。</p>
<p>先介绍一个网站<br>###<a href="https://www.easy-mock.com/">Easy Mock</a></p>
<p>登录进去以后，创建你的第一个项目<br><img src="/images/mock/1.png" alt="mock首页"><br><img src="/images/mock/2.png" alt="初始化的填写"><br>创建完毕以后就会有一个项目出现在你的首页了，点击该项目</p>
<p>例如我这里创建了一个wx项目，点进去就可以看到<br><img src="/images/mock/3.png" alt="配置"></p>
<p>正常在开发过程中，肯定是有正式环境、开发环境这种区分的，除了域名不一样，后面的接口拼接都是一样的，在这里也是一样的。只需要将你某个环境下的域名或者ip替换成图中的baseURL即可，至于怎么替换，在接下来会讲到。</p>
<p>###我们举个例子来理解一下。<br>我们的域名为：<a href="http://www.baidu.com/">http://www.baidu.com</a><br>有一个获取版本号的接口为：<a href="http://www.baidu.com/common/version/ios">http://www.baidu.com/common/version/ios</a><br>还有一个获取helloworld的接口为：<a href="http://www.baidu.com/helloworld">http://www.baidu.com/helloworld</a><br>可以看到，所有的请求的baseurl都是<a href="http://www.baidu.com,接口只是在后面拼接.我们先到easymock上建立获取版本号的接口./">http://www.baidu.com，接口只是在后面拼接。我们先到easymock上建立获取版本号的接口。</a></p>
<p>####点击创建接口<br><img src="/images/mock/4.png" alt="如图"><br>具体的返回值的语法规则这里就不说了，直接在官网能查到，没有写的必要<br><a href="https://github.com/nuysoft/Mock/wiki/Syntax-Specification">语法规范</a><br>这样我们就得到了一个mock接口<br>###接下来就是替换域名的操作了<br>我们需要用到的工具是Charles<br>因为Charles可以对子集全部代理，所以这里我们选择charles，当然，如果你可以配置node服务进行跨域也是ok的，方式有多种，目的都是一个，替换baseURL<br><img src="/images/mock/5.png" alt="Charles配置"></p>
<p><img src="/images/mock/6.png" alt="image.png"><br><img src="/images/mock/7.png" alt="通配符"><br>注意需要使用通配符，至于啥叫通配符就百度一下吧~~<br>ok，至此，Charles配置完毕，让我们看看效果。<br><img src="/images/mock/8.png" alt="网络请求"><br>如图，我写了一个网络请求，地址是<a href="http://www.baidu.com/common/version/ios">http://www.baidu.com/common/version/ios</a><br>在抓包中得到了什么呢<br><img src="/images/mock/9.png" alt="地址被替换成了mock地址"></p>
<p>###结束语<br>其实很简单，不过各位该锤后台的还是要锤，毕竟前台后台，相爱相杀，hhhh</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>WkWebview入门教程</title>
    <url>/2017/12/02/wkwebview%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>背景：公司的老项目，使用的是uiwebview，我也没用过，第一次做混合开发，所以想直接使用wkwebview去替换当前的uiwebview，毕竟性能上提升了4倍，还有很多乱七八糟的优化等，废话不多说。</p>
<p>###1.首先wkwebview有三个代理方法WKUIDelegate,WKScriptMessageHandler,WKNavigationDelegate</p>
<p>###2.wkwebview创建的时候可以写配置<br>有一个属性的集合，叫WKWebViewConfiguration<br>其中还有一些首选项的配置WKPreferences<br>例如我是这么创建的:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//    wkwebview属性的集合</span><br><span class="line">    WKWebViewConfiguration *configuration = [[WKWebViewConfiguration alloc]init];</span><br><span class="line">    //    webview一些首选项的配置</span><br><span class="line">    WKPreferences *preferences = [[WKPreferences alloc]init];</span><br><span class="line">    //    在没有用户交互的情况下，是否允许js打开窗口，macOS默认是yes，iOS默认是no</span><br><span class="line">    preferences.javaScriptCanOpenWindowsAutomatically = YES;</span><br><span class="line">    //    webview的最小字体大小</span><br><span class="line">//    preferences.minimumFontSize = 40.0;</span><br><span class="line">    </span><br><span class="line">    configuration.preferences = preferences;</span><br><span class="line">    </span><br><span class="line">    self.webView = [[WKWebView alloc] initWithFrame:self.view.frame configuration:configuration];</span><br><span class="line">    self.webView.UIDelegate = self;</span><br><span class="line">    self.webView.navigationDelegate = self;</span><br><span class="line">    [self.view addSubview:self.webView];</span><br></pre></td></tr></table></figure>
<p>###3.加载网页，本地加载和加载服务器网页<br>######1.加载本地网页<br>将html与css和js拖进项目，使用蓝色物理文件夹放入。<br>加载本地网页，使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[self.webView loadFileURL:htmlPathUrl allowingReadAccessToURL:folderPathUrl];</span><br></pre></td></tr></table></figure>
<p>其中htmlPathUrl代表html的路径<br>其中folderPathUrl代表存放js与css的路径<br>只有这样才能加载完整的网页，否则你可能加载不出css样式和js方法。<br>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#pragma mark 加载url展示页面</span><br><span class="line">//加载本地网页</span><br><span class="line">-(void)loadUrl&#123;</span><br><span class="line">    NSString *folderPath = [[NSBundle mainBundle] pathForResource:@&quot;sdk&quot; ofType:@&quot;&quot;];</span><br><span class="line">    NSURL *folderPathUrl = [NSURL fileURLWithPath:folderPath];</span><br><span class="line">    </span><br><span class="line">    NSString *htmlPath = [folderPath stringByAppendingString:@&quot;/h5/index.html&quot;];</span><br><span class="line">    NSURL *htmlPathUrl = [NSURL fileURLWithPath:htmlPath];</span><br><span class="line">    [self.webView loadFileURL:htmlPathUrl allowingReadAccessToURL:folderPathUrl];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当然，如果网页有ajax请求，注意跨域问题。试试jsonp。这里就提一下，略过。</p>
<p>######2.加载服务器网页<br>这就没什么好说的了。。直接加载就行。<br>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-(void)loadUrl&#123;</span><br><span class="line">    NSString *urlString = @&quot;https://www.baidu.com&quot;;</span><br><span class="line">    urlString = [urlString stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];</span><br><span class="line">    NSURL *url = [NSURL URLWithString:urlString];</span><br><span class="line">    </span><br><span class="line">    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];</span><br><span class="line">    </span><br><span class="line">    [SdkTools requestSetHeader:request];</span><br><span class="line">    [self.webView loadRequest:request];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>###4.与js交互的方法怎么写<br>这里就要说到代理方法了，还记得第一点写的WKScriptMessageHandler这个代理么。就是用来交互的。<br>和uiwebview不一样，wk不能使用JavaScriptCore这个框架。<br>#####1.首先你需要使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[self.webView.configuration.userContentController addScriptMessageHandler:self name:@&quot;方法名&quot;];</span><br></pre></td></tr></table></figure>
<p>用完记得写remove<br> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[self.webView.configuration.userContentController removeScriptMessageHandlerForName:@&quot;方法名&quot;];</span><br></pre></td></tr></table></figure><br>这里建议大家将add写在viewWillAppear中<br>将remove写在viewWillDisappear中，原因是防止循环引用。可能会有兄弟有疑问循环在哪，循环在self.webView.configuration.userContentController中的userContentController，详细大家可以查一下。</p>
<p>#####2.js那边怎么调用呢？如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.webkit.messageHandlers.方法名.postMessage(参数);</span><br></pre></td></tr></table></figure>
<p>#####3.oc如何接收？如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-(void)userContentController:(WKUserContentController *)userContentController didReceiveScriptMessage:(WKScriptMessage *)message&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用这个代理方法接收js的调用，具体是调了哪个方法可以通过message.name分别，因为message.name就是方法名。而message.body则是参数，是一个json字符串，经过解析就可以使用了。<br>#####4.oc方法执行完毕如何将结果回调传给js？如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NSString *jss = [NSString stringWithFormat:@&quot;%@(&#x27;%@&#x27;)&quot;,js接收的方法名,oc传递给js的结果（是一个不含换行符不含空格的json字符串）];</span><br><span class="line">[self.webView evaluateJavaScript:jss completionHandler:^(id _Nullable result, NSError * _Nullable error) &#123;</span><br><span class="line">    //正常时，result和error都为null</span><br><span class="line">    NSLog(@&quot;result = %@,error = %@&quot;,result,error);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>
<p>#####5.ok，那么下面放出一个例子，如何进行交互：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//oc.m</span><br><span class="line">-(void)viewWillAppear:(BOOL)animated&#123;</span><br><span class="line">    [super viewWillAppear:animated];</span><br><span class="line">//    退出</span><br><span class="line">    [self.webView.configuration.userContentController addScriptMessageHandler:self name:@&quot;exitSdk&quot; ];</span><br><span class="line">&#125;</span><br><span class="line">-(void)viewWillDisappear:(BOOL)animated&#123;</span><br><span class="line">    [super viewWillDisappear:animated];</span><br><span class="line">    [self.webView.configuration.userContentController removeScriptMessageHandlerForName:@&quot;exitSdk&quot;];</span><br><span class="line"></span><br><span class="line">#pragma mark - 与js交互入口</span><br><span class="line">-(void)userContentController:(WKUserContentController *)userContentController didReceiveScriptMessage:(WKScriptMessage *)message&#123;</span><br><span class="line">    NSLog(@&quot;wx.body ------  %@&quot;,message.body);</span><br><span class="line">    NSLog(@&quot;wx.name ------  %@&quot;,message.name);</span><br><span class="line">    if ([message.name isEqualToString:@&quot;exitSdk&quot;]) &#123;</span><br><span class="line">        [self exitSdk];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 函数回调给js</span><br><span class="line">-(void) exitSdk&#123;</span><br><span class="line">    NSDictionary *dicParam = @&#123;@&quot;key&quot;:@&quot;value&quot;&#125;;</span><br><span class="line">    NSString *jsParam = [SdkTools dictionaryToJsonString:dicParam];</span><br><span class="line">    NSString *jss = [NSString stringWithFormat:@&quot;%@(&#x27;%@&#x27;)&quot;,js方法名,jsParam];</span><br><span class="line">    [self.webView evaluateJavaScript:jss completionHandler:^(id _Nullable result, NSError * _Nullable error) &#123;</span><br><span class="line">        NSLog(@&quot;result = %@,error = %@&quot;,result,error);</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>###5.alert怎么弹<br>可能有些原生开发的老哥不知道js咋打断点或者因为一些原因不方便打断点，一般都会用alert去弹窗,获取自己希望知道的结果，uiwebview还好，一使用wkwebview之后发现，卧槽，alert不弹窗了。<br>其实是有代理方法没写。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#pragma mark 弹窗展示</span><br><span class="line">//只有一个确定按钮实现这个代理方法</span><br><span class="line">-(void)webView:(WKWebView *)webView runJavaScriptAlertPanelWithMessage:(NSString *)message initiatedByFrame:(WKFrameInfo *)frame completionHandler:(void (^)(void))completionHandler&#123;</span><br><span class="line">    </span><br><span class="line">    UIAlertController *alertCtrl = [UIAlertController alertControllerWithTitle:@&quot;提示&quot; message:message preferredStyle:UIAlertControllerStyleAlert];</span><br><span class="line">    </span><br><span class="line">    [alertCtrl addAction:[UIAlertAction actionWithTitle:@&quot;确定&quot; style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) &#123;</span><br><span class="line">        completionHandler();</span><br><span class="line">    &#125;]];</span><br><span class="line">    </span><br><span class="line">    [self presentViewController:alertCtrl animated:YES completion:nil];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当然，有多个按钮的就有劳各位老哥自己查一下，我这里就不放了。<br>###6.页面加载情况<br>都知道有很多代理方法，大家搜一搜也都有,其中大部分是对的，不过加载失败有很多都是写的错误的，至少在我搜索的结果中发现有相当一部分是错误的。这里放两个，一个是加载开始，还有一个是加载失败。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#pragma mark - 页面开始加载时调用</span><br><span class="line">- (void)webView:(WKWebView *)webView didStartProvisionalNavigation:(WKNavigation *)navigation &#123;</span><br><span class="line">    NSLog(@&quot;页面开始加载时调用&quot;);</span><br><span class="line">&#125;</span><br><span class="line">#pragma mark 页面加载失败</span><br><span class="line">- (void)webView:(WKWebView *)webView didFailProvisionalNavigation:(null_unspecified WKNavigation *)navigation withError:(nonnull NSError *)error&#123;</span><br><span class="line">    NSLog(@&quot;页面加载失败&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>###7.加载不受信任的服务器证书</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#pragma mark - 加载不受信任的服务器</span><br><span class="line">- (void)webView:(WKWebView *)webView didReceiveAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge completionHandler:(void (^)(NSURLSessionAuthChallengeDisposition disposition, NSURLCredential * _Nullable credential))completionHandler&#123;</span><br><span class="line">    </span><br><span class="line">    if ([challenge.protectionSpace.authenticationMethod isEqualToString:NSURLAuthenticationMethodServerTrust]) &#123;</span><br><span class="line">        </span><br><span class="line">        NSURLCredential *card = [[NSURLCredential alloc]initWithTrust:challenge.protectionSpace.serverTrust];</span><br><span class="line">        </span><br><span class="line">        completionHandler(NSURLSessionAuthChallengeUseCredential,card);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>###8.隐藏界面发现顶部少了20PX的uiview<br>WKWebView加载web页面，隐藏导航栏，全屏显示，发现顶部出现20px的空白。<br>解决方法：<br>iOS 7以上，iOS 11以下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">self.edgesForExtendedLayout = UIRectEdgeNone;</span><br></pre></td></tr></table></figure>
<p>iOS 11对安全区域做了一些修改，以下方法是iOS 11新增方法。<br>iOS 11：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">self.webView.scrollView.contentInsetAdjustmentBehavior = UIScrollViewContentInsetAdjustmentNever;</span><br></pre></td></tr></table></figure>
<p>###写在最后<br>其他应该也没什么了，大家结合自己情况使用就好。毕竟听说性能提升了至少4倍呢。还有一些iOS8有的bug，比如iOS8本地加载只能复制到tmp才能加载之类的东西，各位老哥就自己查一查，看一看，应该就能找到详细的解决方法。<br>各位老哥开发愉快~</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>mac使用brew安装Java8</title>
    <url>/2020/07/15/mac%E4%BD%BF%E7%94%A8brew%E5%AE%89%E8%A3%85Java8/</url>
    <content><![CDATA[<p>homebrew不多说，java8也不多说。<br>brew安装不上java8的例子太多了。<br>最后的做法无非这么几个，安装openjdk版本，或者安装其他的版本，或者直接去官网装。</p>
<p>我今天就要硬装！就要用brew硬装官网版本的java8！</p>
<h1 id="一-安装报错"><a href="#一-安装报错" class="headerlink" title="一.安装报错"></a>一.安装报错</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew cask install homebrew/cask-versions/java8</span><br></pre></td></tr></table></figure>
<p>执行这个，然后肯定报错<br><img src="/images/brew%E8%A3%85java/1.png" alt="1.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error: Cask &#x27;java8&#x27; is unavailable: &#x27;/usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask-versions/Casks/java8.rb&#x27; does not exist.</span><br></pre></td></tr></table></figure>
<p>也就是这个玩意</p>
<h1 id="二-添加java8-rb"><a href="#二-添加java8-rb" class="headerlink" title="二.添加java8.rb"></a>二.添加java8.rb</h1><p>注意到上面报错的地址了没，说的是你文件夹下没有java8.rb这个文件</p>
<p>让我们打开<a href="https://github.com/Homebrew/homebrew-cask-versions/issues/7253#issuecomment-484590833">github之这个老姐删掉了java8.rb</a></p>
<p><a href="https://github.com/Homebrew/homebrew-cask-versions/pull/7261/commits/ec644edfefe89d83a35632ab033da30b70952bbf">java8.rb内容</a>点一哈load diff</p>
<p>复制里面的内容，到第一步报错的地址上创建java8.rb并添加</p>
<p>怕你们打不开github，我这里复制一下吧</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cask &#x27;java8&#x27; do	</span><br><span class="line">  version &#x27;8u202,b08:1961070e4c9b4e26a04e7f5a083f551e&#x27;	</span><br><span class="line">  sha256 &#x27;b41367948cf99ca0b8d1571f116b7e3e322dd1ebdfd4d390e959164d75b97c20&#x27;	</span><br><span class="line"></span><br><span class="line">  url &quot;https://download.oracle.com/otn-pub/java/jdk/#&#123;version.before_comma&#125;-#&#123;version.after_comma.before_colon&#125;/#&#123;version.after_colon&#125;/jdk-#&#123;version.before_comma&#125;-macosx-x64.dmg&quot;,	</span><br><span class="line">      cookies: &#123;	</span><br><span class="line">                 &#x27;oraclelicense&#x27; =&gt; &#x27;accept-securebackup-cookie&#x27;,	</span><br><span class="line">               &#125;	</span><br><span class="line">  name &#x27;Oracle Java 8 Standard Edition Development Kit&#x27;	</span><br><span class="line">  homepage &#x27;https://www.oracle.com/technetwork/java/javase/overview/index.html&#x27;	</span><br><span class="line"></span><br><span class="line">  depends_on macos: &#x27;&gt;= :yosemite&#x27;	</span><br><span class="line"></span><br><span class="line">  pkg &#x27;JDK 8 Update 202.pkg&#x27;	</span><br><span class="line"></span><br><span class="line">  uninstall pkgutil: &quot;com.oracle.jdk#&#123;version.before_comma&#125;&quot;,	</span><br><span class="line">            delete:  [	</span><br><span class="line">                       &#x27;/Library/Internet\ Plug-Ins/JavaAppletPlugin.plugin&#x27;,	</span><br><span class="line">                       &#x27;/Library/PreferencePanes/JavaControlPanel.prefPane&#x27;,	</span><br><span class="line">                     ]	</span><br><span class="line"></span><br><span class="line">  zap trash: [	</span><br><span class="line">               &#x27;~/Library/Application Support/Oracle/Java&#x27;,	</span><br><span class="line">               &#x27;~/Library/Application Support/com.oracle.java.JavaAppletPlugin.plist&#x27;,	</span><br><span class="line">               &#x27;~/Library/Application Support/com.oracle.javadeployment.plist&#x27;,	</span><br><span class="line">             ]	</span><br><span class="line"></span><br><span class="line">  caveats do	</span><br><span class="line">    license &#x27;https://www.oracle.com/technetwork/java/javase/terms/license/javase-license.html&#x27;	</span><br><span class="line">  end	</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<p>好了，到这一步，可以确定</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask-versions/Casks/java8.rb</span><br></pre></td></tr></table></figure>
<p>这个文件是有了。</p>
<h1 id="三-去oracle下载java8"><a href="#三-去oracle下载java8" class="headerlink" title="三.去oracle下载java8"></a>三.去<a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html">oracle</a>下载java8</h1><p>下载什么版本的不用说了吧，自己注册个账号下就完事了。</p>
<p>（手动下了安装包不直接安装还要用brew装就nm离谱）<br>（我就喜欢用brew，敲命令行这种花里胡哨的，删起来方便！）</p>
<h1 id="四-修改java8-rb"><a href="#四-修改java8-rb" class="headerlink" title="四.修改java8.rb"></a>四.修改java8.rb</h1><p>参考<a href="https://github.com/Homebrew/homebrew-cask-versions/issues/7253#issuecomment-484356654">怎么手动提供下载地址</a></p>
<p>这里我们把参数换一换，issue里的参数太老了。</p>
<p>我会一一告诉你这几个值哪来的</p>
<h2 id="1-version"><a href="#1-version" class="headerlink" title="1.version"></a>1.version</h2><p>version有三个值</p>
<h3 id="第一个是版本复制粘贴就完事了"><a href="#第一个是版本复制粘贴就完事了" class="headerlink" title="第一个是版本复制粘贴就完事了"></a>第一个是版本复制粘贴就完事了</h3><p><img src="/images/brew%E8%A3%85java/2.png" alt="2.png"></p>
<h3 id="第二个值和第三个值，bxx-xxx"><a href="#第二个值和第三个值，bxx-xxx" class="headerlink" title="第二个值和第三个值，bxx:xxx"></a>第二个值和第三个值，bxx:xxx</h3><p>还是刚刚的下载地址，F12/右键审查元素，点击蓝色圈起来的小箭头，然后再点击左边红色框起来的区域。右边的html标签就会弹出对应地址。这个地址被我用红色下划线标出来的地方，就是</p>
<p>bxx:xxx<br><img src="/images/brew%E8%A3%85java/3.png" alt="3.png"></p>
<h2 id="2-sha256"><a href="#2-sha256" class="headerlink" title="2. sha256"></a>2. sha256</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 后面写你刚刚下载的dmg的路径</span><br><span class="line">openssl dgst -sha256 /xxx/jdk-xxx-macosx-x64.dmg</span><br></pre></td></tr></table></figure>

<h3 id="3-url"><a href="#3-url" class="headerlink" title="3.url"></a>3.url</h3><p>issue中的老哥是起了一个服务器。</p>
<p>往下翻翻你会发现删掉java8.rb的老姐说可以直接用<a href="https://github.com/Homebrew/homebrew-cask-versions/issues/7253#issuecomment-484444232">本地路径</a>不需要起服务器</p>
<p>是的，把url改成你下载的本地路径，前面加个file://即可</p>
<p>例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">url &quot;file:///Users/xingwu/Documents/tmp/jdk-#&#123;version.before_comma&#125;-macosx-x64.dmg&quot;,	</span><br></pre></td></tr></table></figure>
<h3 id="4-pkg"><a href="#4-pkg" class="headerlink" title="4.pkg"></a>4.pkg</h3><p>双击你下载的dmg，你会发现里面写个pkg的名字</p>
<p>是的没错，改成这个名字即可<br><img src="/images/brew%E8%A3%85java/4.png" alt="4.png"></p>
<h1 id="五-好的，准备工作就绪，你可以开始用brew安装你的java8了"><a href="#五-好的，准备工作就绪，你可以开始用brew安装你的java8了" class="headerlink" title="五.好的，准备工作就绪，你可以开始用brew安装你的java8了"></a>五.好的，准备工作就绪，你可以开始用brew安装你的java8了</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew cask install homebrew/cask-versions/java8</span><br></pre></td></tr></table></figure>

<h1 id="六-测试安装成功没"><a href="#六-测试安装成功没" class="headerlink" title="六.测试安装成功没"></a>六.测试安装成功没</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>
<p><img src="/images/brew%E8%A3%85java/5.png" alt="5.png"></p>
<p>很明显，我OJBK了</p>
<p>我不喝咖啡，请我喝瓶红牛吧哈哈哈</p>
<h1 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h1><p><a href="https://github.com/Homebrew/homebrew-cask-versions/issues/7253">github：为毛下不了java8</a></p>
]]></content>
      <categories>
        <category>jdk</category>
      </categories>
      <tags>
        <tag>jdk</tag>
      </tags>
  </entry>
  <entry>
    <title>xcode8真机调试最简单的方法（有网）</title>
    <url>/2016/12/26/xode8%20%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%88%E6%9C%89%E7%BD%91%EF%BC%89/</url>
    <content><![CDATA[<p>其实真机调试没那么难。。。又是证书又是什么的，最简单的方法，有网的情况下</p>
<p><img src="/images/%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95/1.png" alt="img"></p>
<p>OK了，就可以进行真机调试了</p>
<p>PS：如果运行时出现问题，建议将bitcode选择no运行试试</p>
<p><img src="/images/%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95/2.png" alt="img"></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>个推-iOS特定人群推送</title>
    <url>/2018/08/12/%E4%B8%AA%E6%8E%A8-iOS%E7%89%B9%E5%AE%9A%E4%BA%BA%E7%BE%A4%E6%8E%A8%E9%80%81/</url>
    <content><![CDATA[<p>推送嘛，集成或更新的时候肯定要各种测试，但又不可能给所有线上用户集体推送。<br>这时候这个测试需求就暴露出来了。<br>其实非常简单</p>
<p>###不过测试前，需要确定你的客户端能和个推平台放置的p12对应的上。<br>####如何看能否对应的上？<br>#####获取token<br><img src="/images/%E4%B8%AA%E6%8E%A8-iOS%E7%89%B9%E5%AE%9A%E4%BA%BA%E7%BE%A4%E6%8E%A8%E9%80%81/token%E7%BB%91%E5%AE%9A.png" alt="token绑定"><br>打开xcode，搜索这个方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken</span><br></pre></td></tr></table></figure>
<p>搜到了是不是，接下来运行起来，得到这个token，复制一下。<br>#####打开个推官网<br><img src="/images/%E4%B8%AA%E6%8E%A8-iOS%E7%89%B9%E5%AE%9A%E4%BA%BA%E7%BE%A4%E6%8E%A8%E9%80%81/%E4%B8%AA%E6%8E%A8%E5%AE%98%E7%BD%91.png" alt="个推官网"><br>#####打开应用配置，拉到最下面<br><img src="/images/%E4%B8%AA%E6%8E%A8-iOS%E7%89%B9%E5%AE%9A%E4%BA%BA%E7%BE%A4%E6%8E%A8%E9%80%81/%E6%B5%8B%E8%AF%95%E4%B8%80%E4%B8%8B.png" alt="测试一下"><br>#####点击测试一下<br>然后把你刚刚获得的token复制上去，监测一下看是否成功。如果成功会弹出提示，并且对应的设备会收到一条测试推送消息（走的是苹果的apns通道）</p>
<p>###如果是不成功，那么我猜大概率是证书环境没匹配上，你放的是生产环境但你客户端是开发环境，这时候怎么办？也有办法，看下面这篇。</p>
<p>好了好了，上面的准备工作已经做好，进入正题<br><img src="/images/%E4%B8%AA%E6%8E%A8-iOS%E7%89%B9%E5%AE%9A%E4%BA%BA%E7%BE%A4%E6%8E%A8%E9%80%81/%E8%BF%94%E5%9B%9E%E6%B3%A8%E5%86%8C%E7%9A%84cid.png" alt="返回注册的cid"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- (void)GeTuiSdkDidRegisterClient:(NSString *)clientId</span><br></pre></td></tr></table></figure>
<p>这里拿到cid<br>然后，新建一个txt文件（mac端的同学，还是拜托windows的同学新建给你吧，别问我为什么。。。因为字符集不一样啊我日）</p>
<p>然后把cid放到txt文件里<br><img src="/images/%E4%B8%AA%E6%8E%A8-iOS%E7%89%B9%E5%AE%9A%E4%BA%BA%E7%BE%A4%E6%8E%A8%E9%80%81/%E5%83%8F%E8%BF%99%E6%A0%B7.png" alt="像这样"></p>
<p>打开个推官网，创建推送<br><img src="/images/%E4%B8%AA%E6%8E%A8-iOS%E7%89%B9%E5%AE%9A%E4%BA%BA%E7%BE%A4%E6%8E%A8%E9%80%81/%E6%8A%8A%E4%BD%A0%E7%9A%84txt%E6%96%87%E4%BB%B6%E6%94%BE%E4%B8%8A%E5%8E%BB.png" alt="把你的txt文件放上去"></p>
<p>推送就完事了。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>个推-什么是普通推送？什么是透传消息？</title>
    <url>/2017/12/02/%E4%B8%AA%E6%8E%A8-%E4%BB%80%E4%B9%88%E6%98%AF%E6%99%AE%E9%80%9A%E6%8E%A8%E9%80%81%EF%BC%9F%E4%BB%80%E4%B9%88%E6%98%AF%E9%80%8F%E4%BC%A0%E6%B6%88%E6%81%AF%EF%BC%9F/</url>
    <content><![CDATA[<p>其实集成个推的途中一直很坎坷，不知道到底他们的推送是个什么东西，透传，普通推送，什么情况才是正常的。这里写一下，没有代码，只是阐述正确情况下推送通道应该产生的效果。</p>
<p>ios的消息是分两部分的  一部分是走apn的通知栏消息  另一部分是走个推通道的透传消息  这两部分是服务端推送代码里面集成个推的后端同事会设定好的  分别是两个不同的方法  如果消息下发的时候 你客户端是在后台的（也就是客户端是离线）那么会收到apn的通知  透传消息就进离线了  只有你下次在线的时候 （也就是下次应用到前台的时候）才会下发下来  如果下发的时候应用是在前台的  那这样的话客户端就直接收到透传消息了</p>
<p>应用退到后台，或者杀进程，cid离线才会推送苹果apn，客户端才会收到apn通知栏提醒的，cid在线直接走个推通道，客户端收到个推透传消息，如果需要展示通知栏需要自己客户端定义处理解析个推透传消息</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>个推-开发环境推送测试</title>
    <url>/2018/08/12/%E4%B8%AA%E6%8E%A8-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%8E%A8%E9%80%81%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p>没有用过其他推送，不过应该都是大同小异的，可以参考参考。<br>应该有不少老哥接了推送，都存在这么一种情况。推送平台只能放一个P12，肯定要放生产的，那我开发怎么测？难道真的要打包上架去TestFlight再测？那这个风险和耗时有点太大了。</p>
<p>###Xcode手动管理证书要是不会配置记得用自动证书管理<br>###其实我们只要转变一下思路就好了。创建一个测试应用即可。（读懂了这句话的老哥就不用继续往下看了）<br>不过如果你要是想给特定用户推送不知道怎么做的话，推荐看：<br><a href="https://www.jianshu.com/p/2fa7d0c28640">个推-iOS特定人群推送</a><br>####准备好推送证书的p12文件<br>推送证书的申请乱七八糟我就不说了，网上图文教程一大堆。<br>接下来，推送证书分两份，这个应该也不用多说了，如果这个都不知道的开发者那就有点不太称职了。。。<br><img src="/images/%E4%B8%AA%E6%8E%A8-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%8E%A8%E9%80%81%E6%B5%8B%E8%AF%95/%E4%B8%AA%E6%8E%A8%E5%AE%98%E7%BD%91.png" alt="钥匙串截图"><br>导出P12文件并设置密码（怎么导出也不多说了）<br>这时候我们得到了两份推送证书的P12文件，一份开发环境一份生产环境。<br>####打开个推官网<br><img src="/images/%E4%B8%AA%E6%8E%A8-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%8E%A8%E9%80%81%E6%B5%8B%E8%AF%95/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83p12.png" alt="个推官网"><br><img src="/images/%E4%B8%AA%E6%8E%A8-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%8E%A8%E9%80%81%E6%B5%8B%E8%AF%95/%E9%92%A5%E5%8C%99%E4%B8%B2%E6%88%AA%E5%9B%BE.png" alt="放开发环境的p12"><br>剩下的和正式环境的推送一模一样了。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>如何限制别人传递的字典类型参数的key</title>
    <url>/2016/12/12/%E5%A6%82%E4%BD%95%E9%99%90%E5%88%B6%E5%88%AB%E4%BA%BA%E4%BC%A0%E9%80%92%E7%9A%84%E5%AD%97%E5%85%B8%E7%B1%BB%E5%9E%8B%E5%8F%82%E6%95%B0%E7%9A%84key/</url>
    <content><![CDATA[<p>在封装SDK时，只能限制开发者传参的类型，而不能限制传递参数的内容。</p>
<p>例如-(void)tranwithDic:(NSDictionary *)traderInfo;</p>
<p>此时，要求别人传字典类型参数，别人传的key:value是什么无法做出限制。</p>
<p>如果你需要拿着别人传递的参数去请求服务器来返回结果，那就必须对key做出限定，那应该怎么办呢？</p>
<p>答案很简单：-(void)tranwithDic:(NSObject *)traderInfo;</p>
<p>传递一个对象，把需要的key做成对象属性，然后在方法内部将对象转换成字典即可。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>将json格式的String转换成map</title>
    <url>/2017/01/19/%E5%B0%86json%E6%A0%BC%E5%BC%8F%E7%9A%84String%E8%BD%AC%E6%8D%A2%E6%88%90map/</url>
    <content><![CDATA[<p><img src="/images/%E5%B0%86json%E6%A0%BC%E5%BC%8F%E7%9A%84String%E8%BD%AC%E6%8D%A2%E6%88%90map/1.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HashMapreMap =newHashMap();</span><br><span class="line"></span><br><span class="line">try&#123;</span><br><span class="line"></span><br><span class="line">JSONObject jsonobject=newJSONObject(response);</span><br><span class="line"></span><br><span class="line">Iterator i=jsonobject.keys();</span><br><span class="line"></span><br><span class="line">while(i.hasNext())&#123;</span><br><span class="line"></span><br><span class="line">String key = (String) i.next();</span><br><span class="line"></span><br><span class="line">String values=jsonobject.getString(key);</span><br><span class="line"></span><br><span class="line">reMap.put(key,values);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;catch(JSONException e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>我是怎么做git分支管理的</title>
    <url>/2021/06/22/%E6%88%91%E6%98%AF%E6%80%8E%E4%B9%88%E5%81%9Agit%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%9A%84/</url>
    <content><![CDATA[<p>git分支管理模型挺多的，各种概念配图花里胡哨，对于初学者来说，看起来会比较累，可能理解不了。</p>
<p>我这里描述一下我个人是如何做分支管理的，有更好的方式或者建议欢迎评论区交流。</p>
<h1 id="常驻分支"><a href="#常驻分支" class="headerlink" title="常驻分支"></a>常驻分支</h1><h2 id="保持三个常驻分支对应三个环境"><a href="#保持三个常驻分支对应三个环境" class="headerlink" title="保持三个常驻分支对应三个环境"></a>保持三个常驻分支对应三个环境</h2><ul>
<li>master —— 生产</li>
<li>develop —— 开发</li>
<li>beta  —— 测试</li>
</ul>
<p>一般情况下，各个公司都会有着不同的几个环境用于各项研发工作</p>
<p>名称大同小异，我这里截取几个比较常见的环境名称，分别对应生产，测试，开发</p>
<p>各位有几个环境，一般可以对应几个常驻分支</p>
<h1 id="保护分支"><a href="#保护分支" class="headerlink" title="保护分支"></a>保护分支</h1><p>master</p>
<p>master为保护分支，禁止直接通过本地提交，需要经由有授权的开发人员通过公司使用的git平台合并</p>
<p>git平台挺多的，各位的公司肯定有相关的平台选择，<code>github</code> <code>gitee</code> <code>gitlab</code> <code>gitea</code>等等</p>
<p>建议，beta，develop分支也由平台发起合并操作，不要在本地进行合并提交操作。</p>
<p>这样合并的过程，一定是有授权人员知晓的</p>
<p>如果有<code>codeReview</code>过程，这个合并期间就能做了</p>
<h1 id="分支约定"><a href="#分支约定" class="headerlink" title="分支约定"></a>分支约定</h1><h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><hr>
<h3 id="功能性迭代需求"><a href="#功能性迭代需求" class="headerlink" title="功能性迭代需求"></a>功能性迭代需求</h3><p>采用<code>feature/</code>开头。后面跟上对应的本项目版本号，不带v</p>
<p>场景用例：</p>
<p>比如某平台，我们称呼为<code>AAA平台</code>，当前已发布的线上版本为<code>v6.0.0</code></p>
<ol>
<li><p><code>产品A</code>由于某产品需求，需要对<code>AAA平台</code>进行改动，则新迭代分支由<code>master</code>拉出为<code>feature/6.0.1</code></p>
</li>
<li><p>同期<code>产品B</code>由于由于某产品需求，需要对<code>AAA平台</code>进行改动，由<code>产品A</code>和<code>B</code>协商</p>
<p> 是合并在一个迭代内开发，还是分开开发</p>
<p> 合并在一起，则使用<code>feature/6.0.1</code>开发</p>
<p> 否则，由<code>master</code>重新拉出分支<code>feature/6.0.2</code>进行开发</p>
<p> 两个分支均由<code>master</code>拉出，互不干扰</p>
</li>
</ol>
<hr>
<h3 id="bugfix类型需求"><a href="#bugfix类型需求" class="headerlink" title="bugfix类型需求"></a>bugfix类型需求</h3><p>采用<code>bugfix/</code>开头。后面跟上当前正在迭代的版本号，如果没有正在迭代版本，则新增</p>
<p>场景用例：</p>
<p>比如<code>AAA平台</code>，由代码扫描平台扫描发现漏洞，需要紧急修复（理论上这种问题出现的频次相对较低）</p>
<ol>
<li><p>当前<code>AAA平台</code>的迭代分支为<code>feature/6.0.1</code></p>
<p> 则从<code>master</code>拉取<code>bugfix/6.0.1</code></p>
<p> 修复完成后通过合并到<code>develop</code>,<code>beta</code>验后，合并到<code>master</code>发布上线</p>
</li>
<li><p>合并到<code>master</code>以后，将<code>master</code>合并到所有的迭代分支上，即<br> 且<code>feature/6.0.1</code>上线版本修正为<code>v6.0.2</code></p>
</li>
</ol>
<hr>
<h1 id="分支合并流程"><a href="#分支合并流程" class="headerlink" title="分支合并流程"></a>分支合并流程</h1><p>均由单独的<code>feature</code>分支和<code>bugfix</code>分支往<code>master</code>，<code>develop</code>，<code>beta</code>分支合并</p>
<p>当<code>master</code>有新的合并后，需要将<code>master</code>的代码合并到当前正在开发的迭代分支中</p>
<blockquote>
<p><code>develop</code>不会往<code>beta</code>和<code>master</code>合并！<code>beta</code>同理！</p>
</blockquote>
<blockquote>
<p><code>develop</code>不会往<code>beta</code>和<code>master</code>合并！<code>beta</code>同理！</p>
</blockquote>
<blockquote>
<p><code>develop</code>不会往<code>beta</code>和<code>master</code>合并！<code>beta</code>同理！</p>
</blockquote>
<p>可以视情况而定，是否需要重建<code>develop</code>和<code>beta</code>分支</p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>这里需要说明一下</p>
<p>为什么要把<code>feature</code>下的分支单独往<code>master</code>分支合并发布</p>
<p>而不是<code>feature</code>-&gt;<code>develop</code>-&gt;<code>beta</code>-&gt;<code>master</code>这样依次合并</p>
<p>假设存在多个迭代同时进行，但不是同时发版。</p>
<p>这里我用三个字母代表多个迭代<code>a</code>,<code>b</code>,<code>c</code></p>
<p>他们的发版时间，分别某月1日，同月2日，同月3日。</p>
<p>假设在上个月30日，abc均完成迭代，发布到了<code>beta</code>环境。</p>
<p>那么在1日发版时，<code>beta</code>分支上存在<code>b</code>和<code>c</code>的代码，无法剥离开来单独发版。</p>
<p>因此我们绝不能采用<code>feature/</code>合并到<code>develop</code>,<code>develop</code>合并到<code>beta</code>,<code>beta</code>合并到<code>master</code>这种方式来发版</p>
<h1 id="发布流程"><a href="#发布流程" class="headerlink" title="发布流程"></a>发布流程</h1><p>引入自动化平台，可用平台挺多的，<code>jenkins</code> <code>spug</code>等等</p>
<ol>
<li>由自动化平台拉取<code>master</code>分支进行发布</li>
<li>上线验证完毕以后</li>
<li>git平台发布<code>release</code>，生成<code>tag</code>填写版本好，带v</li>
<li>一定要填写本次发版内容！！！</li>
<li>删除对应迭代分支</li>
</ol>
<h1 id="对于某些由主干产品单独定制的业务产品"><a href="#对于某些由主干产品单独定制的业务产品" class="headerlink" title="对于某些由主干产品单独定制的业务产品"></a>对于某些由主干产品单独定制的业务产品</h1><p>可能存在某些业务，又一个主干产品</p>
<p>同时有些客户要求定制化</p>
<p>这些定制化以后的需求，实际上就偏离了主干产品了</p>
<p>针对这种类型的产品，通过<code>fork</code>的方式拉出单独仓库，按照上述方式进行分支管理</p>
<p>因为通过<code>fork</code>方式，定制项目与主干项目存在关联性</p>
<p>可以通过合并的方式，将主干的某些内容合并到定制项目上</p>
<p>对于这类项目的发布，均由自动化平台的单独业务job发布</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>断点调试SDK</title>
    <url>/2017/10/11/%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95sdk/</url>
    <content><![CDATA[<p>其实就是用workspace把两个项目连起来<br>凉白开记录了，懒得写了。。<br>地址：<a href="http://www.jianshu.com/p/6c9b380cfe5c?utm_source=desktop&amp;utm_medium=timeline">http://www.jianshu.com/p/6c9b380cfe5c?utm_source=desktop&amp;utm_medium=timeline</a><br>如果修改了文件位置或者啥的，报头文件找不到，去示例代码工程把</p>
<p><img src="/images/%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95sdk/%E5%B7%A5%E7%A8%8B1.jpeg" alt="49F27CAE-95C4-4F32-80EC-543ADFD05B49.png"><br>把sdk的link删掉再加上，重新运行就好了</p>
<p>//—————以下是凉白开总结的——————//</p>
<p>  自从上次写完SDK并接入别人的项目中之后就一直没怎么管过这东西了，昨天一人突然问我<strong>调试SDK</strong>怎么弄，我说不能。(结果今天啪啪啪自己打脸了)   恩他解决了一个<strong>SDK不能调试的一个超级大问题</strong>，征得同意后我来记录一下，自己记录一下其次文后并附上他的简书地址。</p>
<blockquote>
<p><strong>1.新建workspace。</strong></p>
</blockquote>
<p><img src="https://upload-images.jianshu.io/upload_images/2820888-c4788afc08929230.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1090/format/webp" alt="img"></p>
<p>新建workspace</p>
<blockquote>
<p>*<em>2.新建文件夹，将*<em>workspace，demo以及SDK**放入文件夹中。**</em>*</em>*</p>
</blockquote>
<p><img src="/images/%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95sdk/%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9.webp" alt="img"></p>
<p>新建文件夹及放入</p>
<blockquote>
<p><strong>3.打开workspace，将demo与SDK加入到workspace。</strong></p>
</blockquote>
<p><img src="https://upload-images.jianshu.io/upload_images/2820888-5a5e5a9c6b60b852.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/580/format/webp" alt="img"></p>
<p>Add Files to “XXX”</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2820888-eb4adc9e5be45049.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/796/format/webp" alt="img"></p>
<p>选择.xcodeproj文件</p>
<blockquote>
<p><strong>4.添加自己暴露出来的头文件。</strong></p>
</blockquote>
<p><img src="/images/%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95sdk/%E6%9A%B4%E9%9C%B2%E5%A4%B4%E6%96%87%E4%BB%B6.webp" alt="img"></p>
<p>选择New Header Phase</p>
<p><img src="/images/%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95sdk/%E6%9A%B4%E9%9C%B2%E5%A4%B4%E6%96%87%E4%BB%B62.webp" alt="img"></p>
<p>将暴露的.h文件拖入</p>
<blockquote>
<p><strong>5.编辑demo的Header Search。</strong></p>
</blockquote>
<p>5.1 选择左侧demo，再点击Build Setting，搜索Header Search。</p>
<p>5.2 编辑Header Search Paths，加入 <strong>$(BUILT_PRODUCTS_DIR)，并在后面选择recursive。</strong></p>
<p><img src="/images/%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95sdk/headersearch.webp" alt="img"></p>
<p>加入**$(BUILT_PRODUCTS_DIR)，并在后面选择recursive** </p>
<p><img src="/images/%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95sdk/%E4%BE%BF%E5%88%A9%E5%AF%BB%E6%89%BE.webp" alt="img"></p>
<p>显示效果</p>
<p>5.3 选择SDK工程，command+B编译。</p>
<p><img src="/images/%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95sdk/%E7%BC%96%E8%AF%91.webp" alt="img"></p>
<p>选择SDK工程，选择模拟器生成模拟器.a，选择Generic iOS Device生成真机.a</p>
<blockquote>
<p><strong>6.将SDK加入到demo中。</strong></p>
</blockquote>
<p>注意：之前有把SDK加入过demo中的需要删除文件，否则会<strong>冲突</strong>。</p>
<p>6.1 选择demo工程，再点击Build Phase，Link Binary With Libraries。</p>
<p><img src="/images/%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95sdk/%E7%BC%96%E8%AF%91%E4%BA%A7%E7%89%A9.webp" alt="img"></p>
<p>选择</p>
<p>6.2 运行demo工程。</p>
<blockquote>
<p>   运行项目之后就可以断点调试了，至于那个人的简书地址我写完文章之后他不愿给我了哈哈哈，有需要的留言找我要吧~</p>
</blockquote>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的Egg之旅（一）——跨域</title>
    <url>/2020/07/13/%E6%97%A0%E6%98%9F%E7%9A%84Egg%E4%B9%8B%E6%97%85%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E8%B7%A8%E5%9F%9F/</url>
    <content><![CDATA[<p>先说点老生常谈的问题</p>
<h1 id="啥是跨域"><a href="#啥是跨域" class="headerlink" title="啥是跨域"></a>啥是跨域</h1><h2 id="1-同源策略"><a href="#1-同源策略" class="headerlink" title="1.同源策略"></a>1.同源策略</h2><p>要了解跨域，先要说说同源策略。同源策略是由 Netscape 公司提出的一个著名的安全策略，所有支持 JavaScript 的浏览器都会使用这个策略。所谓同源是指，域名，协议，端口相同。当页面在执行一个脚本时会检查访问的资源是否同源，如果非同源，那么在请求数据时，浏览器会在控制台中报一个异常，提示拒绝访问。</p>
<p>同源策略一般又分为以下两种：</p>
<p>DOM同源策略：禁止对不同源页面DOM进行操作。这里主要场景是iframe跨域的情况，不同域名的iframe是限制互相访问的。XmlHttpRequest同源策略：禁止使用XHR对象向不同源的服务器地址发起HTTP请求。</p>
<h2 id="2-什么是跨域？"><a href="#2-什么是跨域？" class="headerlink" title="2.什么是跨域？"></a>2.什么是跨域？</h2><p>跨域，指的是从一个域名去请求另外一个域名的资源。即跨域名请求！跨域时，浏览器不能执行其他域名网站的脚本，是由浏览器的同源策略造成的，是浏览器施加的安全限制。</p>
<p>跨域的严格一点来说就是只要协议，域名，端口有任何一个的不同，就被当作是跨域。</p>
<h2 id="好了，我们得出结论：1-跨域只在浏览器中会出现2-协议，域名，端口任一不同就会出现跨域"><a href="#好了，我们得出结论：1-跨域只在浏览器中会出现2-协议，域名，端口任一不同就会出现跨域" class="headerlink" title="好了，我们得出结论：1.跨域只在浏览器中会出现2.协议，域名，端口任一不同就会出现跨域"></a>好了，我们得出结论：1.跨域只在浏览器中会出现2.协议，域名，端口任一不同就会出现跨域</h2><p>好了，老生常谈的问题结束。</p>
<p>解决方式太多了，jsonP，代理什么的，不是我们要说的。</p>
<h1 id="Egg上如何解决跨域问题"><a href="#Egg上如何解决跨域问题" class="headerlink" title="Egg上如何解决跨域问题"></a>Egg上如何解决跨域问题</h1><h2 id="1-引入egg-cors"><a href="#1-引入egg-cors" class="headerlink" title="1.引入egg-cors"></a>1.引入egg-cors</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i egg-cors</span><br></pre></td></tr></table></figure>
<h2 id="2-plugin开启egg-cors插件"><a href="#2-plugin开启egg-cors插件" class="headerlink" title="2.plugin开启egg-cors插件"></a>2.plugin开启egg-cors插件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ./config/plugin.js</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  cors: &#123;</span><br><span class="line">    enable: true,</span><br><span class="line">    package: &#x27;egg-cors&#x27;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="3-config配置允许访问地址的白名单"><a href="#3-config配置允许访问地址的白名单" class="headerlink" title="3.config配置允许访问地址的白名单"></a>3.config配置允许访问地址的白名单</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module.exports = appInfo =&gt; &#123;</span><br><span class="line">	const config = exports = &#123;&#125;;</span><br><span class="line">	****</span><br><span class="line">	config.security = &#123;</span><br><span class="line">    csrf: &#123;</span><br><span class="line">      enable: false,</span><br><span class="line">    &#125;,</span><br><span class="line">    domainWhiteList: [ &#x27;*&#x27; ], // []中放放出的白名单，*代表所有</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  //   开启跨域</span><br><span class="line">  config.cors = &#123;</span><br><span class="line">    credentials: true,</span><br><span class="line">    origin: &#x27;*&#x27;,</span><br><span class="line">    allowMethods: &#x27;GET,HEAD,PUT,POST,DELETE,PATCH,OPTIONS&#x27;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="如何验证"><a href="#如何验证" class="headerlink" title="如何验证"></a>如何验证</h1><h3 id="1-随便起个前端项目-比如端口8081"><a href="#1-随便起个前端项目-比如端口8081" class="headerlink" title="1.随便起个前端项目,比如端口8081"></a>1.随便起个前端项目,比如端口8081</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vue create demo</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>
<h3 id="2-随便写个按钮发起请求"><a href="#2-随便写个按钮发起请求" class="headerlink" title="2.随便写个按钮发起请求"></a>2.随便写个按钮发起请求</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">test() &#123;</span><br><span class="line">      const xmlHttp = new XMLHttpRequest();</span><br><span class="line">      //改写成你自己的域名</span><br><span class="line">      xmlHttp.open(&#x27;post&#x27;, &#x27;http://127.0.0.1:7001/test&#x27;);</span><br><span class="line">      xmlHttp.setRequestHeader(&#x27;Access-Control-Allow-Origin&#x27;, &#x27;http://127.0.0.1&#x27;);</span><br><span class="line">      //注意这一句需要加，使其变为复杂请求</span><br><span class="line">      xmlHttp.setRequestHeader(&#x27;Content-Type&#x27;, &#x27;application/json&#x27;);</span><br><span class="line">      xmlHttp.send(JSON.stringify(&#123;</span><br><span class="line">        hi: &#x27;hi&#x27;,</span><br><span class="line">      &#125;));</span><br><span class="line">      xmlHttp.onreadystatechange = function () &#123;</span><br><span class="line">        // 啥也不用做</span><br><span class="line">        if (this.status === 200) &#123;</span><br><span class="line">          console.log(&#x27;上报成功&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>
<h3 id="3-查看network"><a href="#3-查看network" class="headerlink" title="3.查看network"></a>3.查看network</h3><p>因为端口不一致，因此需要跨域</p>
<p>正常情况下，复杂请求在请求前会发起一个options类型的预检请求<br><img src="/images/egg1/1.png" alt="1"><br>只有预检请求通过以后，才会执行真正的真实请求。</p>
<p>204是因为返回值为空，是预期内的。<br><img src="/images/egg1/2.png" alt="2"></p>
<p>只需要本地跨域通过，就可以确定代码上是没问题的。</p>
<h1 id="本地没问题，上服务器却还是跨域"><a href="#本地没问题，上服务器却还是跨域" class="headerlink" title="本地没问题，上服务器却还是跨域"></a>本地没问题，上服务器却还是跨域</h1><p>我只能给一个排查思路：</p>
<p>根据options请求的返回http code去排查</p>
<p>比如404，很明显是请求路径都没找到，检查服务器上是否前置了一个nginx。</p>
<p>nginx是否允许了options类型的请求…………</p>
]]></content>
      <categories>
        <category>node</category>
        <category>egg</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>egg</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的Egg之旅（三）——sequelize</title>
    <url>/2020/08/15/%E6%97%A0%E6%98%9F%E7%9A%84Egg%E4%B9%8B%E6%97%85%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94sequelize/</url>
    <content><![CDATA[<h1 id="sequelize引入"><a href="#sequelize引入" class="headerlink" title="sequelize引入"></a>sequelize引入</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i mysql2</span><br><span class="line">npm i egg-sequelize</span><br></pre></td></tr></table></figure>

<h1 id="sequelize配置"><a href="#sequelize配置" class="headerlink" title="sequelize配置"></a>sequelize配置</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 不同环境的库当然不一样,自己配置多环境的config.xx.js,我这就写个default</span><br><span class="line">// ./config/config.default.js</span><br><span class="line">// sql配置,填自己的即可</span><br><span class="line">  config.sequelize = &#123;</span><br><span class="line">    dialect: &#x27;mysql&#x27;,</span><br><span class="line">    host: &#x27;127.0.0.1&#x27;,</span><br><span class="line">    port: 3306,</span><br><span class="line">    database: &#x27;monitor&#x27;,</span><br><span class="line">    username: &#x27;root&#x27;,</span><br><span class="line">    password: &#x27;123456&#x27;,</span><br><span class="line">    define: &#123; // model的全局配置</span><br><span class="line">      timestamps: true, // 添加create,update,delete时间戳</span><br><span class="line">      paranoid: true, // 添加软删除</span><br><span class="line">      freezeTableName: true, // 防止修改表名为复数</span><br><span class="line">      underscored: true, // 使用下划线</span><br><span class="line">    &#125;,</span><br><span class="line">    timezone: &#x27;+8:00&#x27;, // 由于orm用的UTC时间，这里必须加上东八区，否则取出来的时间相差8小时</span><br><span class="line">    dialectOptions: &#123; // 让读取date类型数据时返回字符串而不是UTC时间</span><br><span class="line">      dateStrings: true,</span><br><span class="line">      typeCast(field, next) &#123;</span><br><span class="line">        if (field.type === &#x27;DATETIME&#x27;) &#123;</span><br><span class="line">          return field.string();</span><br><span class="line">        &#125;</span><br><span class="line">        return next();</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h1><p>开启sequelize插件</p>
<p>./config/plugin.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;use strict&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/** @type Egg.EggPlugin */</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  //  xxxxxx</span><br><span class="line">   sequelize: &#123;</span><br><span class="line">     enable: true,</span><br><span class="line">     package: &#x27;egg-sequelize&#x27;,</span><br><span class="line">   &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><p>和正常的sequelize相似</p>
<p>新建一个model文件夹</p>
<p>新建model</p>
<p>例如,我新建一个叫project的model</p>
<h2 id="定义model"><a href="#定义model" class="headerlink" title="定义model"></a>定义model</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//在插件开启plugin以后,Sequelize会被挂载到app上</span><br><span class="line">  const &#123; STRING, DATE &#125; = app.Sequelize;</span><br><span class="line">// 通过app.model.define方式新建</span><br><span class="line">  const Project = app.model.define(&#x27;project&#x27;, &#123;</span><br><span class="line">    app_id: &#123;</span><br><span class="line">      type: STRING,</span><br><span class="line">      primaryKey: true,</span><br><span class="line">    &#125;,</span><br><span class="line">    app_name: STRING(30),</span><br><span class="line">    jenkins_name: STRING,</span><br><span class="line">    map_source: STRING,</span><br><span class="line">    git_url: STRING,</span><br><span class="line">    created_at: DATE,</span><br><span class="line">    updated_at: DATE,</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<h2 id="定义方法增删改查"><a href="#定义方法增删改查" class="headerlink" title="定义方法增删改查"></a>定义方法增删改查</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//定义一个方法,叫createByAppId</span><br><span class="line"></span><br><span class="line">Project.createByAppId = async function(&#123; appId,</span><br><span class="line">  appName,</span><br><span class="line">  jenkinsName,</span><br><span class="line">  mapSource,</span><br><span class="line">  gitUrl &#125;) &#123;</span><br><span class="line"></span><br><span class="line">  // create是sequelize的方法,具体可以查看sequelize文档</span><br><span class="line"></span><br><span class="line">  return await this.create(&#123;</span><br><span class="line">    app_id: appId,</span><br><span class="line">    app_name: appName,</span><br><span class="line">    jenkins_name: jenkinsName,</span><br><span class="line">    map_source: mapSource,</span><br><span class="line">    git_url: gitUrl,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 其他js调用这个createByAppId</span><br><span class="line"> const tmp = await this.ctx.model.Project.createByAppId(&#123;xxxx&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="project-js全貌如下"><a href="#project-js全貌如下" class="headerlink" title="project.js全貌如下"></a>project.js全貌如下</h2><p>/model/project.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;use strict&#x27;;</span><br><span class="line"></span><br><span class="line">module.exports = app =&gt; &#123;</span><br><span class="line">  const &#123; STRING, DATE &#125; = app.Sequelize;</span><br><span class="line"></span><br><span class="line">  const Project = app.model.define(&#x27;project&#x27;, &#123;</span><br><span class="line">    app_id: &#123;</span><br><span class="line">      type: STRING,</span><br><span class="line">      primaryKey: true,</span><br><span class="line">    &#125;,</span><br><span class="line">    app_name: STRING(30),</span><br><span class="line">    jenkins_name: STRING,</span><br><span class="line">    map_source: STRING,</span><br><span class="line">    git_url: STRING,</span><br><span class="line">    created_at: DATE,</span><br><span class="line">    updated_at: DATE,</span><br><span class="line">  &#125;);</span><br><span class="line">    //增</span><br><span class="line">  Project.createByAppId = async function(&#123; appId,</span><br><span class="line">    appName,</span><br><span class="line">    jenkinsName,</span><br><span class="line">    mapSource,</span><br><span class="line">    gitUrl &#125;) &#123;</span><br><span class="line">    return await this.create(&#123;</span><br><span class="line">      app_id: appId,</span><br><span class="line">      app_name: appName,</span><br><span class="line">      jenkins_name: jenkinsName,</span><br><span class="line">      map_source: mapSource,</span><br><span class="line">      git_url: gitUrl,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">    //查</span><br><span class="line">  Project.findByAppId = async function(appid) &#123;</span><br><span class="line">    return await this.findOne(&#123;</span><br><span class="line">      where: &#123;</span><br><span class="line">        appid,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  // 改</span><br><span class="line">  Project.prototype.logSignin = async function() &#123;</span><br><span class="line">    return await this.update(&#123; last_sign_in_at: new Date() &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  return Project;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>node</category>
        <category>egg</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>egg</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的Egg之旅（二）——日志</title>
    <url>/2020/08/15/%E6%97%A0%E6%98%9F%E7%9A%84Egg%E4%B9%8B%E6%97%85%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<p>日志涉及的东西还是挺多的</p>
<h1 id="一-日志格式化"><a href="#一-日志格式化" class="headerlink" title="一.日志格式化"></a>一.日志格式化</h1><p>默认是自带格式的,但保不齐自己有自定义格式的需求.因此需要修改格式.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// ./config/config.default.js</span><br><span class="line">  ......</span><br><span class="line">  config.logger = &#123;</span><br><span class="line">    dir: path.join(__dirname, &#x27;../logs&#x27;),</span><br><span class="line">    contextFormatter(meta) &#123;</span><br><span class="line">        //TODO:这里就是默认loger返回的日志格式了</span><br><span class="line">      return `$&#123;meta.date&#125; $&#123;meta.message&#125;`;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>

<h1 id="二-自定义存储路径"><a href="#二-自定义存储路径" class="headerlink" title="二.自定义存储路径"></a>二.自定义存储路径</h1><p>u1s1,你会发现本地运行的时候,产生的loger在项目文件夹下,但在部署的时候就找不到了.</p>
<p>因为在egg默认的生产环境中,会在用户根目录下,新建一个叫logs的文件夹,所有日志都在里面.</p>
<p>因此需要自定义日志地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// ./config/config.default.js</span><br><span class="line">  ......</span><br><span class="line">  config.logger = &#123;</span><br><span class="line">    //这里写日志地址,__dirname可以变成别的</span><br><span class="line">    //但是注意,appInfo.root在生产和开发不是一个地址,建议使用appInfo.baseDir</span><br><span class="line">    dir: path.join(__dirname, &#x27;../logs&#x27;),</span><br><span class="line">    contextFormatter(meta) &#123;</span><br><span class="line">      return `$&#123;meta.date&#125; $&#123;meta.message&#125;`;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>

<h1 id="三-自定义logger"><a href="#三-自定义logger" class="headerlink" title="三.自定义logger"></a>三.自定义logger</h1><p>设置customLogger即可.frontLogger设置的东西和默认logger差不多</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// ./config/config.default.js</span><br><span class="line">  ......</span><br><span class="line">    config.customLogger = &#123;</span><br><span class="line">    //frontLogger是logger名,可变</span><br><span class="line">    frontLogger: &#123;</span><br><span class="line">      file: path.join(appInfo.baseDir, &#x27;logs/prod/szyx-monitor-web.log&#x27;),</span><br><span class="line">      contextFormatter(meta) &#123;</span><br><span class="line">        return `$&#123;meta.date&#125; $&#123;meta.message&#125;`;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const logger = this.ctx.getLogger(&#x27;frontLogger&#x27;);</span><br><span class="line">logger.error(&#x27;xxxx&#x27;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>node</category>
        <category>egg</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>egg</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的Flutter学习之旅（一） 环境安装</title>
    <url>/2019/09/08/%E6%97%A0%E6%98%9F%E7%9A%84Flutter%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%EF%BC%88%E4%B8%80%EF%BC%89-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>Flutter的中文文档写的啥啊。。。让人有点摸不着头脑。。。</p>
<p>1.打开命令行工具</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//使用bash的改.bash_profile ，使用zsh的用.zshrc</span><br><span class="line">vim .bash_profile </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>然后添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export PUB_HOSTED_URL=https://pub.flutter-io.cn</span><br><span class="line">export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</span><br></pre></td></tr></table></figure>
<p>这一步是添加国内镜像</p>
<p>保存以后source一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source .bash_profile </span><br></pre></td></tr></table></figure>
<p>2.找个地方新建一个文件夹<br>（我喜欢把所有环境相关的东西放在一个文件夹下，放不放当然随你们）<br>例如我在自己的用户下面新建一个叫环境的文件夹（中文命名不太专业emmm）<br><img src="/images/Flutter1/1.png" alt="文件夹"><br>接着我们打开终端，cd到该目录下并cloneFlutter的项目</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone -b beta https://github.com/flutter/flutter.git</span><br></pre></td></tr></table></figure>
<p>clone完毕以后就能看到，在文件夹下存在了flutter的项目。<br>3.Path配置<br>依旧回到刚刚的地方，配置.bash_profile</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd</span><br><span class="line">vim .bash_profile </span><br></pre></td></tr></table></figure>
<p>添加刚刚clone下来项目的地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export PATH=&quot;flutter项目地址&quot;/bin:$PATH</span><br></pre></td></tr></table></figure>
<p>例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export PATH=/Users/wuxing/环境/flutter/bin:$PATH</span><br></pre></td></tr></table></figure>
<p>保存以后在source一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source .bash_profile </span><br></pre></td></tr></table></figure>
<p>4.flutter doctor</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flutter doctor</span><br></pre></td></tr></table></figure>
<p>会给你装一大堆东西，最后如图<br><img src="/images/Flutter1/2.png" alt="image.png"><br>我是iOS开发（名义上的），没装as，可以看到iOS上我还有很多没装，我们用照着输入命令安装即可。<br>brew不会用的，可以看一下<a href="https://juejin.im/post/5be68e3b51882516c94e6b9c">无星的RN学习之旅（十）-一份不太严谨的入门教程</a></p>
]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的Flutter学习之旅（二） Plugin发布遇坑，google授权失败</title>
    <url>/2019/09/08/%E6%97%A0%E6%98%9F%E7%9A%84Flutter%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%EF%BC%88%E4%BA%8C%EF%BC%89-Plugin%E5%8F%91%E5%B8%83%E9%81%87%E5%9D%91%EF%BC%8Cgoogle%E6%8E%88%E6%9D%83%E5%A4%B1%E8%B4%A5/</url>
    <content><![CDATA[<p>Plugin的创建与开发，已经有各路大神写过，在这里不赘述了。</p>
<p>这里只讲讲在我天朝特色下，发布遇到的坑。</p>
<h2 id="死活无法连上外网，报错为获取谷歌账号授权失败"><a href="#死活无法连上外网，报错为获取谷歌账号授权失败" class="headerlink" title="死活无法连上外网，报错为获取谷歌账号授权失败"></a>死活无法连上外网，报错为获取谷歌账号授权失败</h2><p>请求google授权，翻出去，登录了账号，授权了，但是终端依旧报错如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">It looks like accounts.google.com is having some trouble.</span><br><span class="line">Pub will wait for a while before trying to connect again.</span><br><span class="line">OS Error: Operation timed out, errno = 60, address = accounts.google.com, port = 53165</span><br></pre></td></tr></table></figure>

<p>原因都知道，天朝特色。都知道终端要翻墙，但查来查去，就是不说怎么终端翻墙，真是气死人。（我从晚上11点想发布了去睡觉一直搞到凌晨4点）</p>
<p>我就直说了吧。</p>
<p>一般都是小飞机，然后开全局模式，然后发现终端还是不行。</p>
<p>下面我说如何解决</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="1-开启小飞机"><a href="#1-开启小飞机" class="headerlink" title="1.开启小飞机"></a>1.开启小飞机</h3><p>选择偏好设置</p>
<p><img src="/images/Flutter2/1.png" alt="小飞机"></p>
<p>查看Http端口（mac默认为1087，Windows为1080）</p>
<p><img src="/images/Flutter2/2.jpeg" alt="http端口"></p>
<h3 id="2-打开终端（Windows打开git-bash）"><a href="#2-打开终端（Windows打开git-bash）" class="headerlink" title="2.打开终端（Windows打开git bash）"></a>2.打开终端（Windows打开git bash）</h3><p>设置http和https代理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export http_proxy=http://127.0.0.1:1087</span><br><span class="line">export https_proxy=http://127.0.0.1:1087</span><br></pre></td></tr></table></figure>

<p>如何测试是否成功</p>
<p>切记不要用ping <a href="http://www.google.com测试,你就是ping到明年也ping不通/">www.google.com测试，你就是Ping到明年也ping不通</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">测试方法一：</span><br><span class="line">curl www.google.com</span><br><span class="line">有回文则成功</span><br><span class="line"></span><br><span class="line">测试方法二：</span><br><span class="line">curl cip.cc</span><br><span class="line">看看返回的数据是否为ss节点ip</span><br></pre></td></tr></table></figure>



<h3 id="3-关闭国内镜像"><a href="#3-关闭国内镜像" class="headerlink" title="3.关闭国内镜像"></a>3.关闭国内镜像</h3><p>在装flutter环境的时候，大部分用户都是安装了国内镜像的，可以打开环境变量文件看一下</p>
<p>不同shell环境变量设置地方不一样，我用的是zsh</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//查看当前SHELL</span><br><span class="line">echo $SHELL</span><br><span class="line">//不同shell对应的环境变量文件</span><br><span class="line">zsh=&gt;~/.zshrc</span><br><span class="line">bash=&gt;~/.bash_profile</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//进入编辑模式</span><br><span class="line">vim ~/.zshrc</span><br><span class="line"></span><br><span class="line">//找到下面这两</span><br><span class="line">export PUB_HOSTED_URL=https://pub.flutter-io.cn</span><br><span class="line">export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</span><br></pre></td></tr></table></figure>

<p>将PUB_HOSTED_URL和FLUTTER_STORAGE_BASE_URL注释掉</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#export PUB_HOSTED_URL=https://pub.flutter-io.cn</span><br><span class="line">#export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</span><br></pre></td></tr></table></figure>

<h3 id="4-cd到写好的插件仓库根目录-最关键的一步，不知道为啥就是没人提到这个"><a href="#4-cd到写好的插件仓库根目录-最关键的一步，不知道为啥就是没人提到这个" class="headerlink" title="4.cd到写好的插件仓库根目录(最关键的一步，不知道为啥就是没人提到这个)"></a>4.cd到写好的插件仓库根目录(最关键的一步，不知道为啥就是没人提到这个)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flutter packages get</span><br></pre></td></tr></table></figure>

<p>这时候就会把你的插件里的lock文件中的国内镜像转到官方源上了</p>
<h3 id="5-进行正常发布操作"><a href="#5-进行正常发布操作" class="headerlink" title="5.进行正常发布操作"></a>5.进行正常发布操作</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">三种命令都行，任选其一</span><br><span class="line">发布命令一</span><br><span class="line">flutter packages pub publish</span><br><span class="line">发布命令二（推荐）</span><br><span class="line">flutter packages pub publish --server=https://pub.dartlang.org</span><br><span class="line">发布命令三</span><br><span class="line">sudo flutter packages pub publish -v</span><br></pre></td></tr></table></figure>
<h2 id="END"><a href="#END" class="headerlink" title="END"></a>END</h2><p>理论上应该能正常发布成功了。</p>
<p>发布完成后，国内镜像的注释可以放开了</p>
<p>另外打个小广告<a href="https://github.com/FlutterTaoBaoKe/flutter_alibc">阿里百川Flutter插件</a>，有需要的朋友可以点个star</p>
]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的RN学习之旅（一）-环境安装以及新建项目</title>
    <url>/2017/07/15/%E6%97%A0%E6%98%9F%E7%9A%84RN%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%EF%BC%88%E4%B8%80%EF%BC%89-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<p>iOS菜鸟，本周开始了react native的学习。<br>（一）环境安装<br>      官网写的很详细，我觉得就没必要重新再啰嗦了。<br>官网地址：<br>  <a href="http://reactnative.cn/docs/0.46/getting-started.html">http://reactnative.cn/docs/0.46/getting-started.html</a><br>（二）新建第一个项目<br>1.打开“终端”输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">react-native init MyApp --version 0.44.3</span><br></pre></td></tr></table></figure>
<p>注意：init命令默认会创建最新的版本，而目前最新的0.45及以上版本需要下载boost库编译。此库体积庞大，在国内即便翻墙也很难下载成功，导致很多人无法正常运行iOS项目，推荐暂时使用0.44.3的版本。<br>2.创建成功后cd到项目路径下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd MyApp</span><br></pre></td></tr></table></figure>
<p>3.运行该项目</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">react-native run-ios</span><br></pre></td></tr></table></figure>
<p>P.S 我是运行iOS，如果运行安卓就输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">react-native run-android</span><br></pre></td></tr></table></figure>
<p>我创建了一个练习文件，可供练习，这五个练习完成应该就能初步知道怎么交互了。包括我的学习路线怎么完成也会慢慢更新~</p>
<p><img src="/images/RN1/1.png" alt="界面图"><br>地址是：<a href="https://github.com/XingXiaoWu/React-Native-First">https://github.com/XingXiaoWu/React-Native-First</a><br>不如随手点个star让楼主也开心一整天~</p>
<p><a href="http://www.jianshu.com/p/cd0cfa602963">无星的RN学习之旅（二）-RN与原生的通信</a><br><a href="http://www.jianshu.com/p/ea3484f54643">无星的RN学习之旅（三）-bridge is not set.</a><br><a href="http://www.jianshu.com/p/cccf744bdd8d">无星的RN学习之旅（四）——通信、持久化存储、xcode打包</a><br><a href="http://www.jianshu.com/p/0c821a63852d">无星的RN学习之旅（五）-关于react-navigation多层级页面返回时，去掉逐层推出动画</a><br><a href="http://www.jianshu.com/p/42d9c668cbb1">无星的RN学习之旅（六）-第三方App跳转，苹果商店跳转，loading框</a></p>
]]></content>
      <categories>
        <category>react-native</category>
      </categories>
      <tags>
        <tag>react-native</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的RN学习之旅（七）——iOS打包（图文教程版）</title>
    <url>/2018/06/13/%E6%97%A0%E6%98%9F%E7%9A%84RN%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%EF%BC%88%E4%B8%83%EF%BC%89%E2%80%94%E2%80%94iOS%E6%89%93%E5%8C%85%EF%BC%88%E5%9B%BE%E6%96%87%E6%95%99%E7%A8%8B%E7%89%88%EF%BC%89/</url>
    <content><![CDATA[<p>背景：rn好多前端或者安卓转的旁友对iOS的打包不太熟悉，所以写个图文教程版，目前我对应的版本是0.4+版本和0.5+版本（反正我也是随便写的，参考为主）<br>PS：账号的申请还有各种证书的申请我就不多提了，自己百度查下。。<br>###1.打开项目中iOS文件夹，新建一个名为bundle的文件夹<br><img src="/images/RN7/1.png" alt="如图"><br>###2.打开终端，cd到整个项目根目录<br><img src="/images/RN7/2.png" alt="如图中的catten目录"><br>###3.输入命令行，版本不同命令不一样哟，注意看<br>区分标准是你是否存在index.ios.js，存在肯定是老版本，用下面这个命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">react-native bundle --entry-file index.ios.js --bundle-output ./ios/bundle/index.ios.jsbundle --platform ios --assets-dest ./ios/bundle --dev false</span><br></pre></td></tr></table></figure>
<p>如果你是index.js，那就是新版本啦，用下面这个命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">react-native bundle --entry-file index.js --bundle-output ./ios/bundle/index.jsbundle --platform ios --assets-dest ./ios/bundle --dev false</span><br></pre></td></tr></table></figure>
<p>###4.把上面命令输入终端并按下回车<br>等待时间可能要一会<br><img src="/images/RN7/3.png" alt="如图"><br>###4.补，差点漏了一点注意事项<br>可能有的旁友项目中有webview承载html页面<br>这时候你命令行打出来的包可能就要注意一下了<br>如下图，我这是bundle文件夹下assets文件夹里的资源文件夹<br><img src="/images/RN7/4.png" alt="如图"><br>实际上我这个html有多少文件呢<br><img src="/images/RN7/5.png" alt="实际这么多"><br>你会发现少了东西，这时候怎么办，很简单，去你项目中把相关缺少的文件复制到assets里就行</p>
<p>###5.打开Xcode项目<br>直接拖过去<br><img src="/images/RN7/6.png" alt="直接拖过去"><br>记得选下面这个哟，蓝色的物理文件夹<br><img src="/images/RN7/7.png" alt="选下面这个"><br>选完长这样<br><img src="/images/RN7/8.png" alt="选完长这样"><br>###6.这时候打开appdelegate（我改了东西，里面代码是一样的，不过我的位置不一样，你们看下就知道了）<br>把jsCodeLocation的来源换成你打的包的来源(其他人怎么打包、调试、开发我不清楚，反正我是这么做的，而且已经上架两个项目了，我确定是可用的)<br><img src="/images/RN7/9.png" alt="js的地址"></p>
<p>还是老样子，index.ios.js填</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jsCodeLocation = [NSURL URLWithString:[[NSBundle mainBundle] pathForResource:@&quot;index.ios.jsbundle&quot; ofType:nil]];</span><br></pre></td></tr></table></figure>

<p>index.js填</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jsCodeLocation = [NSURL URLWithString:[[NSBundle mainBundle] pathForResource:@&quot;index.jsbundle&quot; ofType:nil]];</span><br></pre></td></tr></table></figure>

<p>###7.剩下的就是正常的iOS打包了<br>如图开始打包，这时候有4个选项，由于打一个包时间挺长的我就不截图了。。后续步骤里的几个选项大伙可以百度一下iOS打包了解一下。。或者我下次打包补图<br><img src="/images/RN7/10.png" alt="如图"></p>
<h2 id="2018-11-23日更新"><a href="#2018-11-23日更新" class="headerlink" title="2018-11-23日更新"></a>2018-11-23日更新</h2><p>升级到0.57版本以后，webview做了改变，如果你的webview承载了本地html，请在rn代码处添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">originWhitelist=&#123;[&#x27;*&#x27;]&#125;</span><br></pre></td></tr></table></figure>
<p>如下图<br><img src="/images/RN7/11.png" alt="如图"><br>否则你的本地h5页面可能会无法展示</p>
]]></content>
      <categories>
        <category>react-native</category>
      </categories>
      <tags>
        <tag>react-native</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的RN学习之旅（三）-bridge is not set.</title>
    <url>/2017/07/24/%E6%97%A0%E6%98%9F%E7%9A%84RN%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%EF%BC%88%E4%B8%89%EF%BC%89-bridge-is-not-set/</url>
    <content><![CDATA[<p>报错信息：bridge is not set. This is probably because you’ve “<br>            “explicitly synthesized the bridge in %@, even though it’s inherited “<br>            “from RCTEventEmitter.</p>
<p>踩坑了。。。<br>        我相信肯定有兄弟需要从原生的OC向RN主动发起事件。而且这种场景也很多，比如集成第三方的服务，通过代理回调获取结果发送给RN等等等等。。。<br>我将我遇到的坑总结一下吧。<br>先看下官网怎么写的</p>
<p><img src="/images/RN3/1.png" alt="官网介绍1"></p>
<p><img src="/images/RN3/2.png" alt="官网介绍2.png"><br>1.你是不是像官网一样，先写一个继承自RCTEventEmitter的对象，什么都不写，看看能不能运行？<br>答案是：并不能运行=。=你必须写实现，也就是以下这个方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//.m文件</span><br><span class="line">- (NSArray&lt;NSString *&gt; *)supportedEvents</span><br><span class="line">&#123;</span><br><span class="line">  return @[@&quot;EventReminder&quot;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.你在使用发送文件，也就是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[self sendEventWithName:@&quot;消息名&quot; body:参数];</span><br></pre></td></tr></table></figure>
<p>运行这个方法的时候有没有崩溃啊=。=<br>崩溃的提示是不是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bridge is not set. This is probably because you&#x27;ve &quot;</span><br><span class="line">            &quot;explicitly synthesized the bridge in %@, even though it&#x27;s inherited &quot;</span><br><span class="line">            &quot;from RCTEventEmitter.</span><br></pre></td></tr></table></figure>
<p>其实就是bridage为空。<br>这个时候你查这个报错提示是不是发现有人说在Appdelegate.m里把rootView的bridage赋给这个你创建的对象，然后你试了一下确实发出去了开始哈皮=。=</p>
<p>这时候你会发现一个悲伤的事实，不管你在RN里怎么写监听，你都监听不到这个事件=。=<br>那么正确的解法是什么呢=。=<br>（1）必须使用单例<br>（2）必须复写alloczone<br>其实就是加这么一段代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//.m文件</span><br><span class="line">+(id)allocWithZone:(NSZone *)zone &#123;</span><br><span class="line">  static RNBridge *sharedInstance = nil;</span><br><span class="line">  static dispatch_once_t onceToken;</span><br><span class="line">  dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">    sharedInstance = [super allocWithZone:zone];</span><br><span class="line">  &#125;);</span><br><span class="line">  return sharedInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在APPdelegate中就不需要将rootView的bridge赋予原生模块了。<br>用self进行发送即可<br>RN中使用NativeEventEmitter进行监听即可。<br>还有问题简书私信我，一起交流解决=。=</p>
<h2 id="2017-12-22更新"><a href="#2017-12-22更新" class="headerlink" title="2017-12-22更新"></a>2017-12-22更新</h2><p>还是有兄弟对于iOS与RN的交互有问题，直接上代码吧。图片名会写明是在桥接类的.h还是.m文件的代码<br><img src="/images/RN3/3.png" alt=".h.png"></p>
<p><img src="/images/RN3/4.png" alt=".m.png"></p>
<p><img src="/images/RN3/5.png" alt=".m.png"></p>
<p><img src="/images/RN3/6.png" alt=".m.png"></p>
<p>接下来是js方面如何监听</p>
<p><img src="/images/RN3/7.png" alt="js.png"></p>
<p><img src="/images/RN3/8.png" alt="js.png"></p>
<p>这里要注意了，下面这幅截图中的代码，如果使用DevicceEventEmitter无法监听到的话，用我图中写的对应自己原生模块的nativeBridgeEmitter（名字自取）去监听。<br><img src="/images/RN3/9.png" alt="js.png"></p>
<p>理论上，只要你的RN方面的服务以及模块已经启动，那就可以顺畅的进行oc的主动通信，不然是无法通信而且会导致崩溃的。</p>
<p><a href="http://www.jianshu.com/p/d417f7bdc511">无星的RN学习之旅（一）-环境安装以及新建项目</a><br><a href="http://www.jianshu.com/p/cd0cfa602963">无星的RN学习之旅（二）-RN与原生的通信</a><br><a href="http://www.jianshu.com/p/cccf744bdd8d">无星的RN学习之旅（四）——通信、持久化存储、xcode打包</a><br><a href="http://www.jianshu.com/p/0c821a63852d">无星的RN学习之旅（五）-关于react-navigation多层级页面返回时，去掉逐层推出动画</a><br><a href="http://www.jianshu.com/p/42d9c668cbb1">无星的RN学习之旅（六）-第三方App跳转，苹果商店跳转，loading框</a></p>
]]></content>
      <categories>
        <category>react-native</category>
      </categories>
      <tags>
        <tag>react-native</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的RN学习之旅（九）-ESLint引入</title>
    <url>/2018/11/10/%E6%97%A0%E6%98%9F%E7%9A%84RN%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%EF%BC%88%E4%B9%9D%EF%BC%89-ESLint%E5%BC%95%E5%85%A5/</url>
    <content><![CDATA[<p>这篇是写给原生老哥们看的，毕竟如果是做js的老哥肯定是不用说了。。。</p>
<h3 id="背景：大家代码写的格式都不一样，希望统一起来，所以引入ESLint"><a href="#背景：大家代码写的格式都不一样，希望统一起来，所以引入ESLint" class="headerlink" title="背景：大家代码写的格式都不一样，希望统一起来，所以引入ESLint"></a>背景：大家代码写的格式都不一样，希望统一起来，所以引入ESLint</h3><p>这东西是啥应该不用我多说，至于怎么引入，说实话，看了官网教程，也看了各种博客，反正最后我是搞得一团糟。。。。万幸最后引入还是成功了。</p>
<p>我是打算每个项目的标准都不同（因为有的是rn，有的是h5），所以我都是局部引入，没有全局引入。所以我接下来说的都是局部引入，会让你卸掉全局的，想全局引入的同学自己注意一小下，有些步骤就不要照做了。 目前airbnb的标准是最受推崇的，我就引入它了</p>
<h3 id="环境和工具：Mac，webstrom，npm，yarn"><a href="#环境和工具：Mac，webstrom，npm，yarn" class="headerlink" title="环境和工具：Mac，webstrom，npm，yarn"></a>环境和工具：Mac，webstrom，npm，yarn</h3><h3 id="一、检查本地是否全局安装过相关的包"><a href="#一、检查本地是否全局安装过相关的包" class="headerlink" title="一、检查本地是否全局安装过相关的包"></a>一、检查本地是否全局安装过相关的包</h3><p>打开终端</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm ls -g --depth 0</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>看看全局是否安装过ESLint相关的包，如果有，卸载掉。</p>
<h3 id="二、进入项目根目录"><a href="#二、进入项目根目录" class="headerlink" title="二、进入项目根目录"></a>二、进入项目根目录</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm info &quot;eslint-config-airbnb@latest&quot; peerDependencies</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>查看目前最新的airbnb标准</p>
<p><img src="/images/RN9/1.png" alt="image"></p>
<p>好，那目前你看到了这些库，没错，这都是要加入的库=。= （我比较喜欢多敲点命令，其实有一步操作，但是我不想做=。=）</p>
<p>接下来你要做的就很蠢了，一步步把这些库都加进去。 注意，这个本身只是开发要用的辅助工具，因此没有必要加到正式环境上去，记得加–dev</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add --dev eslint@^4.19.1 || ^5.3.0</span><br><span class="line">yarn add --dev eslint-plugin-import@^2.14.0</span><br><span class="line">yarn add --dev eslint-plugin-jsx-a11y@^6.1.1</span><br><span class="line">yarn add --dev eslint-plugin-react@^7.11.0</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<h3 id="三、这时候你的ESLint就装好了，而且是局部的"><a href="#三、这时候你的ESLint就装好了，而且是局部的" class="headerlink" title="三、这时候你的ESLint就装好了，而且是局部的"></a>三、这时候你的ESLint就装好了，而且是局部的</h3><p>开始新建你的标准</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./node_modules/eslint/bin/eslint.js --init</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>接下来就是一大堆问题，这一大堆问题想必大伙都能看得懂，像我就是选了继承自airbnb标准的，各位也可以选别的或者按自己项目来。 最后肯定就在项目根目录生成了.eslint的js或json之类的文件。</p>
<h3 id="四、开始检查"><a href="#四、开始检查" class="headerlink" title="四、开始检查"></a>四、开始检查</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> ./node_modules/eslint/bin/eslint.js  xx.js</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>因为你是局部引入的，所以一定要用项目的eslint才能识别 例如：</p>
<p><img src="/images/RN9/2.png" alt="image"></p>
<p>很明显。。。错误比较多。。。不过问题不大，慢慢改就完事了，不会影响项目的正常运行</p>
<h3 id="五、给webstrom设置检查"><a href="#五、给webstrom设置检查" class="headerlink" title="五、给webstrom设置检查"></a>五、给webstrom设置检查</h3><p><img src="/images/RN9/3.png" alt="image"></p>
<p><img src="/images/RN9/4.png" alt="image"></p>
<figcaption></figcaption>



<p>好了，现在你的项目应该是可以生效了，不过你肯定还是不爽，因为你发现cmd+alt+l格式化并不能帮助你适应eslint定下的规则。所以我会告诉你如何让webstrom帮助你快速完成这件事。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Edit-Macros-Start-Marcos-Recording</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>开始录屏<br><img src="/images/RN9/5.png" alt="开始录屏"></p>
<p>随便选中一个你要修复的文件</p>
<p><img src="/images/RN9/6.png" alt="修复"></p>
<p>前面的步骤会让你的webstrom的右键中多了一个eslint fix的快捷键，这里只需要选中它，修复当前文件 停止录屏以后，输入这段录屏操作，并取个名字，例如：ESlint-Fix</p>
<p><img src="/images/RN9/7.png" alt="image"></p>
<p>为它设置一个快捷键，然后点击ok，以后这个快捷键就会为你进行代码缩进换行方面的格式化修复了，可以用这个替代你的代码格式化。</p>
<h3 id="六、快速检查所有文件"><a href="#六、快速检查所有文件" class="headerlink" title="六、快速检查所有文件"></a>六、快速检查所有文件</h3><p><img src="/images/RN9/8.png" alt="image"></p>
<p>你可以在你的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package.json-scripts</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>中写入快捷命令，例如我的js文件都在src文件夹下，所以我要检查的文件也就这些。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;lint&quot;: &quot;eslint --ext .js src&quot;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>所以我要执行检查命令也只需要输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run lint</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>各位可以适当改动一下，使得其能检查你们的文件，毕竟能少敲一些代码是一些=。=</p>
]]></content>
      <categories>
        <category>react-native</category>
      </categories>
      <tags>
        <tag>react-native</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的RN学习之旅（二）-RN与原生的通信</title>
    <url>/2017/07/17/%E6%97%A0%E6%98%9F%E7%9A%84RN%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%EF%BC%88%E4%BA%8C%EF%BC%89-RN%E4%B8%8E%E5%8E%9F%E7%94%9F%E7%9A%84%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<p>接上一篇<a href="http://www.jianshu.com/p/d417f7bdc511">无星的RN学习之旅（一）</a>最后我给出了一个基础项目地址进行学习。<br>PS：我使用的是VSCode编译器和Xcode编译器<br>一、RN如何调用原生方法<br>1.在新建的项目中打开ios目录下的工程文件，同时使用VSCode打开项目目录。<br>  新建NSObjec对象，名字任意，我这里叫RNruniOS</p>
<p>.h文件添加RCTBridgeModule.h头文件，RCTBridgeModule协议</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//RNruniOS.h文件</span><br><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line">#import &quot;React/RCTBridgeModule.h&quot;</span><br><span class="line">@interface RNruniOS : NSObject&lt;RCTBridgeModule&gt;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure>
<p>.m文件添加RCTConvert.h头文件，并添加相应宏</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//RNruniOS.m文件</span><br><span class="line">#import &quot;RNruniOS.h&quot;</span><br><span class="line">//RCTConvert提供了一系列辅助函数，用来接收一个JSON值并转换到原生Objective-C类型或类。</span><br><span class="line">#import &quot;React/RCTConvert.h&quot;</span><br><span class="line">@implementation RNruniOS</span><br><span class="line"></span><br><span class="line">//为了实现RCTBridgeModule协议，需要包含RCT_EXPORT_MODULE()宏。</span><br><span class="line">//这个宏也可以添加一个参数用来指定在Javascript中访问这个模块的名字。</span><br><span class="line">//如果不指定，默认就会使用这个Objective-C类的名字。</span><br><span class="line">RCT_EXPORT_MODULE()</span><br><span class="line"></span><br><span class="line">//通过RCT_EXPORT_METHOD()宏声明要给Javascript导出的方法，否则React Native不会导出任何方法。</span><br><span class="line">RCT_EXPORT_METHOD(RNiOSLog:(NSString*)msg)</span><br><span class="line">&#123;</span><br><span class="line">  NSLog(@&quot;RN调用iOS打印方法信息是%@&quot;,msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure>
<p>2.在rn项目中的index.ios.js文件进行调用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//RN调用iOS原生方法,定义一个变量</span><br><span class="line">var RNruniOS = NativeModules.RNruniOS;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//RN调用原生方法</span><br><span class="line"> RNruniOS.RNiOSLog(&#x27;RN调用iOS打印方法成功。&#x27;);</span><br></pre></td></tr></table></figure>

<p>通过xcode进行项目编译，点击相应按钮触发事件即可看见控制台打印输出log信息。<br>该小练习github地址：<a href="https://github.com/XingXiaoWu/RNruniOS">https://github.com/XingXiaoWu/RNruniOS</a></p>
<p>二、回调函数CallBack的使用<br><a href="http://www.jianshu.com/p/d417f7bdc511">无星的RN学习之旅（一）-环境安装以及新建项目</a><br><a href="http://www.jianshu.com/p/ea3484f54643">无星的RN学习之旅（三）</a><br><a href="http://www.jianshu.com/p/cccf744bdd8d">无星的RN学习之旅（四）——通信、持久化存储、xcode打包</a><br><a href="http://www.jianshu.com/p/0c821a63852d">无星的RN学习之旅（五）-关于react-navigation多层级页面返回时，去掉逐层推出动画</a><br><a href="http://www.jianshu.com/p/42d9c668cbb1">无星的RN学习之旅（六）-第三方App跳转，苹果商店跳转，loading框</a></p>
]]></content>
      <categories>
        <category>react-native</category>
      </categories>
      <tags>
        <tag>react-native</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的RN学习之旅（五）-关于react-navigation多层级页面返回时，去掉逐层推出动画</title>
    <url>/2017/09/18/%E6%97%A0%E6%98%9F%E7%9A%84RN%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%EF%BC%88%E4%BA%94%EF%BC%89-%E5%85%B3%E4%BA%8Ereact-navigation%E5%A4%9A%E5%B1%82%E7%BA%A7%E9%A1%B5%E9%9D%A2%E8%BF%94%E5%9B%9E%E6%97%B6%EF%BC%8C%E5%8E%BB%E6%8E%89%E9%80%90%E5%B1%82%E6%8E%A8%E5%87%BA%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<p>git：<a href="https://github.com/react-community/react-navigation/issues/1493">https://github.com/react-community/react-navigation/issues/1493</a><br>来，下猛药：<br>首先找到文件：src/views/ScenesReducer.js<br>然后用下面的代码：<br>　　let k = null;<br>　　let v = null;<br>　　staleScenes.forEach(scene =&gt; {<br>　　let {key} = scene;<br>　　k = key;<br>　　v = scene;<br>　　});<br>　　newStaleScenes = k &amp;&amp; v ? new Map([[k, v]]) : new Map();<br>　　newStaleScenes.forEach(mergeScene);<br>替换：staleScenes.forEach(mergeScene);<br>保存编译，就只有返回某页的动画了</p>
<p>转自<a href="http://www.cnblogs.com/lc901221/p/7543094.html">http://www.cnblogs.com/lc901221/p/7543094.html</a><br>我就是那个贴了帖子看不懂答案的傻逼，。。</p>
<p>另外：<br>transitionConfig : () =&gt; ({<br>                transitionSpec: {<br>                    duration: 0,<br>                    timing: Animated.timing,<br>                    easing: Easing.step0,<br>                },<br>            }),<br>去掉动画效果</p>
<p>2018-2-23 更新<br>以上解决方案适用于1.0.0beta版<br>升级到React-navigation 1.1.1版本后可直接通过key去回退指定版本。<br>至于怎么取key=&gt;可以在跳转时缓存页面对应key值，通过页面名去获取缓存的key值跳转。<br>注意源码中当页面层级index为0时（首页）不会back。这一块应该是有想法的，但在特定情况下会有bug，因为我们项目就遇到了–但我暂时无法用语言总结出出现的场景。</p>
<p><a href="http://www.jianshu.com/p/d417f7bdc511">无星的RN学习之旅（一）-环境安装以及新建项目</a><br><a href="http://www.jianshu.com/p/cd0cfa602963">无星的RN学习之旅（二）-RN与原生的通信</a><br><a href="http://www.jianshu.com/p/ea3484f54643">无星的RN学习之旅（三）-bridge is not set.</a><br><a href="http://www.jianshu.com/p/cccf744bdd8d">无星的RN学习之旅（四）——通信、持久化存储、xcode打包</a><br><a href="http://www.jianshu.com/p/42d9c668cbb1">无星的RN学习之旅（六）-第三方App跳转，苹果商店跳转，loading框</a></p>
]]></content>
      <categories>
        <category>react-native</category>
      </categories>
      <tags>
        <tag>react-native</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的RN学习之旅（六）-第三方App跳转，苹果商店跳转，loading框</title>
    <url>/2017/09/22/%E6%97%A0%E6%98%9F%E7%9A%84RN%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%EF%BC%88%E5%85%AD%EF%BC%89-%E7%AC%AC%E4%B8%89%E6%96%B9App%E8%B7%B3%E8%BD%AC%EF%BC%8C%E8%8B%B9%E6%9E%9C%E5%95%86%E5%BA%97%E8%B7%B3%E8%BD%AC%EF%BC%8Cloading%E6%A1%86/</url>
    <content><![CDATA[<p>#1.第三方App跳转<br>这是很常见的问题，第三方app跳转到本app去做一些业务操作。<br>但是这时候会发现，你跳进来，是黑色的，没有界面，没想到吧23333<br>其实这在前面说过，RN的想法很独特，是一个ctrl上放了无数个view，不停的更改view来渲染，而rn的首页view，则是在appdelegate的初始化方法里去添加的。跳转进来的处理方法里如果你不写，就不会有view添加进来。<br>所以这时候有两种方法来完成这个view的添加操作：<br>####A.在第三方跳转进来的方法里做视图加载操作，但是这会遇到一个问题。假使你使用了RN的启动页，你会发现每次跳转进来都会开启启动页。这对用户的体验明显是很不好的。<br>####B.自己创建一个UIViewCtrl，并作为根视图放进window中，在这个UIViewCtrl中做视图加载操作。这样跳转进来加载根视图的时候就会把这个RN的View给加载上去。而且根据生命周期场景复现的原则，不会再有加载第二次第三次的情况。</p>
<p>如图</p>
<p><img src="/images/RN6/1.png" alt="Appdelegate.m"></p>
<p><img src="/images/RN6/2.png" alt="RootViewCtrl.m"></p>
<p>另外，如果要跳到某一页面做某一操作，又不想重复跳，可以采用以下方式移除</p>
<p><img src="/images/RN6/3.png" alt="第三方跳转"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#pragma mark --第三方跳转进入这里(新)</span><br><span class="line">-(BOOL)application:(UIApplication *)application handleOpenURL:(NSURL *)url &#123;</span><br><span class="line">//  NSLog(@&quot;url ====%@&quot;,url);</span><br><span class="line">  thirdViewController *vc = [thirdViewController sharedthirdViewController];</span><br><span class="line">  vc.url = url;</span><br><span class="line">  </span><br><span class="line">  UIViewController *topViewCtrl = self.nav.topViewController;</span><br><span class="line">  if ([topViewCtrl isKindOfClass:[thirdViewController class]]) &#123;  //判断是否在最顶层</span><br><span class="line">    [vc thirdSign];</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">    [self.nav pushViewController:vc animated:YES];</span><br><span class="line">    [vc thirdSign];</span><br><span class="line">  &#125;</span><br><span class="line">  return YES;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>#2.应用升级苹果商店跳转<br>这个就很简单了啊，直接link：app在苹果商店的地址就行，至于怎么找app在苹果商店的地址，谷歌一下或百度一下都有。<br>#3.启动屏设置<br>采用了RN的启动页，你需要把原生的启动页稍作更改。把这个勾去掉</p>
<p><img src="/images/RN6/4.png" alt="把这里改一下"></p>
<p>#3.按钮点击封装防止二次点击<br>是不是有时候控件响应较慢，点击两次还以为没反应，结果却运行两次操作，感觉比较烦人。<br>这里贴出一个大佬给的方式，其实是采用定时器操作，只要有点击操作，做出事件处理，并开启定时器，在定时器时间内屏蔽其他的点击操作。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">珠海-星落  10:59:19</span><br><span class="line">你把 TouchOpacity外层做个封装</span><br><span class="line">珠海-星落  10:59:42</span><br><span class="line">然后以后不用TouchOpacity， 用你那个TouchOpacityOnce</span><br><span class="line"></span><br><span class="line">那如果要往TouchOpacity放组件的话，就用参数传进去吗？</span><br><span class="line">珠海-星落  11:01:36</span><br><span class="line">TouchOpacity怎么用 TouchOpacityOnce就怎么用</span><br><span class="line">珠海-星落  11:02:12</span><br><span class="line">把乱七八糟的props全传递给内部的TouchOpacity</span><br></pre></td></tr></table></figure>

<p><img src="/images/RN6/5.png" alt="代码如图"><br>#4.Loading框的展示<br>以前曾经使用RN提供的Modal类自己封装过一个网络加载等待框，但是放到网络请求中并不好用。会发现两个问题：<br>######a.时常唤起失败或者消失失败。<br>######b.导致应用卡死或锁屏无法操作。<br>可能是我modal的使用方式不对吧。<br>后来采用了一个新的方式：<br>使用原生的菊花，iOS用iOS的，安卓用安卓的。而且体验非常好，基本不会唤起失败，而且不用每个需要使用的地方都写控件，直接调用与原生交互module的show方法即可。<br>值得注意的是：<br>iOS建议采用GCD的主线程去完成这个菊花的show和dismiss操作，原因是UI刷新应当在主线程去做，唤起成功性也较大。</p>
<p><img src="/images/RN6/6.png" alt="附带一个Toast展示"><br>最后：感冒了，有没有好心人捐助一包板蓝根啊，要死了 (ಥ_ಥ) (ಥ_ಥ) (ಥ_ಥ) (ಥ_ಥ) (ಥ_ಥ) (ಥ_ಥ) (ಥ_ಥ) (ಥ_ಥ) (ಥ_ಥ)</p>
<p><a href="http://www.jianshu.com/p/d417f7bdc511">无星的RN学习之旅（一）-环境安装以及新建项目</a><br><a href="http://www.jianshu.com/p/cd0cfa602963">无星的RN学习之旅（二）-RN与原生的通信</a><br><a href="http://www.jianshu.com/p/ea3484f54643">无星的RN学习之旅（三）-bridge is not set.</a><br><a href="http://www.jianshu.com/p/cccf744bdd8d">无星的RN学习之旅（四）——通信、持久化存储、xcode打包</a><br><a href="http://www.jianshu.com/p/0c821a63852d">无星的RN学习之旅（五）-关于react-navigation多层级页面返回时，去掉逐层推出动画</a></p>
]]></content>
      <categories>
        <category>react-native</category>
      </categories>
      <tags>
        <tag>react-native</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的RN学习之旅（十一）-脚手架的解析</title>
    <url>/2018/11/11/%E6%97%A0%E6%98%9F%E7%9A%84RN%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89-%E8%84%9A%E6%89%8B%E6%9E%B6%E7%9A%84%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<p>我搭建了一个<a href="https://github.com/XingXiaoWu/react-native-template-wx">脚手架</a>,使用方式见readme.</p>
<p>以后再分析。。。。</p>
]]></content>
      <categories>
        <category>react-native</category>
      </categories>
      <tags>
        <tag>react-native</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的RN学习之旅（十）-一份不太严谨的入门教程</title>
    <url>/2018/11/10/%E6%97%A0%E6%98%9F%E7%9A%84RN%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%EF%BC%88%E5%8D%81%EF%BC%89-%E4%B8%80%E4%BB%BD%E4%B8%8D%E5%A4%AA%E4%B8%A5%E8%B0%A8%E7%9A%84%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>菜鸡，半个iOS开发，js了解不深入，见解不一定正确，有错指出，意会一下这个意思就行了，大牛就没必要看了、、、</p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>以下所有是基于mac的，Windows老哥只能参考着看了</p>
<p>cmd = ctrl ， option = alt</p>
<h2 id="一、环境安装"><a href="#一、环境安装" class="headerlink" title="一、环境安装"></a>一、环境安装</h2><p>其实官方的环境安装教程很简单，但也不排除有老哥看不懂，所以还是再赘述一下，下面是mac的傻瓜式环境安装教程（安装好了的不用看，windows老哥挑着看）</p>
<p>打开终端，我们开始了</p>
<h3 id="1-开启任意来源"><a href="#1-开启任意来源" class="headerlink" title="1.开启任意来源"></a>1.开启任意来源</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo spctl --master-disable</span><br></pre></td></tr></table></figure>
<p>输入mac的开机密码，敲回车（linux或类linux系统，输入密码不会提示输入了，界面是空白的，不要以为是键盘坏了或者没输入）</p>
<h3 id="2-安装homebrew"><a href="#2-安装homebrew" class="headerlink" title="2.安装homebrew"></a>2.安装homebrew</h3><h4 id="homebrew是mac上的包管理器，能非常方便的管理我们的各种环境和路径依赖，久了你就知道好处了。"><a href="#homebrew是mac上的包管理器，能非常方便的管理我们的各种环境和路径依赖，久了你就知道好处了。" class="headerlink" title="homebrew是mac上的包管理器，能非常方便的管理我们的各种环境和路径依赖，久了你就知道好处了。"></a>homebrew是mac上的包管理器，能非常方便的管理我们的各种环境和路径依赖，久了你就知道好处了。</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure>

<h3 id="3-安装nvm"><a href="#3-安装nvm" class="headerlink" title="3.安装nvm"></a>3.安装nvm</h3><h4 id="nvm是用来管理node版本的，如果直接使用brew安装node你会发现装的是最新版本（非稳定版），使用nvm可以很方便的管理本机的node环境"><a href="#nvm是用来管理node版本的，如果直接使用brew安装node你会发现装的是最新版本（非稳定版），使用nvm可以很方便的管理本机的node环境" class="headerlink" title="nvm是用来管理node版本的，如果直接使用brew安装node你会发现装的是最新版本（非稳定版），使用nvm可以很方便的管理本机的node环境"></a>nvm是用来管理node版本的，如果直接使用brew安装node你会发现装的是最新版本（非稳定版），使用nvm可以很方便的管理本机的node环境</h4><h4 id="方式一：brew安装-不推荐"><a href="#方式一：brew安装-不推荐" class="headerlink" title="方式一：brew安装(不推荐)"></a>方式一：brew安装(不推荐)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install nvm</span><br><span class="line"></span><br><span class="line">echo &quot;source $(brew --prefix nvm)/nvm.sh&quot; &gt;&gt; .bash_profile</span><br><span class="line"></span><br><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure>
<h4 id="方式二：curl安装"><a href="#方式二：curl安装" class="headerlink" title="方式二：curl安装"></a>方式二：curl安装</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash</span><br></pre></td></tr></table></figure>

<p>安装完毕以后输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//zsh的前往zsh环境变量修改（macOS 10.15以后默认为zsh）</span><br><span class="line">vi ~/.zshrc</span><br><span class="line">//bash的前往zsh环境变量修改</span><br><span class="line">vi ~/.bash_profile</span><br></pre></td></tr></table></figure>
<p>按i进入编辑，在后面粘贴如下环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="line">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; . &quot;$NVM_DIR/nvm.sh&quot;</span><br></pre></td></tr></table></figure>
<p>按esc 依次输入三个字符 : w q (冒号，w，q   中间不要有空格)</p>
<p>输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//bash</span><br><span class="line">source ~/.bash_profile</span><br><span class="line">//zsh</span><br><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure>
<p>运行完毕以后重启终端，输入nvm并回车，如果识别了nvm命令则nvm安装完毕</p>
<h3 id="4-使用nvm安装最新的node稳定版本"><a href="#4-使用nvm安装最新的node稳定版本" class="headerlink" title="4.使用nvm安装最新的node稳定版本"></a>4.使用nvm安装最新的node稳定版本</h3><p>打开终端输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm ls-remote</span><br></pre></td></tr></table></figure>
<p>查看最高的稳定版本（后面会有绿色字体标识lts）<br>输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm install 版本号</span><br></pre></td></tr></table></figure>
<p>例如： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm install v8.12.0</span><br></pre></td></tr></table></figure>
<p>安装完毕以后输入刚刚安装的版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm use 版本号</span><br></pre></td></tr></table></figure>
<p>例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm use v8.12.0</span><br></pre></td></tr></table></figure>
<p>完成以后，输入以下命令查看当前机子的node版本看与安装使用的是否一致</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>
<p>至此，node和npm安装完毕</p>
<h3 id="5-1安装nrm"><a href="#5-1安装nrm" class="headerlink" title="5.1安装nrm"></a>5.1安装nrm</h3><h4 id="nrm是管理源的，相信看过看多文章都说npm源切成淘宝源或者其他什么源。"><a href="#nrm是管理源的，相信看过看多文章都说npm源切成淘宝源或者其他什么源。" class="headerlink" title="nrm是管理源的，相信看过看多文章都说npm源切成淘宝源或者其他什么源。"></a>nrm是管理源的，相信看过看多文章都说npm源切成淘宝源或者其他什么源。</h4><p>打开终端输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g nrm</span><br></pre></td></tr></table></figure>
<p>安装完毕后输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nrm ls</span><br></pre></td></tr></table></figure>
<p>查看可用版本源</p>
<p>输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nrm use 源</span><br></pre></td></tr></table></figure>
<p>例如： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nrm use npm</span><br></pre></td></tr></table></figure>
<h3 id="5-2-2019-11-27更新"><a href="#5-2-2019-11-27更新" class="headerlink" title="5.2 2019-11-27更新"></a>5.2 2019-11-27更新</h3><p>安装cocoapods</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install cocoapods</span><br></pre></td></tr></table></figure>
<h4 id="注意：后续生成rn第一个项目的时候，pod-install可能需要一些时间，不是卡主，耐心等待就好"><a href="#注意：后续生成rn第一个项目的时候，pod-install可能需要一些时间，不是卡主，耐心等待就好" class="headerlink" title="注意：后续生成rn第一个项目的时候，pod install可能需要一些时间，不是卡主，耐心等待就好"></a>注意：后续生成rn第一个项目的时候，pod install可能需要一些时间，不是卡主，耐心等待就好</h4><h3 id="6-安装react-native"><a href="#6-安装react-native" class="headerlink" title="6.安装react-native"></a>6.安装react-native</h3><p>打开终端依次输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install watchman</span><br></pre></td></tr></table></figure>
<p>Watchman是由Facebook提供的监视文件系统变更的工具。安装此工具可以提高开发时的性能（packager 可以快速捕捉文件的变化从而实现实时刷新）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install yarn --without-node</span><br></pre></td></tr></table></figure>
<p><del>安装yarn，用于react-native的包管理依赖（npm和yarn的区别可以自行百度），上面我们已经安装了nvm控制node，所以这里安装yarn的时候不要安装node，记得加上–without-node</del><br>2019-3-12更新<br>可能有大哥执行这一步报错,原因是brew更新了,移除了这些可选项.<br>建议切换命令如下进行忽略</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install yarn --ignore-dependencies</span><br></pre></td></tr></table></figure>
<p>git地址:<a href="https://github.com/yarnpkg/yarn/issues/6946">https://github.com/yarnpkg/yarn/issues/6946</a><br><br></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g react-native-cli</span><br></pre></td></tr></table></figure>
<p>安装react-native-cli，是一个脚手架，方便进行react-native的一些命令操作</p>
<p>至此，react-native环境安装完毕</p>
<h2 id="二、开发工具下载"><a href="#二、开发工具下载" class="headerlink" title="二、开发工具下载"></a>二、开发工具下载</h2><table>
<thead>
<tr>
<th align="center">Xcode</th>
<th align="center">Android Studio</th>
<th align="center">Chrome</th>
<th align="center">VSCode/Webstrom</th>
</tr>
</thead>
<tbody><tr>
<td align="center">iOS开发必备</td>
<td align="center">安卓开发必备</td>
<td align="center">调试必备</td>
<td align="center">js开发必备</td>
</tr>
<tr>
<td align="center">这里就不给下载链接了，自己下去吧</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<h2 id="三、创建第一个项目"><a href="#三、创建第一个项目" class="headerlink" title="三、创建第一个项目"></a>三、创建第一个项目</h2><h3 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1.创建项目"></a>1.创建项目</h3><p>打开终端,cd到桌面目录下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd Desktop/</span><br></pre></td></tr></table></figure>
<p>创建你的第一个App（默认是最新版本，写这篇文章的时候最新版本是0.57.4版本）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">react-native init FirstApp</span><br></pre></td></tr></table></figure>
<p>如果你想创建一个指定版本,例如0.57.4版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">react-native init FirstApp --version 0.57.4</span><br></pre></td></tr></table></figure>


<p><img src="/images/RN10/1.png" alt="开始下载安装react-native"></p>
<p><img src="/images/RN10/2.png" alt="开始安装react和jest"></p>
<p>从图中我们可以看到，整个安装做了三件事</p>
<p>安装react-native，安装react，安装jest</p>
<p>安装完的图就不截了，没钱办网，流量挺贵的。。。</p>
<p>我们现在安装完了，开始运行。</p>
<h3 id="2-运行项目"><a href="#2-运行项目" class="headerlink" title="2.运行项目"></a>2.运行项目</h3><p>有2种运行方式</p>
<h4 id="1-使用命令行启动项目"><a href="#1-使用命令行启动项目" class="headerlink" title="1.使用命令行启动项目"></a>1.使用命令行启动项目</h4><p>1.cd到项目根目录下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /Users/mac/Desktop/FirstApp   </span><br></pre></td></tr></table></figure>
<p>2.启动iOS</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">react-native run-ios</span><br></pre></td></tr></table></figure>
<p>启动安卓(安卓需要自行安装安卓模拟器，或者链接真机)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">react-native run-android</span><br></pre></td></tr></table></figure>

<h4 id="2-使用Xcode或者Android-Studio（以下简称AS）启动。（推荐）"><a href="#2-使用Xcode或者Android-Studio（以下简称AS）启动。（推荐）" class="headerlink" title="2.使用Xcode或者Android Studio（以下简称AS）启动。（推荐）"></a>2.使用Xcode或者Android Studio（以下简称AS）启动。（推荐）</h4><p><img src="/images/RN10/3.png" alt="项目文件夹"><br>从图中可以看到，项目下面有两个命名为Android和iOS的文件夹，里面分别放着安卓和iOS工程，所有的起源，就是这两个目录。这里我们以iOS举例（安卓的我就不讲了，毕竟也不会emmm）</p>
<p>我们双击打开xcodeproj，就可以从xcode启动项目了。</p>
<h4 id="3-项目文件大致说明"><a href="#3-项目文件大致说明" class="headerlink" title="3.项目文件大致说明"></a>3.项目文件大致说明</h4><p><img src="/images/RN10/4.png" alt="图解"></p>
<p>看图应该都能看明白</p>
<p>下面我们对各文件大致进行说明。<br>分别用xcode和webstrom（vscode）打开项目文件</p>
<h4 id="（1）app-json"><a href="#（1）app-json" class="headerlink" title="（1）app.json"></a>（1）app.json</h4><p><img src="/images/RN10/5.png" alt="app.json文件"></p>
<hr>
<h4 id="（2）package-json"><a href="#（2）package-json" class="headerlink" title="（2）package.json"></a>（2）package.json</h4><p>类似iOS中常用的三方库管理工具cocoapods的profile文件，用于三方库的管理。<br><img src="/images/RN10/6.png" alt="package.json文件"><br>从图中可以看到，有很多东西，我们一个个说</p>
<p>name，version，private，这三个应该不用我说。。不知道也没关系，不影响你的开发</p>
<h3 id="scripts"><a href="#scripts" class="headerlink" title="scripts"></a>scripts</h3><p>脚本，在开发过程中我们可能会输入各种常用命令，比如启动node服务、iOS的bundle包打包、安卓的apk打包、eslint的代码检查等，每次记那么一堆命令烦都烦死了，这时候就可以用到这个脚本了，你可以将一些常用命令放到这里，并赋予一个缩写单词，执行的时候只要在项目根目录下输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run 缩写</span><br></pre></td></tr></table></figure>
<p>来执行相关命令。在这里我写一个常用命令<br>iOS的bundle包打包命令（可查看文章<a href="https://juejin.im/post/5bc08bc56fb9a05ce7518583">无星的RN学习之旅（七）——iOS打包（图文教程版）</a>）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">react-native bundle --entry-file index.js --bundle-output ./ios/bundle/index.jsbundle --platform ios --assets-dest ./ios/bundle --dev false</span><br></pre></td></tr></table></figure>
<p>可以将这个命令粘贴到scripts中，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">   &quot;start&quot;: &quot;node node_modules/react-native/local-cli/cli.js start&quot;,</span><br><span class="line">   &quot;test&quot;: &quot;jest&quot;,</span><br><span class="line">   &quot;iosbundle&quot;: &quot;react-native bundle --entry-file index.js --bundle-output ./ios/bundle/index.jsbundle --platform ios --assets-dest ./ios/bundle --dev false&quot;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>
<p>执行的时候，只需要输入如下命令即可完成打包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run iosbundle</span><br></pre></td></tr></table></figure>
<h3 id="dependencies"><a href="#dependencies" class="headerlink" title="dependencies"></a>dependencies</h3><h4 id="开发过程中用到的三方库的依赖管理"><a href="#开发过程中用到的三方库的依赖管理" class="headerlink" title="开发过程中用到的三方库的依赖管理"></a>开发过程中用到的三方库的依赖管理</h4><p>各位肯定在git上下载过各种项目，下载下来第一件事就是做npm install或者是yarn</p>
<p>其实就是下载这里标记的三方库。且这里标记的三方库会打入到正式包中。</p>
<p>我们在其中的版本有时候经常能看见^,这个^有什么作用可以百度一下，不做延展。</p>
<h3 id="devDependencies"><a href="#devDependencies" class="headerlink" title="devDependencies"></a>devDependencies</h3><p>下载包的时候，使用npm和yarn命令下载，有的时候会添加–dev，例如eslint（大部分公司都会使用这个进行代码风格控制<a href="https://juejin.im/post/5ba6216af265da0ac726f6d2">无星的RN学习之旅（九）-ESLint引入</a>），这些三方库只在开发过程中需要用到，没必要打包到正式包中增加体积。</p>
<p>这些只在开发过程中使用而不需要打包到正式包中的库，下载时记得添加–dev，最后会被标记到devDependencies这个下面</p>
<h3 id="jest"><a href="#jest" class="headerlink" title="jest"></a>jest</h3><p>jest本身是一个测试库，可以理解为执行单元测试的一个三方库，具体作用可以百度，这里不做延展。</p>
<hr>
<h4 id="（3）yarn-lock"><a href="#（3）yarn-lock" class="headerlink" title="（3）yarn.lock"></a>（3）yarn.lock</h4><p>上面留了个坑，查询dependencies版本中的^的作用，yarn.lock与此有关，百度了的同学一定知道是什么作用</p>
<h4 id="（4）-node-modules"><a href="#（4）-node-modules" class="headerlink" title="（4）.node_modules"></a>（4）.node_modules</h4><p>所有的三方库的源文件都在这个文件夹中，react-native，react都是作为三方库的框架在整个app中，所以在node_modules你也能看见它们。和原生项目的三方库引入一样，这里引入的三方库，经过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">react-native link</span><br></pre></td></tr></table></figure>
<p>link以后，会被添加到各自原生项目的三方库依赖中，比如在iOS中你会发现，引入的三方库在librarys下面都能找到。</p>
<p>（一般情况下，npm和yarn进行三方库下载的时候会自动执行link操作，如果没执行的话就自己手动执行一次）</p>
<p><img src="/images/RN10/7.png" alt="如图"><br>所以如果项目执行中出现<br>library -link xxxx not found</p>
<p>可以先看看报错的库自己是否用，是否在这里引入link了。</p>
<h4 id="（5）-webstrom打开文件，你还能看见一个-babelrc的文件"><a href="#（5）-webstrom打开文件，你还能看见一个-babelrc的文件" class="headerlink" title="（5）.webstrom打开文件，你还能看见一个.babelrc的文件"></a>（5）.webstrom打开文件，你还能看见一个.babelrc的文件</h4><p>这个文件是个编译器文件（好像是），具体可以百度一下，一般情况下用不上，如果碰到三方库需要做什么配置的，三方库的说明文档一定会写明如何配置。这里也不多说了（因为我也不会，emmmm）</p>
<h4 id="（6）-Android文件夹，不提，因为不懂"><a href="#（6）-Android文件夹，不提，因为不懂" class="headerlink" title="（6）.Android文件夹，不提，因为不懂"></a>（6）.Android文件夹，不提，因为不懂</h4><h4 id="（7）-iOS文件夹（不是iOS开发可以不用看，直接跳过）"><a href="#（7）-iOS文件夹（不是iOS开发可以不用看，直接跳过）" class="headerlink" title="（7）.iOS文件夹（不是iOS开发可以不用看，直接跳过）"></a>（7）.iOS文件夹（不是iOS开发可以不用看，直接跳过）</h4><p>里面放的是iOS的原生项目，其实rn就是在原生项目里面套了个壳子，其他都是view在不停滑动（可以看下<a href="https://juejin.im/post/5bc089915188255c4a7145e1">无星的RN学习之旅（四）——通信、持久化存储、iOS打包</a>这里面记录了一些感想，文章名字是后改的，emmm）</p>
<p>打开iOS项目AppDelegate.m中就是一切的开始</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Copyright (c) 2015-present, Facebook, Inc.</span><br><span class="line"> *</span><br><span class="line"> * This source code is licensed under the MIT license found in the</span><br><span class="line"> * LICENSE file in the root directory of this source tree.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">#import &quot;AppDelegate.h&quot;</span><br><span class="line"></span><br><span class="line">#import &lt;React/RCTBundleURLProvider.h&gt;</span><br><span class="line">#import &lt;React/RCTRootView.h&gt;</span><br><span class="line"></span><br><span class="line">@implementation AppDelegate</span><br><span class="line"></span><br><span class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions</span><br><span class="line">&#123;</span><br><span class="line">  NSURL *jsCodeLocation;</span><br><span class="line"></span><br><span class="line">  jsCodeLocation = [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@&quot;index&quot; fallbackResource:nil];</span><br><span class="line"></span><br><span class="line">  RCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation</span><br><span class="line">                                                      moduleName:@&quot;FirstApp&quot;</span><br><span class="line">                                               initialProperties:nil</span><br><span class="line">                                                   launchOptions:launchOptions];</span><br><span class="line">  rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];</span><br><span class="line"></span><br><span class="line">  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];</span><br><span class="line">  UIViewController *rootViewController = [UIViewController new];</span><br><span class="line">  rootViewController.view = rootView;</span><br><span class="line">  self.window.rootViewController = rootViewController;</span><br><span class="line">  [self.window makeKeyAndVisible];</span><br><span class="line">  return YES;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>懒得截图了，直接复制到这说。<br>jsCodeLocation，这就是rn的东西了，你可以把这当做rn的入口。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jsCodeLocation = [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@&quot;index&quot; fallbackResource:nil];</span><br></pre></td></tr></table></figure>
<p>第一个参数是项目中对应的js文件名，这里就是入口了，一般就写index，不做变动，因为项目初始化里面有个index。js，当然改动也无所谓，只要一一对应即可。index.js在下面讲</p>
<p>[RCTBundleURLProvider sharedSettings]点进去源码，你会发现其实得到一个本机内网ip地址，用来指向node服务开启后的文件源路径。</p>
<p>所以我们也可以自己改动一下，其实只要指向node服务的本地路径即可。<br>例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jsCodeLocation = [NSURL URLWithString:@&quot;http://xxx.xxx.xxx.xxx:8081/index.bundle?platform=ios&amp;dev=true&quot;];</span><br></pre></td></tr></table></figure>
<p>ip写自己的本地内网ip，8081是node服务的默认端口，如果你改动过就变成对应的端口，platform=ios，平台是ios平台，dev=true标识是开发状态。<br>这样也能正常连接上你的node服务。</p>
<p>如果使用codePush（热更新），那么自然会变成codePush上放置jsbundle文件的地址，入门教程，就不多谈了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation</span><br><span class="line">                                                      moduleName:@&quot;FirstApp&quot;</span><br><span class="line">                                               initialProperties:nil</span><br><span class="line">                                                   launchOptions:launchOptions];</span><br><span class="line">  </span><br></pre></td></tr></table></figure>
<p>看见这个moduleName了吗，还记得之前说的package.json文件中name和app.json中的name吗，记得一一对应。不然会报错。</p>
<p>另外，实测，后面两个参数都可以是nil，依旧可以得出RCTRootView。因此可以自定义ctrl作为rootctrl，添加RCTRootView，不一定要放在appdelegate里。</p>
<p>另外</p>
<p><img src="/images/RN10/8.png" alt="image"><br>这里有一个脚本，作用是干啥的，可以百度一下，埋个坑不填，从0.4几老版本升级上来的同学一定改动过（我说的是升级不是迁移）。</p>
<h4 id="（8）-index-js"><a href="#（8）-index-js" class="headerlink" title="（8）.index.js"></a>（8）.index.js</h4><p>上面iOS文件夹项目的解析中说了，这是对应的rn文件入口。相信有些同学看过其他的rn教程，里面写的可能都是index.ios.js或者index.android.js。其实都是一个东西，在0.4几的版本中将其合并了，变成了index.js。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/** @format */</span><br><span class="line"></span><br><span class="line">import &#123;AppRegistry&#125; from &#x27;react-native&#x27;;</span><br><span class="line">import App from &#x27;./App&#x27;;</span><br><span class="line">import &#123;name as appName&#125; from &#x27;./app.json&#x27;;</span><br><span class="line"></span><br><span class="line">AppRegistry.registerComponent(appName, () =&gt; App);</span><br></pre></td></tr></table></figure>
<p>AppRegistry.registerComponent，从名字我们也能看出来，这是App的注册入口,点进去粗略的我们看下</p>
<p><img src="/images/RN10/9.png" alt="image"><br>一共三个参数，string型，component，布尔型(可选)，第一个传了appName是个sting型，第二个肯定传的是component。</p>
<hr>
<p>这时候应该有同学要提出两个问题，()=&gt;是啥？component又是啥？</p>
<h3 id="gt-是啥？"><a href="#gt-是啥？" class="headerlink" title="()=&gt;是啥？"></a>()=&gt;是啥？</h3><p>()=&gt;是个箭头函数，ES6语法，后面常常跟一个方法体，不跟就理解为直接return 了一个对象。可以理解为就是一个方法，function(){}，前端中经常使用this（类似于iOS的self），一般得是当前类的实例化对象，如果在加了static的方法中（类方法）使用this，指的就是类本身。</p>
<p>this的作用域问题（iOS在block中用self有时候self指向的也不是当前类这个问题）肯定经常有人吃亏，一有两种解决方式：<br>1使用bind来解决2.使用箭头函数</p>
<p>所以箭头函数就是能解决this作用域问题的一个function。</p>
<h3 id="component又是啥？"><a href="#component又是啥？" class="headerlink" title="component又是啥？"></a>component又是啥？</h3><p>前端肯定知道啥是component，不提。</p>
<p>iOS同学，把他当做webkit框架，所有的UI控件有关的东西都继承自它。</p>
<p>安卓同学不知道，所有的UI控件有关的东西都继承自它。</p>
<hr>
<p>闲话少扯，我们回到之前的地方</p>
<p>一共三个参数，string型，component，布尔型(可选)，第一个传了appName是个sting型，第二个肯定传的是component我们看到，是return了一个APP。</p>
<p>细心的朋友注意到，import的东西有的加了{}，有的没加，我们等会说这个。</p>
<h4 id="（9）-App-js"><a href="#（9）-App-js" class="headerlink" title="（9）.App.js"></a>（9）.App.js</h4><p><img src="/images/RN10/10.png" alt="image"></p>
<p>语法，css，这些不讲，自己查文档就能搞定。</p>
<p>export，导出，所有在外部引用的东西，都需要用export这个关键字进行导出。</p>
<p>export default，默认导出。</p>
<p>这时候可以回答上面那个问题，没有加default的，需要用{}包裹，且导出的名字和import的名字一一对应。添加了default的，不需要用{}包裹，且可以改名字，任意改名都指向默认导出的东西。</p>
<p>所以我个人习惯使用export不加default，因为名字和导出名一一对应，代码阅读更加清晰。看个人习惯使用哪一种。</p>
<p>我们可以看见，App继承自自component，return了一个大UI组件（return只能return一个组件，因此最外层必须用一个组件来包裹）。这和前面的要求类型相符合。没问题。</p>
<p>因此你可以在这里进行任意页面的更改。打开模拟器</p>
<p>Windows用户使用ctrl代替cmd</p>
<p>(ios)cmd+r进行刷新<br>(安卓)cmd+m选reload 进行刷新</p>
<p>会即时的将更改展现在你的页面上。</p>
<p>整个新项目就解析完毕</p>
<h3 id="四，如何debug"><a href="#四，如何debug" class="headerlink" title="四，如何debug"></a>四，如何debug</h3><p>安装Chrome以后</p>
<p>运行项目，项目启动以后，在模拟器的界面上</p>
<p>ios cmd+d  安卓 cmd+m 选择第二个选项，进行debug，chrome会自动启动。</p>
<p>谷歌浏览器启动，等待模拟器项目启动完毕cmd+j，选择source，侧边栏出现的就是本次app启动的文件，可以进行debug了。</p>
]]></content>
      <categories>
        <category>react-native</category>
      </categories>
      <tags>
        <tag>react-native</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的RN学习之旅（四）——通信、持久化存储、iOS打包</title>
    <url>/2017/08/27/%E6%97%A0%E6%98%9F%E7%9A%84RN%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94%E9%80%9A%E4%BF%A1%E3%80%81%E6%8C%81%E4%B9%85%E5%8C%96%E5%AD%98%E5%82%A8%E3%80%81iOS%E6%89%93%E5%8C%85/</url>
    <content><![CDATA[<p>说说最近项目的一些感想吧。</p>
<p>###一、RN的创意<br>RN其实我觉得是一个很有创意的想法。不知道各位写RN项目的时候，有没有打开Xcode看过app的层级关系，我发现RN的这个想法，真的很有创意。<br>作为一名原生的开发，一直都是一个控制器上放一个View，然后在这个底层的View上添加UI控件，当需要一个新的视图的时候，创建一个新的视图控制器，再放新的View。<br>###重点来了！RN并不是这么做的</p>
<p><img src="/images/RN4/1.png" alt="根视图.png"><br>RN是将App创建的时候生成的根视图控制器，也就是底层的视图控制器，作为根本，然后通过JS文件写的视图，也就是View，不停的增加在这个rootViewCtrl上，进行覆盖替换。<br>###二、Text的区别<br>或许有的兄弟还没遇到这个坑，假如使用图片或者其他背景色作为背景，往上添加Text标签的时候，安卓默认为透明背景色，但是苹果默认为灰白色。因此，在写App的时候，需要在Text的样式添加backgroundColor为transparent</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">backgroundColor:&#x27;transparent&#x27;,</span><br></pre></td></tr></table></figure>
<p>###三、原生与RN的通信<br>以前对原生与RN的通信不太了解。现在有了一些想法。<br>1.callback的通信方式，是会返回一个callback，这个callback是可以保存的，也就是说这个返回结果可以保存再用的。<br>2.promise，这个就比较有趣了，形象的说，这是个“通道”，RN的方法中，放一个promise的参数，在原生的module中，可以先定义几个promise的回调，在不同的地方用。<br>举个例子，我在RN中写几个方法。分别是：调用A方法，调用B方法，调用C方法，调用D方法。都是带Promise的。</p>
<p><img src="/images/RN4/2.png" alt="promise.png"><br>（lz是iOS开发，iOS中可以先声明几个变量）在iOS的module中，可以先声明几个promise的回调。比如先声明</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> RCTPromiseResolveBlock resolveA</span><br><span class="line"> RCTPromiseResolveBlock resolveB</span><br><span class="line"> RCTPromiseResolveBlock resolveC</span><br><span class="line"> RCTPromiseResolveBlock resolveD</span><br><span class="line"></span><br><span class="line">RCTPromiseRejectBlock rejectA</span><br><span class="line">RCTPromiseRejectBlock rejectB</span><br><span class="line">RCTPromiseRejectBlock rejectC</span><br><span class="line">RCTPromiseRejectBlock rejectD</span><br></pre></td></tr></table></figure>
<p>这四个回调的函数可以先声明，为什么会叫他通道，原因就是它其实可以这么理解，你将本来理解可能混乱的东西专一化，定义一个A方法成功的回调resolveA和一个A方法失败的回调rejectA，这两个回调只用于A方法。这么理解起来是不是清晰多了。因此可以理解为他是一个原生回调给RN的通信通道。<br>3.原生直接发消息，通过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[self sendEventWithName:@&quot;EventReminder&quot; body:@&#123;@&quot;name&quot;: eventName&#125;];</span><br></pre></td></tr></table></figure>
<p>这种方式注意了，请使用单例。</p>
<p><img src="/images/RN4/3.png" alt="单例.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#pragma mark -- RCTEventEmitter类单例</span><br><span class="line">+ (id)allocWithZone:(NSZone *)zone &#123;</span><br><span class="line">  static RNBridge *sharedInstance = nil;</span><br><span class="line">  static dispatch_once_t onceToken;</span><br><span class="line">  dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">    sharedInstance = [super allocWithZone:zone];</span><br><span class="line">  &#125;);</span><br><span class="line">  return sharedInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不然可能会报bridge为空。<br>详情可见<br><a href="http://www.jianshu.com/p/ea3484f54643">无星的RN学习之旅（三)</a><br>###四、RN与webView中html的通信<br>这块我感觉有坑，但因为html不是强项，因此交给我们前端去做了。按官网的标准，使用onMessage()发送的消息在html中经常接受不到，不知道是为什么，希望有知道的旁友可以教教我=。=<br>###五、debug是个坑！！！<br>在我使用真机调试的时候，经常报找不到资源，这时候需要将appdelegate的j什么什么的我给忘了- -明天去公司复制一下代码。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  jsCodeLocation = [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@&quot;index.ios&quot; fallbackResource:nil];</span><br><span class="line">//  jsCodeLocation = [NSURL URLWithString:@&quot;http://自己的ip地址/index.ios.bundle?platform=ios&amp;dev=true&quot;];</span><br></pre></td></tr></table></figure>
<p>需要把地址更换为ip地址，注意，debug模式，手机和电脑必须处于同一个网段下。差不多就是这个地方来回换，总能debug进去。</p>
<p>当点击事件报错的时候，注意一下飘红信息，有的是debug模式的错误，忽略即可。<br>等明天上班再上图。。。这个地方的图有点难搞了。。。调试出错了我再截图回头放上来<br>###五、RN的持久化存储，AsyncStorage<br>其实这一块是我旁边的安卓大佬写的，我没啥了解的，我要说的也不是如何存储。。<br>我要说的是取出。先说下可能出现的应用场景：<br>在App初始化的时候，可能需要从本地取储存的数据，iOS原生开发都是在沙盒里存储，安卓也有对应的地方去存储。但现在换RN了，可能有的老哥就不知道咋办了。<br>其实不管那些乱七八糟的，RN的存储也是基于原生去封装的。就iOS来说，数据其实还是存在沙盒中，位于Documents文件夹下，会默认创建一个名为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RCTAsyncLocalStorage_V1</span><br><span class="line">````</span><br><span class="line">的文件夹，其中有个默认名为</span><br></pre></td></tr></table></figure>
<p>manifest.json</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">的文件，因此就可以直接读取出来。</span><br><span class="line">这里给大家一个查看真机沙盒的方法：</span><br><span class="line"></span><br><span class="line">![1.png](/images/RN4/4.png)</span><br><span class="line">![2](http://upload-images.jianshu.io/upload_images/3259244-0a5725eb02c3748f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br><span class="line">![3](/images/RN4/5.png)</span><br><span class="line"></span><br><span class="line">![4.png](/images/RN4/6.png)</span><br><span class="line">显示包内容，这样就能下载真机的沙盒地址了</span><br><span class="line">不过这里要注意了，里面存的json，都不是正儿八经的json。。。会多很多的转义符\和双引号单引号。这里我的推荐做法是先用json解析成字典，在对其进行特殊符号的去除操作（明天上代码- -）。如下：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>#pragma mark – JSON转字典<br>+(NSDictionary *)jsonToDic:(NSString *)jsonString {<br>  NSData *jsonData = [jsonString dataUsingEncoding:NSUTF8StringEncoding];<br>  NSError *error = nil;<br>  id jsonObject = [NSJSONSerialization JSONObjectWithData:jsonData<br>                                                  options:NSJSONReadingAllowFragments<br>                                                    error:&amp;error];<br>  if (jsonObject != nil &amp;&amp; error == nil){<br>    return jsonObject;<br>  }else{<br>    // 解析错误<br>    return nil;<br>  }<br>}</p>
<p>#pragma mark – 去除RN存储数据解析后的字符串含有 “ 和 转义符<br>+(NSString*)removeEscapeCharacter:(NSString*)string{<br>//  首先自己定义一个NSCharacterSet, 包含需要去除的特殊符号<br>  NSCharacterSet <em>set = [NSCharacterSet characterSetWithCharactersInString:@”@/：；（）¥「」＂、[]{}#%-</em>+=<em>\|~＜＞$€^•‘@#$%^&amp;*()</em>+’&quot;“];</p>
<p>  NSString *responseString = [string stringByTrimmingCharactersInSet:set];</p>
<p>  return responseString;<br>}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这是我能想到的最好办法了，如果还有大佬有更高级的方法，麻烦告诉一声~~</span><br><span class="line">###六：（伪）modal与alert冲突</span><br><span class="line">为什么要说一个伪字呢，因为我发现，似乎不是冲突，而是在某些情况下modal的弹窗或者alert的弹窗会导致应用卡死，应该算是一个bug吧。就比如做跳转webview的时候alert等情况下。。想了一下，这个地方的代码不太好上，还是等各位自己遇到吧。。。。</span><br><span class="line">###七：debug产生的奇怪效果</span><br><span class="line">1.原生的UI优先级会更高：当你某个效果跳转展现原生UI的时候，你进行reload，你会发现应用重新刷新，但是页面却仍然是原生的页面再最上层，这个原生的UI是不会进行reload的。。这时候只能重启服务来重新打开app</span><br><span class="line">2.modal视图层在最上面。你也可以试试弹一个modal，reload也不会刷新这个modal。</span><br><span class="line">###八：iOS打包</span><br><span class="line">cd到项目目录下</span><br><span class="line">然后手动在项目目录下的iOS文件夹创建一个bundle文件夹</span><br><span class="line"></span><br><span class="line">![如图](/images/RN4/7.png)</span><br><span class="line"></span><br><span class="line">然后打开命令行，输入</span><br></pre></td></tr></table></figure>
<p>react-native bundle –entry-file index.ios.js –bundle-output ./ios/bundle/index.ios.jsbundle –platform ios –assets-dest ./ios/bundle –dev false</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">执行完毕之后，你就发现bundle文件夹下就多了静态资源文件。</span><br><span class="line">但注意了，只有require导入的图片资源会被放进来</span><br><span class="line">静态网页的css样式之类的，资源可能不会被放进来，这时候怎么办？答案是手动导入。</span><br><span class="line"></span><br><span class="line">暂时就想到这么多，等项目完成了再进行一下经验完善~~~</span><br><span class="line"></span><br><span class="line">2017-11-17</span><br><span class="line">如果你使用上面的打包报错，报错信息为</span><br></pre></td></tr></table></figure>
<p>error: options ‘–entry-file’ missing</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">请使用以下命令打包:</span><br></pre></td></tr></table></figure>
<p>react-native bundle –platform ios –entry-file index.ios.js –bundle-output ./ios/bundle/index.ios.jsbundle –assets-dest ./ios/bundle –dev false</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">新版本0.5版本以上（没有index.ios.js的）用下面这个，其实就是改了一丢丢</span><br></pre></td></tr></table></figure>
<p>react-native bundle –entry-file index.js –bundle-output ./ios/bundle/index.jsbundle –platform ios –assets-dest ./ios/bundle –dev false</p>
<p>```<br>转载请说明来自：<a href="http://www.jianshu.com/u/fef7696741c8">http://www.jianshu.com/u/fef7696741c8</a></p>
<p><a href="http://www.jianshu.com/p/d417f7bdc511">无星的RN学习之旅（一）-环境安装以及新建项目</a><br><a href="http://www.jianshu.com/p/cd0cfa602963">无星的RN学习之旅（二）-RN与原生的通信</a><br><a href="http://www.jianshu.com/p/ea3484f54643">无星的RN学习之旅（三）-bridge is not set.</a><br><a href="http://www.jianshu.com/p/0c821a63852d">无星的RN学习之旅（五）-关于react-navigation多层级页面返回时，去掉逐层推出动画</a><br><a href="http://www.jianshu.com/p/42d9c668cbb1">无星的RN学习之旅（六）-第三方App跳转，苹果商店跳转，loading框</a></p>
]]></content>
      <categories>
        <category>react-native</category>
      </categories>
      <tags>
        <tag>react-native</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的RN学习之旅（八）-Mobx入门到放弃</title>
    <url>/2018/07/18/%E6%97%A0%E6%98%9F%E7%9A%84RN%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%EF%BC%88%E5%85%AB%EF%BC%89-Mobx%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/</url>
    <content><![CDATA[<p>写的都是自己的一些感受=。=可能都是野路子=。=大牛就别看了=。=<br>代码：<a href="https://github.com/XingXiaoWu/mobx-/tree/master">https://github.com/XingXiaoWu/mobx-/tree/master</a><br>先声明一句话：</p>
<p>#MobX 会对在追踪函数执行过程中读取现存的可观察属性做出反应。<br>以下所有内容基于rn0.56版本以前（即低于0.56），语法是ES6语法（可能有ES7，反正我是分不清=。=）<br>#一、引入Mobx<br>首先，安装yarn（别问我为什么不用npm）</p>
<p>##1.在项目根目录下输入<br>    yarn add mobx mobx-react<br>此命令作用：引入mobx和mobx-react<br>##2.在项目根目录下继续输入(看清楚你的版本选择命令)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//这是0.57以下的</span><br><span class="line">    yarn add babel-plugin-transform-decorators-legacy babel-preset-react-native-stage-0</span><br><span class="line">//这是0.57及以上的</span><br><span class="line">yarn add @babel/core --dev</span><br><span class="line">yarn add @babel/plugin-proposal-decorators --dev</span><br><span class="line">yarn add @babel/plugin-transform-runtime --dev</span><br><span class="line">yarn add @babel/runtime --dev</span><br></pre></td></tr></table></figure>
<p>此命令作用：能够使用@标签</p>
<p>##3.用IDE打开项目<br>打开.babelrc文件<br>修改为(看清楚版本)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//0.57以下</span><br><span class="line">&#123;</span><br><span class="line">    &quot;presets&quot;: [&quot;react-native&quot;],</span><br><span class="line">    &quot;plugins&quot;: [&quot;transform-decorators-legacy&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//0.57及以上</span><br><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [&quot;module:metro-react-native-babel-preset&quot;],</span><br><span class="line">  &quot;plugins&quot;: [</span><br><span class="line">    [&quot;@babel/plugin-proposal-decorators&quot;, &#123; &quot;legacy&quot;: true &#125;],</span><br><span class="line">    [&quot;@babel/transform-runtime&quot;, &#123;</span><br><span class="line">      &quot;helpers&quot;: true,</span><br><span class="line">      &quot;regenerator&quot;: false</span><br><span class="line">    &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>至此，如果没报错，环境配置完毕，可以正常使用mobx了<br>#二、mobx的常用标签<br>##1.定义observable<br>observable，顾名思义，可以被观察的，即被观察者<br>一般用于数据，几乎所有数据都可以被观察，无论是对象、数组、类。 循环数据结构、引用，都可以被观察，只要给他们打上@ observable的标签，他们都可以被观察。</p>
<p>我写了三种导出模式，相互的优劣和使用方式还需要琢磨<br>#ThingModel=&gt;static定义的，导出的是ThingModel这个class</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123;observable&#125; from &quot;mobx&quot;</span><br><span class="line"></span><br><span class="line">export class ThingModel &#123;</span><br><span class="line">    @observable</span><br><span class="line">    static thing = &quot;我是数据1&quot;</span><br><span class="line"></span><br><span class="line">   @action</span><br><span class="line">    static setThing(value) &#123;</span><br><span class="line">        ThingModel.thing = value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//使用</span><br><span class="line">ThingModel.thing</span><br><span class="line">ThingModel. setThing(xxx)</span><br></pre></td></tr></table></figure>
<p>导出的ThingModel可以理解为全局的，所有的属性和方法都挂载在ThingModel这个类上，因此不会被垃圾回收</p>
<p>#InitModel = &gt; 导出的是InitModel这个Class</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export class InitModel &#123;</span><br><span class="line">    @observable</span><br><span class="line">    firstValue = &quot;我是初始数据&quot;</span><br><span class="line"></span><br><span class="line">    @action</span><br><span class="line">    setFirstValue(value) &#123;</span><br><span class="line">        this.firstValue = value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//使用</span><br><span class="line">let initmodel = new InitModel()</span><br><span class="line">initmodel.firstValue</span><br><span class="line">initmodel.setFirstValue(xxx)</span><br></pre></td></tr></table></figure>
<p>导出的是InitModel，但是其内部所有的方法都是由实例调用的，所以在页面使用前需要对其做实例化，let initmodel = new InitModel()，然后通过initmodel去调用，由于不是单例，因此每个页面new得到的实例化也不一样，我们理解其为每个页面单独的model，一旦页面被销毁，其实例化会被垃圾回收，因此销毁页面后重新进来页面的时候，model是全新的。（<br>xx食堂使用的全是ThingModel类型，全都写了销毁时调用的初始化方法，可以对此做优化）。当然，如果对此类型的model做单例的初始化，则是另一回事（例如xx食堂中的urlModel）。</p>
<p>#SecondModel=&gt;导出的是SecondModel的实例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">class SecondModel &#123;</span><br><span class="line">    @observable</span><br><span class="line">    seconedValue = &quot;我是初始数据seconedValue&quot;</span><br><span class="line"></span><br><span class="line">    @action</span><br><span class="line">    setSeconedValue(value) &#123;</span><br><span class="line">        this.seconedValue = value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const secondSelf = new SecondModel()</span><br><span class="line"></span><br><span class="line">export default secondSelf</span><br><span class="line"></span><br><span class="line">//使用</span><br><span class="line">secondSelf.seconedValue</span><br><span class="line">secondSelf.setSeconedValue(xxxx)</span><br></pre></td></tr></table></figure>
<p>采用这种方式会发现，导出来的全是secondSelf这个已经被实例化的类，也是全局的。其数据可以在各个页面通用。</p>
<p>###1）observable修饰的东西其实都是对象<br>你会发现observable可以修饰的东西很多，基本类型，对象，数组等等都可以用observable修饰。但是注意了，大多数的时候，都会被转变成对象。<br>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@ observable</span><br><span class="line">array = []</span><br></pre></td></tr></table></figure>
<p>####正常情况下，这是一个数组，但是当你使用Array.isArray(array)做判断的时候，会发现的返回值都是false。<br>所以在使用的时候，如果你真的想得到一个数组，不妨使用slice方法创建一个真正的数组。<br>###2）如何创建动态对象并让属性变成可观察的？<br>实际开发过程中肯定经常碰到一些数据是要求动态创建的并且要求可观察。这时候建议使用 [Observable Map]对象。<br>因为普通的对象只有初始化时便存在的属性会转换成可观察的。虽然新添加的属性可以通过使用 extendObservable 转换成可观察的。但毕竟是还是麻烦。<br>###3）@ observable修饰的数组有哪些api</p>
<ul>
<li>  <code>intercept(interceptor)</code> - 可以用来在任何变化作用于数组前将其拦截。参见 <a href="https://cn.mobx.js.org/refguide/observe.html">observe &amp; intercept</a></li>
<li>  <code>observe(listener, fireImmediately? = false)</code> - 监听数组的变化。回调函数将接收表示数组拼接或数组更改的参数，它符合 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/observe">ES7 提议</a>。它返回一个清理函数以用来停止监听器。</li>
<li>  <code>clear()</code> - 从数组中删除所有项。</li>
<li>  <code>replace(newItems)</code> - 用新项替换数组中所有已存在的项。</li>
<li>  <code>find(predicate: (item, index, array) =&gt; boolean, thisArg?)</code> - 基本上等同于 ES7 的 <code>Array.find</code> 提议。</li>
<li>  <code>findIndex(predicate: (item, index, array) =&gt; boolean, thisArg?)</code> - 基本上等同于 ES7 的 <code>Array.findIndex</code> 提议。</li>
<li>  <code>remove(value)</code> - 通过值从数组中移除一个单个的项。如果项被找到并移除的话，返回 <code>true</code> 。（如果数组里面放了对象，是没法通过这种方式删掉的，亲测）</li>
<li>  <code>peek()</code> - 和 <code>slice()</code> 类似， 返回一个有所有值的数组并且数组可以放心的传递给其它库。</li>
</ul>
<p>与 <code>slice</code> 相反，<code>peek</code> 不创建保护性拷贝。如果你确定是以只读方式使用数组，请在性能关键的应用中使用此方法。 在性能关键的部分，还建议使用一个扁平的 <code>observable</code> 数组。<br>###4）@ observable修饰的map有哪些api（es提供的就没写，下面是mobx提供的）</p>
<ul>
<li>  <code>toJS()</code> - 将 observable 映射转换成普通映射。</li>
<li>  <code>toJSON()</code>. 返回此映射的浅式普通对象表示。(想要深拷贝，请使用 <code>mobx.toJS(map)</code>)。</li>
<li>  <code>intercept(interceptor)</code> - 可以用来在任何变化作用于映射前将其拦截。参见 <a href="https://cn.mobx.js.org/refguide/observe.html">observe &amp; intercept</a>。</li>
<li>  <code>observe(listener, fireImmediately?)</code> - 注册侦听器，在映射中的每个更改时触发，类似于为 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe">Object.observe</a> 发出的事件。想了解更多详情，请参见 <a href="https://cn.mobx.js.org/refguide/observe.html">observe &amp; intercept</a>。</li>
<li>  <code>merge(values)</code> - 把提供对象的所有项拷贝到映射中。<code>values</code> 可以是普通对象、entries 数组或者 ES6 字符串键的映射。</li>
<li>  <code>replace(values)</code> - 用提供值替换映射全部内容。是 <code>.clear().merge(values)</code> 的简写形式。</li>
</ul>
<p>##2.定义observer<br>observer，观察者。观察者观察被观察对象。<br>在mobx中，定义好观察者和被观察者以后，一旦被观察者发生变化，mobx会做如下操作：<br><img src="/images/RN8/5.png" alt="图5"></p>
<p>1.可观察值向其所有观察者发送过时通知，表明它已变得陈旧。任何受影响的计算值将以递归方式将通知传递给其观察者。因此，依赖关系树的一部分将被标记为陈旧。在图5的示例依赖关系树中，当值“1”改变时将变为陈旧的观察者用橙色虚线边框标记。这些都是可能受变化值影响的推导。<br>2.发送过时通知并存储新值后，将发送就绪通知。此消息还指示值是否确实更改。<br>3.一旦派生收到步骤1中收到的每个陈旧通知的就绪通知，它就会知道所有观察到的值都是稳定的并且它将开始重新计算。计算就绪/陈旧消息的数量将确保，例如，计算值’4’将仅在计算值’3’变得稳定之后重新评估。<br>4.如果没有任何就绪消息指示值已更改，则派生将简单地告诉其自己的观察者它已再次准备好，但不更改其值。否则，计算将重新计算并向其自己的观察者发送就绪消息。这导致执行的顺序如图5所示。注意（例如）如果计算值’4’重新评估但没有产生新值，那么最后一个反应（用’ - ‘标记）将永远不会执行。</p>
<p>关于使用：<br>一般用于视图的UI更新<br>例如在示例demo中<br><img src="/images/RN8/6.png" alt="将视图定义为观察者对象"></p>
<p>在视图中，使用被观察的数据，当该数据发生改变的时候，UI视图将会“自动”刷新（原理上面已经解释了）</p>
<p>##3.action<br>这个action就比较多了,先说效果<br>效果就是，使用action包裹的方法修改被观察者的值，可以触发观察者的刷新。（注意，只有当前状态，异步中的状态等是无法被action捕获的，可以在runInAction的例子中感受一下）</p>
<p>action: 创建一个动作<br>action.bound: 创建有范围的动作，不需要name函数，自动绑定上下文对象，不可与箭头函数同用，因为箭头函数已经绑定了（暂时找不到一个好例子，这有个例子，但我无法复现，自行体会一下吧<a href="https://segmentfault.com/q/1010000011520041%EF%BC%89">https://segmentfault.com/q/1010000011520041）</a><br>下面是官方的例子，应该更容易理解。主要是异步会产生的问题，建议使用bound修饰<br>官网的例子：<a href="https://cn.mobx.js.org/best/actions.html">https://cn.mobx.js.org/best/actions.html</a></p>
<p>一般情况下使用@action修饰被观察值的变化方法，注意，是：方法<br>下面是从中文网抄来的用法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.  action(fn)</span><br><span class="line">2.  action(name, fn)</span><br><span class="line">3.  @action classMethod</span><br><span class="line">4.  @action(name) classMethod</span><br><span class="line">5.  @action boundClassMethod = (args) =&gt; &#123; body &#125;</span><br><span class="line">6.  @action.bound boundClassMethod(args) &#123; body &#125;</span><br><span class="line">7.  runInAction    ps：action(name, fn)()的语法糖，常用于异步</span><br></pre></td></tr></table></figure>
<p>我们一个个说<br>1）action(fn)<br>这其实没啥说的，就是声明接下来会有一个动作，这个动作会触发被观察的值的改变，会触发观察者捕获到相应的改变并作出应该的动作（比如视图会刷新）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">action((value)=&gt;&#123;</span><br><span class="line">  ThingModel. thing = value</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>2）action(name, fn)<br>和上面那个一样，只是多了个name，name可以做调试别名，只是用过相关调试，换而言之对我来说其实是一个没什么用的值，可以说明你接下来这个函数是干嘛用的，使用方法同上<br>3）@action classMethod</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@action</span><br><span class="line">setThing(value)&#123;</span><br><span class="line">  ThingModel. thing = value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4.@action(name) classMethod</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@action(&#x27;name&#x27;)</span><br><span class="line">setThing(value)&#123;</span><br><span class="line">  ThingModel. thing = value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>5.@action boundClassMethod = (args) =&gt; { body }</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@action setFirstValueBoundName = （value）=&gt;&#123;</span><br><span class="line">        this.seconedValue = value</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>@action.bound<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@action.bound</span><br><span class="line">setFirstValueBound(value) &#123;</span><br><span class="line">    this.seconedValue = value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>runInAction<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//大家可以测试一下下面这三种写法</span><br><span class="line">1、正常</span><br><span class="line">@action</span><br><span class="line">    async setFirstValuePromise() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            let value = await this.getPromise()</span><br><span class="line">            console.log(&#x27;value = &#x27; + value)</span><br><span class="line">            runInAction(() =&gt; &#123;</span><br><span class="line">                this.seconedValue = value</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; catch (e) &#123;</span><br><span class="line">            console.log(e)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">2.报错</span><br><span class="line">@action</span><br><span class="line">    async setFirstValuePromise() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            let value = await this.getPromise()</span><br><span class="line">            console.log(&#x27;value = &#x27; + value)</span><br><span class="line">            this.seconedValue = value</span><br><span class="line">        &#125; catch (e) &#123;</span><br><span class="line">            console.log(e)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3.正常</span><br><span class="line">@action</span><br><span class="line">    async setFirstValuePromise() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            let value = await this.getPromise()</span><br><span class="line">            console.log(&#x27;value = &#x27; + value)</span><br><span class="line">            this.setFirstValue(value)</span><br><span class="line">        &#125; catch (e) &#123;</span><br><span class="line">            console.log(e)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">@action</span><br><span class="line">setFirstValue(value)&#123;</span><br><span class="line">  this.seconedValue = value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
从这个例子其实我们就能知道，action其实只会对“当前状态”的被观察对象的改变有触动。对一些已执行（比如：异步）的方法内的被观察值的改变无法知晓。<br>就如上述例子中，await后面的操作，action其实就无法捕捉了，这时候就需要对后面的执行方法用action包裹（例如第3种写法），或者使用runInAction语法糖（例如第1种写法）<br>#4.computed<br>这个比较有意思，一般用于修饰 与已经被监听的值有关，但又不想产生新值的东西。<br>举个简单例子<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@observable</span><br><span class="line">    number = 1</span><br><span class="line"></span><br><span class="line">    @action</span><br><span class="line">    setNumber(value) &#123;</span><br><span class="line">        this.number = value</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @observable</span><br><span class="line">    price = 1</span><br><span class="line"></span><br><span class="line">    @action</span><br><span class="line">    setPrice(value) &#123;</span><br><span class="line">        this.price = value</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @computed</span><br><span class="line">    get total() &#123;</span><br><span class="line">        return this.number * this.price</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
我定义了number和price，但我想要知道总价，这时候就可以使用computed修饰total方法了。注意，我说的是方法。<br>你看，total返回的东西 与被监听值有关，但是又不想产生新值。<br>使用的时候如下：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Text&gt;&#123;secondSelf.total&#125;&lt;/Text&gt;</span><br></pre></td></tr></table></figure>
和iOS类似，.语法指get，所以可以看见total方法中存在get 修饰符<br>至于set，是自动的，不用管。</li>
</ol>
<p>善于动手的同学会发现，用computed修饰的get方法和自己手动写一个没什么区别。<br>这里摘录一下区别：<a href="https://link.jianshu.com/?t=https://github.com/mobxjs/mobx/issues/161">https://github.com/mobxjs/mobx/issues/161</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Both solutions will exhibit the same behavior, but introducing @computed is better in the sense that it allows MobX to optimized it away more smartly.</span><br><span class="line"></span><br><span class="line">If getFullName is not computed, and you change firstName, everyone using getFullName will recompute as well.</span><br><span class="line"></span><br><span class="line">If, in contrast, @computed get fullName is used, the fullname is cached, so if the firstname is changed, the fullname is recomputed as well, but if the output of fullname doesn&#x27;t change, nobody would be notified.</span><br><span class="line"></span><br><span class="line">Also, if you read test.fullName somwhere, you will (usually) get a cached result back if decorated, while without decorator it would always be recomputed (which is the normal function behavior after all)</span><br><span class="line"></span><br><span class="line">So, when in doubt, use it (if your function is pure in terms of depending only on observable values, which it should be)</span><br><span class="line">简单翻译一下：</span><br><span class="line">首先这两者解决方法都会得到一个相同的结果，但使用@computed的意义在于它能够由MobX进行更智能的优化。</span><br><span class="line">如果我不使用computed属性，直接使用自定义的getTheValue函数的话，那么只要value改变，所有用到getTheValue函数的地方都将重新计算。</span><br><span class="line">如果使用了@computed get getValue，那么getValue将会被缓存，如果value没有改变，那么getValue也不会改变，其它组件也不会收到通知。</span><br><span class="line">此外如果你读取getValue的值，你通常会得到一个缓存的值，而不带@computed装饰器，则会重新计算……</span><br></pre></td></tr></table></figure>
<p>所以应该是有一个缓存的优化。</p>
<p>#5.autorun<br>可以理解为自动执行的方法，不过要搭配observable使用<br>使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class SecondModel &#123;</span><br><span class="line"></span><br><span class="line">    constructor()&#123;</span><br><span class="line">        autorun(()=&gt;&#123;</span><br><span class="line">            console.log(this.zhangsan.money)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @observable</span><br><span class="line">    zhangsan = &#123;</span><br><span class="line">        name: &#x27;zhangsan&#x27;,</span><br><span class="line">        age: 18,</span><br><span class="line">        money: 20</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @action</span><br><span class="line">    setZhangsan(value) &#123;</span><br><span class="line">        this.zhangsan = value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来你会发现，改变zhangsan的name，age，都不会有打印，唯独改变money会触发autorun的方法打印。<br>autorun中使用的被观察者属性改变会触发autorun的方法。<br>官方文档的经验法则：如果你有一个函数应该自动运行，但不会产生一个新的值，请使用autorun。 其余情况都应该使用 computed。 Autoruns 是关于 启动效果 (initiating effects) 的 ，而不是产生新的值。<br>不过确实不知道为什么会有这么一个经验法则。可能还需要经验积累<br>#6.when<br>和autorun差不多，他有两个参数，第一个参数的返回值如果是true则执行第二个参数<br>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">class SecondModel &#123;</span><br><span class="line"></span><br><span class="line">    constructor() &#123;</span><br><span class="line">        when(</span><br><span class="line">            () =&gt; &#123;</span><br><span class="line">                return this.zhangsan.money &gt; 30</span><br><span class="line">            &#125;,</span><br><span class="line">            () =&gt; &#123;</span><br><span class="line">                console.log(&#x27;张三有钱了&#x27;)</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">        autorun(() =&gt; &#123;</span><br><span class="line">            console.log(this.zhangsan.money)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @observable</span><br><span class="line">    zhangsan = &#123;</span><br><span class="line">        name: &#x27;zhangsan&#x27;,</span><br><span class="line">        age: 18,</span><br><span class="line">        money: 20</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @action</span><br><span class="line">    setZhangsan(value) &#123;</span><br><span class="line">        this.zhangsan = value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配合测试demo中修改张三的金钱，可以发现，当修改金钱大于30时，会打印出“张三有钱了”</p>
<p>#7.reaction<br>我找不到一个好的case去表现</p>
<p>#另外的一些东西：<br>##1）.MobX 会对什么作出反应?</p>
<p>MobX 通常会对你期望的东西做出反应。 这意味着在90％的场景下，mobx “都可以工作”。 然而，在某些时候，你会遇到一个情况，它可能不会像你所期望的那样工作。 在这个时候理解 MobX 如何确定对什么有反应就显得尤为重要。</p>
<p>MobX 会对在追踪函数执行过程中读取现存的可观察属性做出反应。</p>
<p>“读取” 是对象属性的间接引用，可以用过 . (例如 user.name) 或者 [] (例如 user[‘name’]) 的形式完成。<br>“追踪函数” 是 computed 表达式、observer 组件的 render() 方法和 when、reaction 和 autorun 的第一个入参函数。<br>“过程(during)” 意味着只追踪那些在函数执行时被读取的 observable 。这些值是否由追踪函数直接或间接使用并不重要。<br>换句话说，MobX 不会对其作出反应:</p>
<p>从 observable 获取的值，但是在追踪函数之外<br>在异步调用的代码块中读取的 observable<br>更详细：<a href="https://cn.mobx.js.org/best/react.html">https://cn.mobx.js.org/best/react.html</a></p>
<p>##2）.mobx和state是否能同时使用？<br>答案是：可以<br>而且你可以通过componentWillReact这个生命函数来看当前的刷新到底是由setstate引起的刷新还是由mobx变化引起的刷新。（没有引入mobx的组件是不会有这个生命周期的）<br>##3）. observer用多了是不是不好？<br>@observer 只会增强你正在装饰的组件，而不是内部使用了的组件。 所以通常你的所有组件都应该是装饰了的。但别担心，这样不会降低效率，相反 observer 组件越多，渲染效率越高。</p>
<p>#一些注意事项<br><a href="https://cn.mobx.js.org/best/pitfalls.html">https://cn.mobx.js.org/best/pitfalls.html</a></p>
]]></content>
      <categories>
        <category>react-native</category>
      </categories>
      <tags>
        <tag>react-native</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的electron之旅（七）——electron 图标资源</title>
    <url>/2020/12/22/%E6%97%A0%E6%98%9F%E7%9A%84electron%E4%B9%8B%E6%97%85%EF%BC%88%E4%B8%83%EF%BC%89%E2%80%94%E2%80%94electron%E5%9B%BE%E6%A0%87%E8%B5%84%E6%BA%90/</url>
    <content><![CDATA[<p>图标使用的地方非常多，打包生成exe的图标，运行时的图标，系统托盘的图标等等</p>
<p>这里我们先介绍几种格式：</p>
<p>png,jpg,icns,ico</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">png：是一种采用无损压缩算法的位图格式，兼容性好。</span><br><span class="line"></span><br><span class="line">jpg：JPG一般指JPEG格式。JPEG（Joint Photographic Experts Group）是JPEG标准的产物，该标准由国际标准化组织（ISO）制订，是面向连续色调静止图像的一种压缩标准。JPEG格式是最常用的图像文件格式，后缀名为.jpg或.jpeg。</span><br><span class="line"></span><br><span class="line">icns：一般是用来给application做resource的icon文件,也是macintosh系统里独特支持的格式。</span><br><span class="line"></span><br><span class="line">ico:ICO是Windows的图标文件格式，图标文件可以存储单个图案、多尺寸、多色板的图标文件。一个图标实际上是多张不同格式的图片的集合体，并且还包含了一定的透明区域。</span><br></pre></td></tr></table></figure>
<p>所以换句话说，icns是mac用的（有些时候linux也可以使用），ico是windows用的</p>
<h2 id="怎么制作这些图标？"><a href="#怎么制作这些图标？" class="headerlink" title="怎么制作这些图标？"></a>怎么制作这些图标？</h2><h3 id="1-首先，准备问美工要一个1024x1024的png图标"><a href="#1-首先，准备问美工要一个1024x1024的png图标" class="headerlink" title="1.首先，准备问美工要一个1024x1024的png图标"></a>1.首先，准备问美工要一个1024x1024的png图标</h3><h3 id="2-有两个库可以帮助我们"><a href="#2-有两个库可以帮助我们" class="headerlink" title="2.有两个库可以帮助我们"></a>2.有两个库可以帮助我们</h3><p><a href="https://github.com/jaretburkett/electron-icon-maker">electron-icon-maker</a></p>
<p><a href="https://github.com/safu9/electron-icon-builder">electron-icon-builder</a><br>具体使用说明请查看readme</p>
<ul>
<li>吐槽：这两个玩意都依赖PhantomJS这个无头浏览器，让我很是烦躁，这玩意一方面是不好用，另一方面下载贼麻烦，搞得我在Linux环境下使用Jenkins做持续集成，下载总下不下来，气死我了。<h2 id="各种情况的使用"><a href="#各种情况的使用" class="headerlink" title="各种情况的使用"></a>各种情况的使用</h2><h3 id="1-打包以后的图标"><a href="#1-打包以后的图标" class="headerlink" title="1.打包以后的图标"></a>1.打包以后的图标</h3>我这里使用的是vue+electron-builder打包。</li>
</ul>
<p><img src="/images/electron7/1.png" alt="1"></p>
<p>windows使用ico,mac使用icns,linux使用png或者icns</p>
<p><a href="https://www.electron.build/icons.html#linux">打包图标参考资料</a></p>
<h3 id="2-默认标题的图标"><a href="#2-默认标题的图标" class="headerlink" title="2.默认标题的图标"></a>2.默认标题的图标</h3><p><img src="/images/electron7/2.png" alt="2"></p>
<p>这里的图标，设置来自创建window时的icon属性设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new BrowserWindow(&#123;</span><br><span class="line">    ******</span><br><span class="line">    icon: path.join(__static, &#x27;logo.png&#x27;);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<p>但是这里在不同版本的electron上可能存在bug，因此建议使用nativeimage引入。建议此处引入区分不同系统，windows使用ico图标，其他系统使用png图标</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function getTrayIcon() &#123;</span><br><span class="line">  if (process.platform !== &#x27;darwin&#x27;) &#123;</span><br><span class="line">    // windows</span><br><span class="line">    return path.join(__static, &#x27;icon.ico&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line">  return path.join(__static, &#x27;icon.png&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">******</span><br><span class="line">new BrowserWindow(&#123;</span><br><span class="line">    ******</span><br><span class="line">    icon: nativeImage.createFromPath(getTrayIcon()),</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h1 id="托盘图标"><a href="#托盘图标" class="headerlink" title="托盘图标"></a>托盘图标</h1><p>同理，建议区分系统，另外mac上建议使用生成的16x16的图标（个人建议，没有资料引用）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tray = new Tray(nativeImage.createFromPath(getTrayIcon()));</span><br></pre></td></tr></table></figure>

<hr>
<p>—  2023.3.5更新 —</p>
<h1 id="最后附上：一行命令得到图标"><a href="#最后附上：一行命令得到图标" class="headerlink" title="最后附上：一行命令得到图标"></a>最后附上：一行命令得到图标</h1><p>我这里使用<code>pnpm</code>，使用<code>npm</code>的自行替换<code>pnpm dlx</code>为<code>npx</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pnpm dlx electron-icon-builder --input=已有图片路径 --output=输出路径 --flatten</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如</span></span><br><span class="line">pnpm dlx electron-icon-builder --input=./public/images/logo.jpeg --output=build --flatten</span><br></pre></td></tr></table></figure>
<p>—  2023.3.5更新 —</p>
<hr>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.electron.build/icons.html#linux">打包图标</a></p>
]]></content>
      <categories>
        <category>electron</category>
      </categories>
      <tags>
        <tag>electron</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的electron之旅（一）——创建Vue的electron项目</title>
    <url>/2020/08/28/%E6%97%A0%E6%98%9F%E7%9A%84electron%E4%B9%8B%E6%97%85%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%88%9B%E5%BB%BAVue%E7%9A%84electron%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><h2 id="1-使用脚手架正常创建项目"><a href="#1-使用脚手架正常创建项目" class="headerlink" title="1.使用脚手架正常创建项目"></a>1.使用脚手架正常创建项目</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vue create hello-world</span><br></pre></td></tr></table></figure>

<h2 id="2-集成electron"><a href="#2-集成electron" class="headerlink" title="2.集成electron"></a>2.集成electron</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vue add vue-cli-plugin-electron-builder</span><br></pre></td></tr></table></figure>
<p>不过这一步可能大多数同学可能卡在下载electron这，因为众所周知的原因，它需要很久</p>
<p>因此我们推荐使用国内源加速</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx cross-env ELECTRON_MIRROR=&quot;https://npm.taobao.org/mirrors/electron/&quot; vue add vue-cli-plugin-electron-builder</span><br></pre></td></tr></table></figure>
<p>这种方式能有效加速你的集成</p>
<h3 id="也可以创建-npmrc文件放在项目中"><a href="#也可以创建-npmrc文件放在项目中" class="headerlink" title="也可以创建.npmrc文件放在项目中"></a>也可以创建.npmrc文件放在项目中</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># .npmrc</span><br><span class="line">electron_mirror=&quot;https://npm.taobao.org/mirrors/electron/&quot;</span><br></pre></td></tr></table></figure>
<p>集成完毕以后</p>
<h2 id="3-运行"><a href="#3-运行" class="headerlink" title="3.运行"></a>3.运行</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run electron:serve</span><br></pre></td></tr></table></figure>

<h2 id="4-打包"><a href="#4-打包" class="headerlink" title="4.打包"></a>4.打包</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx run electron:build</span><br></pre></td></tr></table></figure>
<p>macos打包，需要忽略签名,修改electron:build</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;electron:build&quot;:&quot;npx cross-env CSC_IDENTITY_AUTO_DISCOVERY=false vue-cli-service electron:build&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>electron</category>
      </categories>
      <tags>
        <tag>electron</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的electron之旅（三）——跨域</title>
    <url>/2020/09/09/%E6%97%A0%E6%98%9F%E7%9A%84electron%E4%B9%8B%E6%97%85%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%E8%B7%A8%E5%9F%9F/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>你只要打包就肯定遇到这个问题…</p>
<p>原本开发的时候可以通过webpack的proxy做转发,避免跨域的问题</p>
<p>但是打包上线会发现,这和普通的前端项目上线不一样,不会发布到对应的域名下</p>
<p>而是本地文件协议加载,app//.或者file://这种协议</p>
<p>因此在填写网络请求baseurl的时候,势必会遇到跨域问题</p>
<p>解决方式由两种</p>
<h1 id="一-后台解决"><a href="#一-后台解决" class="headerlink" title="一.后台解决"></a>一.后台解决</h1><p>这个就不多说了,让后台去加cors即可.</p>
<p>要是有Nginx上也可以在Nginx上搞,百度一下都有</p>
<h1 id="二-端上解决"><a href="#二-端上解决" class="headerlink" title="二.端上解决"></a>二.端上解决</h1><p>你能百度到的基本都是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">win = new BrowserWindow(&#123;</span><br><span class="line">  webPreferences: &#123;</span><br><span class="line">    //添加这样一个配置项,允许跨域</span><br><span class="line">    webSecurity: false,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>包括在electron的官方文档也是这么写的</p>
<p>但是我实测,不生效</p>
<p>还需要在文件顶端加上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.commandLine.appendSwitch(&#x27;disable-web-security&#x27;);</span><br></pre></td></tr></table></figure>

<p>这样才能允许端上跨域访问</p>
<h1 id="感谢用户126777253074这位大哥在评论区给的回复"><a href="#感谢用户126777253074这位大哥在评论区给的回复" class="headerlink" title="感谢用户126777253074这位大哥在评论区给的回复"></a>感谢<a href="https://juejin.im/user/1266248485452910">用户126777253074</a>这位大哥在<a href="https://juejin.im/post/6844904202905321480">评论区给的回复</a></h1>]]></content>
      <categories>
        <category>electron</category>
      </categories>
      <tags>
        <tag>electron</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的electron之旅（九）—— JS注入</title>
    <url>/2021/01/03/%E6%97%A0%E6%98%9F%E7%9A%84electron%E4%B9%8B%E6%97%85%EF%BC%88%E4%B9%9D%EF%BC%89%E2%80%94%E2%80%94%20JS%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>开发群中讨论，如何给electron注入js</p>
<p>有老哥提出了使用preload.js注入</p>
<p>我惊了，表示不信，后面仔细想了想：</p>
<p>“通过preload.js，可以预加载一些electron主线程的变量挂在到window上，后期在render线程中可以获取到对应的变量。</p>
<p>换句话说，preload.js中获取到的window，是后期render线程的window，那理论上确实可以做注入操作。</p>
<p>如果我在preload.js中添加window的生命周期,渲染后通过id或者各种方式获取到对应的dom节点，理论上我应该能劫持某些按钮，也就是说注入js成功了。”</p>
<h2 id="二、说干就干"><a href="#二、说干就干" class="headerlink" title="二、说干就干"></a>二、说干就干</h2><p>1、老规矩，vue+vue-cli-plugin-electron-builder创建项目</p>
<p>2、background.js，直接加载<a href="http://www.baidu.com/">www.baidu.com</a></p>
<p>3、添加preload.js</p>
<p>4.preload.js中添加window的生命周期</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.load = function()&#123;</span><br><span class="line">  &lt;!-- xxxxx具体就不写了 --&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="三、效果"><a href="#三、效果" class="headerlink" title="三、效果"></a>三、效果</h2><p>点击百度一下，触发我的代码</p>
<p>视频：</p>

<video src="/images/electron9/1.mp4" type="video/mp4" controls="controls" width="100%" height="100%">
</video>
 

<p>截图：<br><img src="/images/electron9/2.jpg" alt="2"></p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://nklayman.github.io/vue-cli-plugin-electron-builder/guide/guide.html#preload-files">preload.js</a></p>
<p><a href="https://nklayman.github.io/vue-cli-plugin-electron-builder/guide/security.html#node-integration">Node Integration</a></p>
]]></content>
      <categories>
        <category>electron</category>
      </categories>
      <tags>
        <tag>electron</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的electron之旅（二）——进程间通信</title>
    <url>/2020/09/04/%E6%97%A0%E6%98%9F%E7%9A%84electron%E4%B9%8B%E6%97%85%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<p>进程间通信用ipcRenderer，ipcMain官网写的很清楚</p>
<p>但问题在于，我使用vue-cli-plugin-electron-builder引入electron</p>
<p>想做进程间通信</p>
<p>import {ipcRenderer} from ‘electron’</p>
<p>引入一直报错</p>
<p>原因如下</p>
<h1 id="插件文档"><a href="#插件文档" class="headerlink" title="插件文档"></a><a href="https://nklayman.github.io/vue-cli-plugin-electron-builder/guide/security.html#node-integration">插件文档</a></h1><h1 id="方式一：Node-Integration"><a href="#方式一：Node-Integration" class="headerlink" title="方式一：Node Integration"></a>方式一：Node Integration</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># vue.config.js</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  pluginOptions: &#123;</span><br><span class="line">    electronBuilder: &#123;</span><br><span class="line">      nodeIntegration: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="方式二：预加载"><a href="#方式二：预加载" class="headerlink" title="方式二：预加载"></a>方式二：预加载</h1><h2 id="1-在src下新建一个js"><a href="#1-在src下新建一个js" class="headerlink" title="1.在src下新建一个js"></a>1.在src下新建一个js</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ./src/preload.js</span><br><span class="line"></span><br><span class="line">import &#123; ipcRenderer &#125; from &#x27;electron&#x27;</span><br><span class="line">window.ipcRenderer = ipcRenderer</span><br></pre></td></tr></table></figure>
<h2 id="2-修改vue-config-js"><a href="#2-修改vue-config-js" class="headerlink" title="2.修改vue.config.js"></a>2.修改vue.config.js</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ./vue.config.js</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  pluginOptions: &#123;</span><br><span class="line">    electronBuilder: &#123;</span><br><span class="line">      preload: &#x27;src/preload.js&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-修改主进程文件"><a href="#3-修改主进程文件" class="headerlink" title="3.修改主进程文件"></a>3.修改主进程文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ./src/background.js</span><br><span class="line"></span><br><span class="line">const win = new BrowserWindow(&#123;</span><br><span class="line">  width: 800,</span><br><span class="line">  height: 600,</span><br><span class="line">  webPreferences: &#123;</span><br><span class="line">    nodeIntegration: process.env.ELECTRON_NODE_INTEGRATION,</span><br><span class="line">    // 注意这一行，这一行是新增的</span><br><span class="line">+   preload: path.join(__dirname, &#x27;preload.js&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="4-使用"><a href="#4-使用" class="headerlink" title="4.使用"></a>4.使用</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.ipcRenderer即可</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>electron</category>
      </categories>
      <tags>
        <tag>electron</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的electron之旅（五）——系统托盘</title>
    <url>/2020/09/14/%E6%97%A0%E6%98%9F%E7%9A%84electron%E4%B9%8B%E6%97%85%EF%BC%88%E4%BA%94%EF%BC%89%E2%80%94%E2%80%94%E7%B3%BB%E7%BB%9F%E6%89%98%E7%9B%98/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>应用要收到系统托盘，这没什么好说的</p>
<h1 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h1><p><a href="https://www.electronjs.org/docs/api/tray">electron</a></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 主线程代码</span><br><span class="line">import &#123;</span><br><span class="line">  Tray, Menu,</span><br><span class="line">&#125; from &#x27;electron&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">let tray = null;</span><br><span class="line">app.whenReady().then(() =&gt; &#123;</span><br><span class="line">  // console.log(app.getAppPath());</span><br><span class="line">  // // 判断环境</span><br><span class="line">  if (process.env.WEBPACK_DEV_SERVER_URL) &#123;</span><br><span class="line">    // 开发</span><br><span class="line">    tray = new Tray(path.join(app.getAppPath(), &#x27;/../src/assets/logo.png&#x27;));</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    // 生产</span><br><span class="line">    tray = new Tray(path.join(app.getPath(&#x27;exe&#x27;), &#x27;/../resources/logo.png&#x27;));</span><br><span class="line">  &#125;</span><br><span class="line">  // tray = new Tray(logo);</span><br><span class="line"></span><br><span class="line">  const contextMenu = Menu.buildFromTemplate([</span><br><span class="line">    &#123; label: &#x27;退出&#x27;, click: () =&gt; &#123; win.destroy(); &#125; &#125;,</span><br><span class="line">  ]);</span><br><span class="line">  tray.setToolTip(&#x27;鼠标移上来的提示&#x27;);</span><br><span class="line">  tray.setContextMenu(contextMenu);</span><br><span class="line">  tray.on(&#x27;click&#x27;, () =&gt; &#123;</span><br><span class="line">    // eslint-disable-next-line no-unused-expressions</span><br><span class="line">    win.isVisible() ? win.hide() : win.show();</span><br><span class="line">    // eslint-disable-next-line no-unused-expressions</span><br><span class="line">    win.isVisible() ? win.setSkipTaskbar(false) : win.setSkipTaskbar(true);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># vue.config.js</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  …………// 省略</span><br><span class="line">  pluginOptions: &#123;</span><br><span class="line">    electronBuilder: &#123;</span><br><span class="line">      preload: &#x27;./src/preload.js&#x27;,</span><br><span class="line">      // 打包参数</span><br><span class="line">      builderOptions: &#123;</span><br><span class="line">        extraResources: [&#123;</span><br><span class="line">          from: path.join(__dirname, &#x27;/src/assets/logo.png&#x27;),</span><br><span class="line">          to: &#x27;./&#x27;,</span><br><span class="line">        &#125;],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><p>其实收到托盘代码很简单，但是这个托盘图标就有点坑了。</p>
<p>会发现，打包后因为没有这个icon，托盘找不到程序了。</p>
<p>打开任务管理器还是能找到程序，说明程序在运行，只是托盘图标没了。</p>
<p>现在讲讲怎么解决。先说几种思路</p>
<h2 id="第一种思路：直接require使用"><a href="#第一种思路：直接require使用" class="headerlink" title="第一种思路：直接require使用"></a>第一种思路：直接require使用</h2><p>在主线程中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const logo = require(&#x27;../src/assest/logo.png&#x27;);</span><br><span class="line"> tray = new Tray(logo); </span><br></pre></td></tr></table></figure>
<p>理论上生产或者开发应该都没问题，都能正常引入。</p>
<p>但是我在引入的过程中一直报无法处理这个png类型的文件</p>
<p>让我引入处理的loader，但我引入了file-loader和url-loader以后，还是报这个错误，所以我在这条路没能成功</p>
<h2 id="第二种思路-extraResources"><a href="#第二种思路-extraResources" class="headerlink" title="第二种思路:extraResources"></a>第二种思路:<a href="https://www.electron.build/configuration/configuration">extraResources</a></h2><p>在electron-builder的官网上我们可以看到有个extraResources参数，意思是额外打包一些东西进来。</p>
<p>因此我们可以将icon额外打包到软件中。</p>
<p>看最前文的代码可以看到我有配置这个。</p>
<p>那么接下来的问题，就是如何找到打包后的icon被放在哪了，如何找到。</p>
<h3 id="1-生产环境下，使用什么路径"><a href="#1-生产环境下，使用什么路径" class="headerlink" title="1.生产环境下，使用什么路径"></a>1.生产环境下，使用什么路径</h3><p>使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.getPath(&#x27;exe&#x27;)</span><br></pre></td></tr></table></figure>

<p>生产环境下，必须先找到本软件所在的位置，才能找到对应的资源文件</p>
<h3 id="2-打包的资源文件在哪"><a href="#2-打包的资源文件在哪" class="headerlink" title="2.打包的资源文件在哪"></a>2.打包的资源文件在哪</h3><h4 id="（1）先打包"><a href="#（1）先打包" class="headerlink" title="（1）先打包"></a>（1）先打包</h4><p>打包以后会生成dist_electron文件夹</p>
<p>里面会生成一个exe安装包，和一个win-unpacked文件夹</p>
<p>这个exe安装包，安装完以后的目录结构其实就是win-unpacked文件夹的目录。</p>
<p>因此不推荐直接用win-unpacked的exe做绿色软件发给用户，因为可能出现路径不匹配导致的一些问题。尽量发安装包。</p>
<h4 id="（2）安装软件"><a href="#（2）安装软件" class="headerlink" title="（2）安装软件"></a>（2）安装软件</h4><p>双击exe安装包安装，这个都会</p>
<h4 id="（3）查看安装软件地址"><a href="#（3）查看安装软件地址" class="headerlink" title="（3）查看安装软件地址"></a>（3）查看安装软件地址</h4><p><img src="/images/electron5/1.png" alt="1"></p>
<h4 id="（4）找到文件"><a href="#（4）找到文件" class="headerlink" title="（4）找到文件"></a>（4）找到文件</h4><p><img src="/images/electron5/2.png" alt="2"><br>是的，就在这个文件夹里面</p>
<h4 id="（5）可能有些小伙纸不知道怎么查看打包后app-getPath-‘exe’-的路径"><a href="#（5）可能有些小伙纸不知道怎么查看打包后app-getPath-‘exe’-的路径" class="headerlink" title="（5）可能有些小伙纸不知道怎么查看打包后app.getPath(‘exe’)的路径"></a>（5）可能有些小伙纸不知道怎么查看打包后app.getPath(‘exe’)的路径</h4><p>我们肯定会想到，在render线程通过线程通信到main线程打印一下。</p>
<p>但是打包以后，就没有main线程的控制台输出了。</p>
<p>解决方法其实很简单。</p>
<p>打开你的终端，我这里用的是cmder，把桌面图标拖进来即可</p>
<p>这样运行的话，就会展示main线程的输出。</p>
<p><img src="/images/electron5/3.png" alt="3"><br><img src="/images/electron5/4.png" alt="4"></p>
<p>像我上面222就是主线程的输出，可以自己输出一下app.getPath(‘exe’)的路径，你会发现就是我上面那个文件夹下的exe路径。</p>
<h4 id="（6）写生产的icon地址"><a href="#（6）写生产的icon地址" class="headerlink" title="（6）写生产的icon地址"></a>（6）写生产的icon地址</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tray = new Tray(path.join(app.getPath(&#x27;exe&#x27;), &#x27;/../resources/logo.png&#x27;));</span><br></pre></td></tr></table></figure>

<h2 id="回顾一下解决问题的思路"><a href="#回顾一下解决问题的思路" class="headerlink" title="回顾一下解决问题的思路"></a>回顾一下解决问题的思路</h2><p>图标不展示-&gt;任务管理器查到程序还在运行-&gt;图标路径不对导致托盘不展示-&gt;图标为什么不展示-&gt;大概率路径问题-&gt;解决路径问题</p>
<h1 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h1><p><a href="https://segmentfault.com/q/1010000022293025">回答区的评论</a><br><a href="https://www.imooc.com/wenda/detail/452119">打包如何看主线程输出</a></p>
]]></content>
      <categories>
        <category>electron</category>
      </categories>
      <tags>
        <tag>electron</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的electron之旅（八）—— 坐标</title>
    <url>/2020/12/24/%E6%97%A0%E6%98%9F%E7%9A%84electron%E4%B9%8B%E6%97%85%EF%BC%88%E5%85%AB%EF%BC%89%E2%80%94%E2%80%94%20%E5%9D%90%E6%A0%87/</url>
    <content><![CDATA[<h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>希望窗口从某些固定区域弹出，比如右下角（如果有自定义弹窗需求，这就很常见了）</p>
<h2 id="二、如何修改弹出位置"><a href="#二、如何修改弹出位置" class="headerlink" title="二、如何修改弹出位置"></a>二、如何修改弹出位置</h2><p>其实非常简单</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const newWindow = new BrowserWindow(&#123;</span><br><span class="line">    x: 400,</span><br><span class="line">    y: 400,</span><br><span class="line">    width: 400,</span><br><span class="line">    height: 600,</span><br><span class="line">    frame: false,</span><br><span class="line">    webPreferences: &#123;</span><br><span class="line">      webSecurity: false,</span><br><span class="line">      nodeIntegration: process.env.ELECTRON_NODE_INTEGRATION,</span><br><span class="line">      enableRemoteModule: true,</span><br><span class="line">      preload: path.join(__dirname, &#x27;preload.js&#x27;),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<p>关键就是这个x，y了</p>
<h3 id="1-屏幕上的坐标轴"><a href="#1-屏幕上的坐标轴" class="headerlink" title="1.屏幕上的坐标轴"></a>1.屏幕上的坐标轴</h3><p>在屏幕上的坐标轴长这样</p>
<p><img src="/images/electron8/1.png" alt="1"></p>
<p>把你的鼠标放到屏幕四个角落，打印一下就可以验证了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const point = screen.getCursorScreenPoint();</span><br><span class="line">console.log(point);</span><br></pre></td></tr></table></figure>
<h3 id="2-啥叫主屏幕"><a href="#2-啥叫主屏幕" class="headerlink" title="2.啥叫主屏幕"></a>2.啥叫主屏幕</h3><p>众所周知，用户可能有两个屏幕，甚至更多。</p>
<p>但主屏幕都只有一个。</p>
<p>现在来教大家如何区分主屏幕。</p>
<hr>
<h4 id="mac"><a href="#mac" class="headerlink" title="mac"></a>mac</h4><p>设置-显示器-排列</p>
<p><img src="/images/electron8/2.png" alt="2"></p>
<p>注意上方这个白条，有白条的显示器叫做主屏幕</p>
<h4 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h4><p>桌面-右键-显示设置</p>
<p><img src="/images/electron8/3.png" alt="3"></p>
<p>这个蓝色窗口，代表你选中的窗口信息。继续往下滚，这里哪个窗口勾选了主屏幕，哪个就是主屏幕</p>
<p><img src="/images/electron8/4.png" alt="4"></p>
<hr>
<p>那么我们可以获取</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//主屏幕</span><br><span class="line">const display = screen.getPrimaryDisplay();</span><br><span class="line">//当前鼠标所在屏幕</span><br><span class="line">const point = screen.getCursorScreenPoint();</span><br><span class="line">const display2 = screen.getDisplayNearestPoint(point);</span><br></pre></td></tr></table></figure>

<p>因此，你可能还需要判断你期望的屏幕位置是否是主屏幕，是否要配合进行计算</p>
<h2 id="三、非主屏幕的坐标原点不是从（0，0）开始的！请注意"><a href="#三、非主屏幕的坐标原点不是从（0，0）开始的！请注意" class="headerlink" title="三、非主屏幕的坐标原点不是从（0，0）开始的！请注意"></a>三、非主屏幕的坐标原点不是从（0，0）开始的！请注意</h2><p>把你的鼠标放到第二块屏幕上，打印一下就可以验证了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const point = screen.getCursorScreenPoint();</span><br><span class="line">console.log(point);</span><br></pre></td></tr></table></figure>
<h2 id="四、额外的坑"><a href="#四、额外的坑" class="headerlink" title="四、额外的坑"></a>四、额外的坑</h2><h3 id="1-注意windows可能默认存在缩放"><a href="#1-注意windows可能默认存在缩放" class="headerlink" title="1.注意windows可能默认存在缩放"></a>1.注意windows可能默认存在缩放</h3><h3 id="2-注意dip的转换"><a href="#2-注意dip的转换" class="headerlink" title="2.注意dip的转换"></a>2.注意dip的转换</h3><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.electronjs.org/docs/api/screen#screenscreentodiprectwindow-rect-windows">electron的Screen</a></p>
]]></content>
      <categories>
        <category>electron</category>
      </categories>
      <tags>
        <tag>electron</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的electron之旅（六）——electron 应用协议唤起</title>
    <url>/2020/10/13/%E6%97%A0%E6%98%9F%E7%9A%84electron%E4%B9%8B%E6%97%85%EF%BC%88%E5%85%AD%EF%BC%89%E2%80%94%E2%80%94electron%20%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE%E5%94%A4%E8%B5%B7/</url>
    <content><![CDATA[<h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>应用希望能通过其他应用唤起，这应该是个非常常见的需求</p>
<h2 id="二、如何唤起"><a href="#二、如何唤起" class="headerlink" title="二、如何唤起"></a>二、如何唤起</h2><p>搜半天，全是基于协议的。protocol</p>
<p>接着会发现关键代码</p>
<p><a href="https://www.electronjs.org/docs/api/app#appsetasdefaultprotocolclientprotocol-path-args">官网地址</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.setAsDefaultProtocolClient(PROTOCOL, process.execPath, args);</span><br></pre></td></tr></table></figure>



<h2 id="但是这有一个关键点：你至少运行过一次程序，才能注册这个协议！！！"><a href="#但是这有一个关键点：你至少运行过一次程序，才能注册这个协议！！！" class="headerlink" title="但是这有一个关键点：你至少运行过一次程序，才能注册这个协议！！！"></a>但是这有一个关键点：你至少运行过一次程序，才能注册这个协议！！！</h2><p>这就让人很难受了。</p>
<p>那么我们需要想想，有没有办法在安装的时候把协议写进去？</p>
<p>答案是：有。</p>
<h2 id="如何在安装的时候把协议写进去？"><a href="#如何在安装的时候把协议写进去？" class="headerlink" title="如何在安装的时候把协议写进去？"></a>如何在安装的时候把协议写进去？</h2><p>既然要在安装的时候写进去，那么必定需要在打包的地方下功夫。</p>
<p>这里我使用的是<a href="https://www.electron.build/configuration/configuration.html#overridable-per-platform-options">electron-builder</a>来进行打包（我的项目是基于vue-cli4配合vue-cli-plugin-electron-builder创建的）</p>
<p>因此我们的打包配置文件中，需要写入protocols配置</p>
<p>注意，mac和Windows协议是分开的。</p>
<p><img src="/images/electron6/1.png" alt="1"></p>
<p>这里我们解释一下</p>
<h3 id="1-mac上直接在这写就行。（亲测可行）"><a href="#1-mac上直接在这写就行。（亲测可行）" class="headerlink" title="1.mac上直接在这写就行。（亲测可行）"></a>1.mac上直接在这写就行。（亲测可行）</h3><p>mac的协议唤起，实质上是dmg安装文件后的info.plist文件下的URLType，干过iOS开发的同事应该都有经验。</p>
<p>路径是/Application/你的应用程序   右键显示包内容  /Contents/Info.plist</p>
<p><img src="/images/electron6/3.png" alt="3"></p>
<h2 id="2-Windows需要额外写脚本-（写本博客的时候，我还没测试过Windows）亲测可行"><a href="#2-Windows需要额外写脚本-（写本博客的时候，我还没测试过Windows）亲测可行" class="headerlink" title="2.Windows需要额外写脚本 （写本博客的时候，我还没测试过Windows）亲测可行"></a>2.Windows需要额外写脚本 <del>（写本博客的时候，我还没测试过Windows）</del>亲测可行</h2><p><img src="/images/electron6/5.png" alt="5"><br><img src="/images/electron6/2.png" alt="2"></p>
<p>Windows需要通过指定打包方式nsis，并在打包时注入执行的sh脚本，以达到安装注入协议的目的。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># windows,写入electron的唤起协议</span></span><br><span class="line"><span class="comment"># !macro 定义宏</span></span><br><span class="line"><span class="comment"># customInstall 会在文件安装后自动调用</span></span><br><span class="line"><span class="comment"># DetailPrint 执行打印</span></span><br><span class="line"><span class="comment"># DeleteRegKey 删除原有的注册表</span></span><br><span class="line"><span class="comment"># WriteRegStr 写入注册表</span></span><br><span class="line"><span class="comment"># $INSTDIR 所选的文件安装路径</span></span><br><span class="line"></span><br><span class="line">!macro customInstall</span><br><span class="line">  DetailPrint <span class="string">&quot;Register szyxqca URI Handler&quot;</span></span><br><span class="line">  DeleteRegKey HKCR <span class="string">&quot;szyxqca&quot;</span></span><br><span class="line">  WriteRegStr HKCR <span class="string">&quot;szyxqca&quot;</span> <span class="string">&quot;&quot;</span> <span class="string">&quot;URL:szyxqca&quot;</span></span><br><span class="line">  WriteRegStr HKCR <span class="string">&quot;szyxqca&quot;</span> <span class="string">&quot;URL Protocol&quot;</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  WriteRegStr HKCR <span class="string">&quot;szyxqca\shell&quot;</span> <span class="string">&quot;&quot;</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  WriteRegStr HKCR <span class="string">&quot;szyxqca\shell\Open&quot;</span> <span class="string">&quot;&quot;</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  WriteRegStr HKCR <span class="string">&quot;szyxqca\shell\Open\command&quot;</span> <span class="string">&quot;&quot;</span> <span class="string">&quot;<span class="variable">$INSTDIR</span>\<span class="variable">$</span>&#123;APP_EXECUTABLE_FILENAME&#125; %1&quot;</span></span><br><span class="line">!macroend</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">!macro customUnInstall</span><br><span class="line">  DeleteRegKey HKCR <span class="string">&quot;szyxqca&quot;</span></span><br><span class="line">!macroend</span><br></pre></td></tr></table></figure>


<p>这里有另一个注意的点，就是卸载的时候最好能卸载掉对应的协议。（用户体验至上）</p>
<p>然后打包即可</p>
<h2 id="到目前为止，你的应用应该就可以被唤起了"><a href="#到目前为止，你的应用应该就可以被唤起了" class="headerlink" title="到目前为止，你的应用应该就可以被唤起了"></a>到目前为止，你的应用应该就可以被唤起了</h2><h2 id="setAsDefaultProtocolClient是不需要写的"><a href="#setAsDefaultProtocolClient是不需要写的" class="headerlink" title="setAsDefaultProtocolClient是不需要写的"></a>setAsDefaultProtocolClient是不需要写的</h2><h2 id="三、怎么唤起应用测试？"><a href="#三、怎么唤起应用测试？" class="headerlink" title="三、怎么唤起应用测试？"></a>三、怎么唤起应用测试？</h2><p>还记得之前你写的协议名称么？比如我这里叫szyxqca</p>
<p>打开浏览器，在地址栏输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">szyxqca://</span><br></pre></td></tr></table></figure>

<p>即可</p>
<p>理论上你的浏览器会唤起你的应用</p>
<p><img src="/images/electron6/4.png" alt="4"></p>
<p>如果要传参呢？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">szyxqca://startapp/here?xxx=123&amp;xxx2=222</span><br></pre></td></tr></table></figure>



<p>这里的startapp/here其实都是没用的，主要是配合添加host和path以及query，这种格式比较适合后期延展</p>
<h2 id="四、如何通过这种方式传参，怎么接收呢？"><a href="#四、如何通过这种方式传参，怎么接收呢？" class="headerlink" title="四、如何通过这种方式传参，怎么接收呢？"></a>四、如何通过这种方式传参，怎么接收呢？</h2><p>需要两个生命周期</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// windows唤起</span><br><span class="line">app.on(&#x27;second-instance&#x27;, (event, argv) =&gt; &#123;</span><br><span class="line">  if (process.platform === &#x27;win32&#x27;) &#123;</span><br><span class="line">    logger.warn(&#x27;唤起&#x27;);</span><br><span class="line">    logger.warn(event, argv);</span><br><span class="line">    //TODO:还没写</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// macOS唤起</span><br><span class="line">app.on(&#x27;open-url&#x27;, (event, urlStr) =&gt; &#123;</span><br><span class="line">  logger.warn(&#x27;唤起&#x27;);</span><br><span class="line">  logger.warn(event, urlStr);</span><br><span class="line">  // 解析数据</span><br><span class="line">  const urlObj = new URL(urlStr);</span><br><span class="line">  const &#123; searchParams &#125; = urlObj;</span><br><span class="line">  //数据</span><br><span class="line">  const xxx = searchParams.get(&#x27;xxx&#x27;);</span><br><span class="line">  const xxx2 = searchParams.get(&#x27;xxx2&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="五、可能碰到的问题："><a href="#五、可能碰到的问题：" class="headerlink" title="五、可能碰到的问题："></a>五、可能碰到的问题：</h2><h3 id="1-唤醒的app不对"><a href="#1-唤醒的app不对" class="headerlink" title="1.唤醒的app不对"></a>1.唤醒的app不对</h3><p>我在mac上唤醒app，一直莫名其妙唤起了./node_modules/electron/dist/Electron.app，然后我把所有的node_modules删了，并重新打开了一下app，再唤起，正常了。</p>
<p>实测直接把dmg直接发给同事，他安装以后可以直接唤醒，不会错误唤醒。</p>
<p>可能是electron的bug吧</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blog.csdn.net/dengdongxia/article/details/105906975">electron唤起原理</a></p>
<p><a href="https://www.jianshu.com/p/5c0bb0599dff">两种方式的mac/win注册协议唤起Electron应用</a></p>
<p><a href="https://segmentfault.com/a/1190000011511106">唤起示例</a></p>
<p><a href="https://glebbahmutov.com/blog/electron-app-with-custom-protocol/#external-custom-protocol-links">配置查看</a></p>
<p><a href="https://www.jianshu.com/p/d880c0ca0911">通过协议唤起Electron应用</a></p>
<p><a href="https://www.electron.build/configuration/configuration.html#overridable-per-platform-options">electron-builder</a></p>
]]></content>
      <categories>
        <category>electron</category>
      </categories>
      <tags>
        <tag>electron</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的electron之旅（十一）—— 阿星的electron打包页面</title>
    <url>/2022/02/21/%E6%97%A0%E6%98%9F%E7%9A%84electron%E4%B9%8B%E6%97%85%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%20%E9%98%BF%E6%98%9F%E7%9A%84electron%E6%89%93%E5%8C%85%E9%A1%B5%E9%9D%A2/</url>
    <content><![CDATA[<h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>因为用的是mac，发现有些网站不提供mac的应用版，所以很不爽，想自己打包</p>
<p>其实也有些企业做好了网站，想套个壳直接做成应用</p>
<p>因此我用我毕生功力，做了个打包页面，快速产壳</p>
<h2 id="二、地址"><a href="#二、地址" class="headerlink" title="二、地址"></a>二、地址</h2><p><a href="https://blog.xingxiaowu.cn/electron">阿星的打包页面</a></p>
<p>依次输入我需要的参数</p>
<p>例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">客户端需要打包的url地址: https://www.bilibili.com/</span><br><span class="line"></span><br><span class="line">客户端名称: bilibili</span><br><span class="line"></span><br><span class="line">客户端appid: com.bilibili.app</span><br><span class="line"></span><br><span class="line">接收应用程序的邮箱: 329106954@qq.com</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>然后选择需要打包的平台</p>
<p>然后就可以前往查看构建进度</p>
<p><img src="/images/electron10/1.png" alt="1"></p>
<p><img src="/images/electron10/2.png" alt="2"></p>
<p><img src="/images/electron10/3.png" alt="3"></p>
<p>然后安装即可</p>
<h2 id="三、Feature"><a href="#三、Feature" class="headerlink" title="三、Feature"></a>三、Feature</h2><h3 id="1-当前electron包体过大，无法通过邮件发送"><a href="#1-当前electron包体过大，无法通过邮件发送" class="headerlink" title="1.当前electron包体过大，无法通过邮件发送"></a>1.当前electron包体过大，无法通过邮件发送</h3><p>后续想换个别的框架，例如tauri来缩小包体，通过邮件发送，避免国内github下载缓慢的问题</p>
<h3 id="2-目前应用图标不支持自定义"><a href="#2-目前应用图标不支持自定义" class="headerlink" title="2.目前应用图标不支持自定义"></a>2.目前应用图标不支持自定义</h3><p>主要是没钱买服务器或者图床，要是有老哥有免费的图床分享一下也是极好的</p>
<p>目前的图标是我随便找的=。=如有侵权，请联系我删除</p>
<h3 id="3-添加更多的自定义配置"><a href="#3-添加更多的自定义配置" class="headerlink" title="3.添加更多的自定义配置"></a>3.添加更多的自定义配置</h3><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>无</p>
]]></content>
      <categories>
        <category>electron</category>
      </categories>
      <tags>
        <tag>electron</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的electron之旅（十三）—— 复制图片到剪切板</title>
    <url>/2022/03/03/%E6%97%A0%E6%98%9F%E7%9A%84electron%E4%B9%8B%E6%97%85%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%20%E5%A4%8D%E5%88%B6%E5%9B%BE%E7%89%87%E5%88%B0%E5%89%AA%E5%88%87%E6%9D%BF/</url>
    <content><![CDATA[<h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>需求变更。。。仅此而已</p>
<h2 id="二、如何实现"><a href="#二、如何实现" class="headerlink" title="二、如何实现"></a>二、如何实现</h2><p>通过上一篇，我们已经知道了如何获取dom节点</p>
<p>接下来要做的，则是将图片复制到剪切板</p>
<p>我们从文档可以看到</p>
<p><a href="https://www.electronjs.org/zh/docs/latest/api/native-image#nativeimagecreatefromnamedimageimagename-hslshift-macos">clipboard.writeImage</a><br><code>clipboard</code>支持读写图片到剪切板，但必须是<code>nativeimage</code></p>
<p><a href="https://www.electronjs.org/zh/docs/latest/api/native-image#nativeimagecreatefromdataurldataurl">nativeimage.createFromDataURL</a><br>而<code>nativeimage</code>可以支持从base64创建</p>
<p>那么配合上一篇，我们拿到base64以后，通过这个操作，就可以复制图片到剪切板了</p>
<p>代码如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// html 入口文件</span></span><br><span class="line"><span class="comment">///////////</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;contextmenu&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  e.<span class="title function_">preventDefault</span>();</span><br><span class="line">  <span class="keyword">const</span> domName = e.<span class="property">target</span>.<span class="property">localName</span>;</span><br><span class="line">  <span class="keyword">if</span> (domName === <span class="string">&quot;img&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.<span class="property">target</span>.<span class="property">id</span> === <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">valueOf</span>();</span><br><span class="line">      e.<span class="property">target</span>.<span class="property">id</span> = date;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">rightMenu</span>.<span class="title function_">show</span>(e.<span class="property">target</span>.<span class="property">id</span>, e.<span class="property">target</span>.<span class="property">currentSrc</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">///////////</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// background.js</span></span><br><span class="line"><span class="comment">///////////</span></span><br><span class="line"><span class="keyword">const</span> rightMenu = <span class="title function_">initRightMenu</span>();</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initRightMenu</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> rightTemplate = [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">label</span>: <span class="string">&quot;复制图片&quot;</span>,</span><br><span class="line">      <span class="attr">click</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;复制图片&quot;</span>);</span><br><span class="line">        mainWindow.<span class="property">webContents</span>.<span class="title function_">send</span>(<span class="string">&quot;copyImage&quot;</span>, &#123;</span><br><span class="line">          <span class="attr">domId</span>: clickDomId,</span><br><span class="line">          <span class="attr">imageUrl</span>:clickImageUrl</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">const</span> menu = <span class="title class_">Menu</span>.<span class="title function_">buildFromTemplate</span>(rightTemplate);</span><br><span class="line">  <span class="keyword">return</span> menu;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> clickDomId = <span class="literal">null</span></span><br><span class="line"><span class="keyword">let</span> clickImageUrl = <span class="literal">null</span></span><br><span class="line">ipcMain.<span class="title function_">handle</span>(<span class="string">&quot;show-context-menu&quot;</span>, <span class="function">(<span class="params">event, args</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; domId,imageUrl &#125; = args;</span><br><span class="line">  clickDomId = domId;</span><br><span class="line">  clickImageUrl = imageUrl;</span><br><span class="line">  rightMenu.<span class="title function_">popup</span>(&#123;</span><br><span class="line">    <span class="attr">window</span>: mainWindow.<span class="property">webContents</span>,</span><br><span class="line">    <span class="attr">callback</span>: <span class="function">() =&gt;</span> (clickDomId = <span class="literal">null</span>),</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">///////////</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// preload.js</span></span><br><span class="line"><span class="comment">///////////</span></span><br><span class="line"><span class="comment">// 注入时使用，可不在html入口处添加监听</span></span><br><span class="line"><span class="comment">// document.addEventListener(&quot;DOMContentLoaded&quot;, () =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   window.addEventListener(&quot;contextmenu&quot;, (e) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     e.preventDefault();</span></span><br><span class="line"><span class="comment">//     const domName = e.target.localName;</span></span><br><span class="line"><span class="comment">//     if (domName === &quot;img&quot;) &#123;</span></span><br><span class="line"><span class="comment">//       if (e.target.id === &quot;&quot;) &#123;</span></span><br><span class="line"><span class="comment">//         const date = new Date().valueOf();</span></span><br><span class="line"><span class="comment">//         e.target.id = date;</span></span><br><span class="line"><span class="comment">//       &#125;</span></span><br><span class="line"><span class="comment">//       ipcRenderer.invoke(&quot;show-context-menu&quot;, &#123;</span></span><br><span class="line"><span class="comment">//         domId: e.target.id,</span></span><br><span class="line"><span class="comment">//         imageUrl: e.target.currentSrc</span></span><br><span class="line"><span class="comment">//       &#125;);</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//   &#125;);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line">contextBridge.<span class="title function_">exposeInMainWorld</span>(<span class="string">&quot;rightMenu&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">show</span>: <span class="function">(<span class="params">domId,currentSrc</span>) =&gt;</span></span><br><span class="line">    ipcRenderer.<span class="title function_">invoke</span>(<span class="string">&quot;show-context-menu&quot;</span>, &#123;</span><br><span class="line">      domId,currentSrc</span><br><span class="line">    &#125;),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ipcRenderer.<span class="title function_">on</span>(<span class="string">&quot;copyImage&quot;</span>, <span class="function">(<span class="params">event, args</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; domId,imageUrl &#125; = args;</span><br><span class="line">  <span class="title function_">imageToBase64</span>(imageUrl)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">imageToBase64</span> = (<span class="params">url</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> image = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">    image.<span class="property">crossOrigin</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    image.<span class="property">src</span> = url;</span><br><span class="line">    image.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> base64 = <span class="title function_">getBase64Image</span>(image);</span><br><span class="line">      <span class="keyword">const</span> img = nativeImage.<span class="title function_">createFromDataURL</span>(base64)</span><br><span class="line">      clipboard.<span class="title function_">writeImage</span>(img)</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getBase64Image</span> = (<span class="params">img</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line">  canvas.<span class="property">width</span> = img.<span class="property">width</span>;</span><br><span class="line">  canvas.<span class="property">height</span> = img.<span class="property">height</span>;</span><br><span class="line">  <span class="keyword">const</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">  ctx.<span class="title function_">drawImage</span>(img, <span class="number">0</span>, <span class="number">0</span>, img.<span class="property">width</span>, img.<span class="property">height</span>);</span><br><span class="line">  <span class="keyword">let</span> ext = img.<span class="property">src</span>.<span class="title function_">substring</span>(img.<span class="property">src</span>.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;.&quot;</span>) + <span class="number">1</span>).<span class="title function_">toLowerCase</span>();</span><br><span class="line">  <span class="keyword">if</span> (ext === <span class="string">&quot;jpg&quot;</span>) &#123;</span><br><span class="line">    ext = <span class="string">&quot;jpeg&quot;</span>; <span class="comment">//这个地方是由于如果是jpg, 他会识别成image/png</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> dataURL = canvas.<span class="title function_">toDataURL</span>(<span class="string">&quot;image/&quot;</span> + ext);</span><br><span class="line">  <span class="keyword">return</span> dataURL;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">///////////</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p><img src="/images/electron13/1.gif" alt="1"></p>
]]></content>
      <categories>
        <category>electron</category>
      </categories>
      <tags>
        <tag>electron</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的electron之旅（十二）—— 如何像浏览器一样制作右键菜单</title>
    <url>/2022/03/02/%E6%97%A0%E6%98%9F%E7%9A%84electron%E4%B9%8B%E6%97%85%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%20%E5%A6%82%E4%BD%95%E5%83%8F%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%80%E6%A0%B7%E5%88%B6%E4%BD%9C%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95/</url>
    <content><![CDATA[<h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>接了个小需求，已有网站，做了个electron的壳，需要添加右键菜单<br>1.复制图片为base64<br>2.另存为图片<br>3.复制图片地址</p>
<h2 id="二、首先需要添加右键菜单"><a href="#二、首先需要添加右键菜单" class="headerlink" title="二、首先需要添加右键菜单"></a>二、首先需要添加右键菜单</h2><h2 id="1-主线程-background-js添加右键菜单内容"><a href="#1-主线程-background-js添加右键菜单内容" class="headerlink" title="1.主线程 background.js添加右键菜单内容"></a>1.主线程 background.js添加右键菜单内容</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// background.js</span></span><br><span class="line"><span class="comment">///////////</span></span><br><span class="line"><span class="keyword">const</span> rightMenu = <span class="title function_">initRightMenu</span>();</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initRightMenu</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> rightTemplate = [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">label</span>: <span class="string">&quot;复制图片为base64&quot;</span>,</span><br><span class="line">      <span class="attr">click</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;复制图片为base64&quot;</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">label</span>: <span class="string">&quot;另存为图片&quot;</span>,</span><br><span class="line">      <span class="attr">click</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;另存为图片&quot;</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">label</span>: <span class="string">&quot;复制图片URL&quot;</span>,</span><br><span class="line">      <span class="attr">click</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;复制图片URL&quot;</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">const</span> menu = <span class="title class_">Menu</span>.<span class="title function_">buildFromTemplate</span>(rightTemplate);</span><br><span class="line">  <span class="keyword">return</span> menu;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///////////</span></span><br></pre></td></tr></table></figure>
<h2 id="2-页面右键要能调用"><a href="#2-页面右键要能调用" class="headerlink" title="2.页面右键要能调用"></a>2.页面右键要能调用</h2><p>需要页面右键能够响应</p>
<p>那么我们需要在页面上能够获取到右键的点击事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 页面入口，比如vue的main.js</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;contextmenu&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  e.<span class="title function_">preventDefault</span>();</span><br><span class="line">  <span class="comment">// TODO 通知主线程</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="3-通知主线程响应"><a href="#3-通知主线程响应" class="headerlink" title="3.通知主线程响应"></a>3.通知主线程响应</h2><p>通过<code>preload</code>为window对象挂上一个<code>rightMenu</code>属性用于沟通调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// preload.js</span></span><br><span class="line">contextBridge.<span class="title function_">exposeInMainWorld</span>(<span class="string">&quot;rightMenu&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">show</span>: <span class="function">(<span class="params">domId</span>) =&gt;</span></span><br><span class="line">    ipcRenderer.<span class="title function_">invoke</span>(<span class="string">&quot;show-context-menu&quot;</span>, &#123;</span><br><span class="line">      domId,</span><br><span class="line">    &#125;),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;contextmenu&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  e.<span class="title function_">preventDefault</span>();</span><br><span class="line">  <span class="keyword">const</span> domName = e.<span class="property">target</span>.<span class="property">localName</span>;</span><br><span class="line">  <span class="keyword">if</span> (domName === <span class="string">&quot;img&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.<span class="property">target</span>.<span class="property">id</span> === <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">valueOf</span>();</span><br><span class="line">      e.<span class="property">target</span>.<span class="property">id</span> = date;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">rightMenu</span>.<span class="title function_">show</span>(e.<span class="property">target</span>.<span class="property">id</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>因为我们的目标是图片，所以判断一下，是图片才调用右键展示</p>
<p>同时我们需要知道我们需要操作哪个dom，所以为其设置一个id，方便后续操作</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// background.js</span></span><br><span class="line">ipcMain.<span class="title function_">handle</span>(<span class="string">&quot;show-context-menu&quot;</span>, <span class="function">(<span class="params">event, args</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; domId &#125; = args;</span><br><span class="line">  clickDomId = domId;</span><br><span class="line">  rightMenu.<span class="title function_">popup</span>(&#123;</span><br><span class="line">    <span class="attr">window</span>: <span class="title class_">BrowserWindow</span>.<span class="title function_">getFocusedWindow</span>().<span class="property">webContents</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>展示</p>
<h2 id="4-实现内容"><a href="#4-实现内容" class="headerlink" title="4.实现内容"></a>4.实现内容</h2><p>好像有点简单，随便百度了几个方法，就不多说了，直接放代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// preload.js</span></span><br><span class="line">ipcRenderer.<span class="title function_">on</span>(<span class="string">&quot;base64&quot;</span>, <span class="function">(<span class="params">event, args</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; domId &#125; = args;</span><br><span class="line">  <span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(domId);</span><br><span class="line">  <span class="title function_">imageToBase64</span>(element.<span class="property">currentSrc</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ipcRenderer.<span class="title function_">on</span>(<span class="string">&quot;saveImage&quot;</span>, <span class="function">(<span class="params">event, args</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; domId &#125; = args;</span><br><span class="line">  <span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(domId);</span><br><span class="line">  <span class="keyword">const</span> nameArray = element.<span class="property">currentSrc</span>.<span class="title function_">split</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> tmpArray = nameArray[nameArray.<span class="property">length</span> - <span class="number">1</span>].<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> name = tmpArray[<span class="number">0</span>];</span><br><span class="line">  <span class="comment">// console.log(nameArray);</span></span><br><span class="line">  <span class="title function_">download</span>(element.<span class="property">currentSrc</span>, name);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ipcRenderer.<span class="title function_">on</span>(<span class="string">&quot;copyUrl&quot;</span>, <span class="function">(<span class="params">event, args</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; domId &#125; = args;</span><br><span class="line">  <span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(domId);</span><br><span class="line">  <span class="title function_">copy</span>(element.<span class="property">currentSrc</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// base64</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getBase64Image</span> = (<span class="params">img</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line">  canvas.<span class="property">width</span> = img.<span class="property">width</span>;</span><br><span class="line">  canvas.<span class="property">height</span> = img.<span class="property">height</span>;</span><br><span class="line">  <span class="keyword">const</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">  ctx.<span class="title function_">drawImage</span>(img, <span class="number">0</span>, <span class="number">0</span>, img.<span class="property">width</span>, img.<span class="property">height</span>);</span><br><span class="line">  <span class="keyword">let</span> ext = img.<span class="property">src</span>.<span class="title function_">substring</span>(img.<span class="property">src</span>.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;.&quot;</span>) + <span class="number">1</span>).<span class="title function_">toLowerCase</span>();</span><br><span class="line">  <span class="keyword">if</span> (ext === <span class="string">&quot;jpg&quot;</span>) &#123;</span><br><span class="line">    ext = <span class="string">&quot;jpeg&quot;</span>; <span class="comment">//这个地方是由于如果是jpg, 他会识别成image/png</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> dataURL = canvas.<span class="title function_">toDataURL</span>(<span class="string">&quot;image/&quot;</span> + ext);</span><br><span class="line">  <span class="keyword">return</span> dataURL;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">imageToBase64</span> = (<span class="params">url</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> image = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">  image.<span class="property">crossOrigin</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  image.<span class="property">src</span> = url;</span><br><span class="line">  image.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> base64 = <span class="title function_">getBase64Image</span>(image);</span><br><span class="line">    <span class="comment">// console.log(base64);</span></span><br><span class="line">    <span class="title function_">copy</span>(base64);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">download</span> = (<span class="params">data, name</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!data) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getUrlBase64</span>(data).<span class="title function_">then</span>(<span class="function">(<span class="params">base64</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    a.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">    a.<span class="property">download</span> = name;</span><br><span class="line">    a.<span class="property">href</span> = base64;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(a);</span><br><span class="line">    a.<span class="title function_">click</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getUrlBase64</span> = (<span class="params">url</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> canvas = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">    img.<span class="property">crossOrigin</span> = <span class="string">&quot;Anonymous&quot;</span>; <span class="comment">//允许跨域</span></span><br><span class="line">    img.<span class="property">src</span> = url;</span><br><span class="line">    img.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      canvas.<span class="property">height</span> = <span class="number">300</span>;</span><br><span class="line">      canvas.<span class="property">width</span> = <span class="number">300</span>;</span><br><span class="line">      ctx.<span class="title function_">drawImage</span>(img, <span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">      <span class="keyword">let</span> dataURL = canvas.<span class="title function_">toDataURL</span>(<span class="string">&quot;image/png&quot;</span>);</span><br><span class="line">      canvas = <span class="literal">null</span>;</span><br><span class="line">      <span class="title function_">resolve</span>(dataURL);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="那么如果是加载别人远程页面，没有页面代码，比如我们是个浏览器，如何实现这个功能？"><a href="#那么如果是加载别人远程页面，没有页面代码，比如我们是个浏览器，如何实现这个功能？" class="headerlink" title="那么如果是加载别人远程页面，没有页面代码，比如我们是个浏览器，如何实现这个功能？"></a>那么如果是加载别人远程页面，没有页面代码，比如我们是个浏览器，如何实现这个功能？</h1><p>其实也有方法，我们可以通过注入的方式去做</p>
<p>可见<a href="https://blog.xingxiaowu.cn/2021/01/03/%E6%97%A0%E6%98%9F%E7%9A%84electron%E4%B9%8B%E6%97%85%EF%BC%88%E4%B9%9D%EF%BC%89%E2%80%94%E2%80%94%20JS%E6%B3%A8%E5%85%A5/">无星的electron之旅（九）—— JS注入</a></p>
<p>在页面加载完成以后，通过<code>preload</code>注入代码即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// preload.js</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 页面内容加载之后需要引入的一些操作</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;contextmenu&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">    <span class="keyword">const</span> domName = e.<span class="property">target</span>.<span class="property">localName</span>;</span><br><span class="line">    <span class="keyword">if</span> (domName === <span class="string">&quot;img&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (e.<span class="property">target</span>.<span class="property">id</span> === <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">valueOf</span>();</span><br><span class="line">        e.<span class="property">target</span>.<span class="property">id</span> = date;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// window.rightMenu.show(e.target.id);</span></span><br><span class="line">      ipcRenderer.<span class="title function_">invoke</span>(<span class="string">&quot;show-context-menu&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">domId</span>: e.<span class="property">target</span>.<span class="property">id</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>通过这段代码，我们可以为不同样式标签添加不同操作，并且不需要修改网页代码，自然像浏览器一样，添加右键菜单</p>
<h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p><img src="/images/electron12/1.gif" alt="1"></p>
]]></content>
      <categories>
        <category>electron</category>
      </categories>
      <tags>
        <tag>electron</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的electron之旅（十五）—— electron访问iframe</title>
    <url>/2023/03/05/%E6%97%A0%E6%98%9F%E7%9A%84electron%E4%B9%8B%E6%97%85%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89%E2%80%94%E2%80%94%20electron%E8%AE%BF%E9%97%AEiframe/</url>
    <content><![CDATA[<h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>一个偶然的情况，帮一个朋友写个小工具</p>
<p>需要内嵌用到iframe，并使用document提取其中的一些dom元素</p>
<h2 id="二、报错"><a href="#二、报错" class="headerlink" title="二、报错"></a>二、报错</h2><p>好像是这个，记不清楚了=。=</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Blocked a frame with origin &quot;***&quot; form accessing a cross-origin frame.</span><br></pre></td></tr></table></figure>

<h2 id="三、解决"><a href="#三、解决" class="headerlink" title="三、解决"></a>三、解决</h2><p>入口添加</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">app.<span class="property">commandLine</span>.<span class="title function_">appendSwitch</span>(<span class="string">&#x27;disable-site-isolation-trials&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ***</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">    <span class="comment">// ***</span></span><br><span class="line">    <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">        <span class="comment">// ***</span></span><br><span class="line">      <span class="attr">nodeIntegration</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">contextIsolation</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">webSecurity</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">allowRunningInsecureContent</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>
<h2 id="四、正常拿dom"><a href="#四、正常拿dom" class="headerlink" title="四、正常拿dom"></a>四、正常拿dom</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Iframe</span> = ref&lt;<span class="title class_">HTMLIFrameElement</span> | <span class="literal">null</span>&gt;(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">iframeLoad</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 业务脱敏</span></span><br><span class="line">    <span class="title class_">Iframe</span>.<span class="property">value</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;iframe&quot;</span>)</span><br><span class="line">    <span class="comment">// 非IE</span></span><br><span class="line">    <span class="title class_">Iframe</span>.<span class="property">value</span>!.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 获取document</span></span><br><span class="line">        <span class="keyword">let</span> <span class="attr">iframeDom</span>: <span class="title class_">HTMLIFrameElement</span> = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;Iframe&#x27;</span>) <span class="keyword">as</span> <span class="title class_">HTMLIFrameElement</span></span><br><span class="line">        <span class="keyword">let</span> doc = iframeDom.<span class="property">contentDocument</span></span><br><span class="line">        <span class="keyword">const</span> time = doc?.<span class="title function_">querySelector</span>(<span class="string">&quot;xpath&quot;</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">iframeLoad</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h1 id="done"><a href="#done" class="headerlink" title="done"></a>done</h1>]]></content>
      <categories>
        <category>electron</category>
      </categories>
      <tags>
        <tag>electron</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的electron之旅（十四）—— 裁包之去掉语言文件</title>
    <url>/2023/03/05/%E6%97%A0%E6%98%9F%E7%9A%84electron%E4%B9%8B%E6%97%85%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94%20%E8%A3%81%E5%8C%85%E4%B9%8B%E5%8E%BB%E6%8E%89%E8%AF%AD%E8%A8%80%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>很久没写bug了，最近写了一些业务上的小工具，因为包有点大，所以要裁一下。</p>
<p>首选其实就是去掉不需要的语言文件</p>
<h2 id="二、如何实现"><a href="#二、如何实现" class="headerlink" title="二、如何实现"></a>二、如何实现</h2><h3 id="2-1-添加默认语言"><a href="#2-1-添加默认语言" class="headerlink" title="2.1 添加默认语言"></a>2.1 添加默认语言</h3><p>在<code>electron</code>的入口文件添加</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="property">commandLine</span>.<span class="title function_">appendSwitch</span>(<span class="string">&#x27;lang&#x27;</span>, <span class="string">&#x27;zh-CN&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="2-2-在打包后的钩子处脚本删除"><a href="#2-2-在打包后的钩子处脚本删除" class="headerlink" title="2.2 在打包后的钩子处脚本删除"></a>2.2 在打包后的钩子处脚本删除</h3><p>比如我使用的是<code>electron-builder</code>，可以在打包配置文件中找到<code>afterPack</code>这个配置项</p>
<p>配置读取的脚本文件如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//build/hooks/afterPack.js</span></span><br><span class="line"><span class="comment">//参考 https://www.electron.build/configuration/configuration#afterpack</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">default</span> = <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">context</span>) &#123;</span><br><span class="line">    <span class="comment">//console.log(context)</span></span><br><span class="line">    <span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> localeDir = context.<span class="property">appOutDir</span> + <span class="string">&#x27;/locales/&#x27;</span></span><br><span class="line"></span><br><span class="line">    fs.<span class="title function_">readdir</span>(localeDir, <span class="keyword">function</span> (<span class="params">err, files</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(files &amp;&amp; files.<span class="property">length</span>)) <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = files.<span class="property">length</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">const</span> match = files[i].<span class="title function_">match</span>(<span class="regexp">/zh-CN\.pak/</span>) <span class="comment">//只保留中文</span></span><br><span class="line">            <span class="keyword">if</span> (match === <span class="literal">null</span>) &#123;</span><br><span class="line">                fs.<span class="title function_">unlinkSync</span>(localeDir + files[i])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="done"><a href="#done" class="headerlink" title="done"></a>done</h1><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.w3cways.com/2484.html">electron通过删除未使用的语言文件缩减打包后大小</a></p>
]]></content>
      <categories>
        <category>electron</category>
      </categories>
      <tags>
        <tag>electron</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的electron之旅（十）—— 生产快捷键打开控制台</title>
    <url>/2021/03/30/%E6%97%A0%E6%98%9F%E7%9A%84electron%E4%B9%8B%E6%97%85%EF%BC%88%E5%8D%81%EF%BC%89%E2%80%94%E2%80%94%20%E7%94%9F%E4%BA%A7%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%89%93%E5%BC%80%E6%8E%A7%E5%88%B6%E5%8F%B0/</url>
    <content><![CDATA[<h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>开发环境可以利用控制台调试，看网络请求啊乱七八糟的。但是打包以后就没办法看了。</p>
<h2 id="二、解决这个问题"><a href="#二、解决这个问题" class="headerlink" title="二、解决这个问题"></a>二、解决这个问题</h2><p>其实主要打开控制台的关键语句就是</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">webContents</span>.<span class="title function_">openDevTools</span>()</span><br></pre></td></tr></table></figure>

<p>那我们需要设置一个不常用的快捷键，避免误触来打开控制台</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;globalShortcut&#125; <span class="keyword">from</span> <span class="string">&#x27;electron&#x27;</span>;</span><br><span class="line"><span class="comment">// 快捷键注册</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">registryShortcut</span>(<span class="params"></span>) &#123;</span><br><span class="line">  globalShortcut.<span class="title function_">register</span>(<span class="string">&#x27;CommandOrControl+J+K&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获取当前窗口</span></span><br><span class="line">    <span class="title class_">BrowserWindow</span>.<span class="title function_">getFocusedWindow</span>().<span class="property">webContents</span>.<span class="title function_">openDevTools</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 注册快捷键</span></span><br><span class="line">  <span class="keyword">if</span> (!isDevelopment) &#123;</span><br><span class="line">    <span class="title function_">registryShortcut</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;will-quit&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  globalShortcut.<span class="title function_">unregisterAll</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>即可</p>
]]></content>
      <categories>
        <category>electron</category>
      </categories>
      <tags>
        <tag>electron</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的electron之旅（四）——打包</title>
    <url>/2020/09/09/%E6%97%A0%E6%98%9F%E7%9A%84electron%E4%B9%8B%E6%97%85%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94%E6%89%93%E5%8C%85/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>我是用的是vue-cli-plugin-electron-builder提供的集成方式</p>
<p>此插件提供的打包插件是electron-builder</p>
<h1 id="预知项"><a href="#预知项" class="headerlink" title="预知项"></a>预知项</h1><p>1.在什么系统上默认打什么系统的包<br>2.mac上可以打全平台的包<br>3.win/linux不可以打mac的包<br>4.不建议在mac上打windows的包,nsis在electron的打包下存在bug,打的包无法卸载</p>
<h1 id="打包介绍"><a href="#打包介绍" class="headerlink" title="打包介绍"></a>打包介绍</h1><p>默认提供的打包命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;electron:build&quot;: &quot;vue-cli-service electron:build&quot;,</span><br></pre></td></tr></table></figure>

<h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><h2 id="mac如何打windows的exe文件"><a href="#mac如何打windows的exe文件" class="headerlink" title="mac如何打windows的exe文件"></a>mac如何打windows的exe文件</h2><p>第一个–不要删,是npm传值的意思</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run electron:build -- --win nsis</span><br></pre></td></tr></table></figure>

<h2 id="linux下如何打windows的包"><a href="#linux下如何打windows的包" class="headerlink" title="linux下如何打windows的包"></a>linux下如何打windows的包</h2><p>这个比较复杂了,建议是用docker,具体见<a href="https://www.electron.build/multi-platform-build">官网</a></p>
<h2 id="如何使用vue的mode模式"><a href="#如何使用vue的mode模式" class="headerlink" title="如何使用vue的mode模式"></a>如何使用vue的mode模式</h2><p>直接使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;electron:build:dev&quot;: &quot;vue-cli-service electron:build --mode dev&quot;,</span><br></pre></td></tr></table></figure>

<h2 id="打包参数去哪配"><a href="#打包参数去哪配" class="headerlink" title="打包参数去哪配"></a>打包参数去哪配</h2><p><a href="https://www.electron.build/configuration/configuration">官方文档:参数内容</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#vue.config.js</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  pluginOptions: &#123;</span><br><span class="line">    electronBuilder: &#123;</span><br><span class="line">      preload: &#x27;./src/preload.js&#x27;,</span><br><span class="line">      // 打包参数</span><br><span class="line">      builderOptions: &#123;</span><br><span class="line">        appId: &#x27;com.xxxx.xxx&#x27;,</span><br><span class="line">        productName: &#x27;项目名称&#x27;,</span><br><span class="line">        win: &#123;</span><br><span class="line">          target: [</span><br><span class="line">            &#123;</span><br><span class="line">              target: &#x27;nsis&#x27;, // 我们要的目标安装包</span><br><span class="line">            &#125;,</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>electron</category>
      </categories>
      <tags>
        <tag>electron</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的nginx配置学习（一）-基础配置</title>
    <url>/2021/01/14/%E6%97%A0%E6%98%9F%E7%9A%84nginx%E9%85%8D%E7%BD%AE%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89-%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>有个静态项目需要本地跑起来调试。这个项目还是前后端不分离的。</p>
<p>接口有发布好的开发环境。不想跑java，想直接跑前端调试。</p>
<p>所以用nginx</p>
<h1 id="nginx安装"><a href="#nginx安装" class="headerlink" title="nginx安装"></a>nginx安装</h1><p>我是mac，brew是什么就不多说了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">brew install nginx</span><br><span class="line"><span class="comment"># 查看信息</span></span><br><span class="line">brew info nginx</span><br></pre></td></tr></table></figure>

<h1 id="打开配置文件nginx-conf"><a href="#打开配置文件nginx-conf" class="headerlink" title="打开配置文件nginx.conf"></a>打开配置文件nginx.conf</h1><p>brew info命令会输出conf的地址，请仔细查看。</p>
<p>不要怕改错，同文件夹下有个default，随时可以用默认配置覆盖</p>
<p><img src="/images/nginx1/1.png" alt="1.png"></p>
<p>默认配置长下面这样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">worker_processes  1;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  applocation/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       8080;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    include servers/*;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们需要往里面加一个配置指向本地，新增一个server对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 7788;</span><br><span class="line">        server_name localhost;</span><br><span class="line"></span><br><span class="line">        location /a &#123;</span><br><span class="line">            # root /Users/xing.wu/Desktop;</span><br><span class="line">            alias /Users/xing.wu/Desktop;</span><br><span class="line">            index index.html index.htm;</span><br><span class="line">            # 如果不是本地文件就转发</span><br><span class="line">            if (!-e $request_filename)&#123;</span><br><span class="line">				proxy_pass http://www.baidu.com;</span><br><span class="line">			&#125;</span><br><span class="line">            add_header Cache-Control &quot;private, no-store, no-cache, must-revalidate, proxy-revalidate&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    # ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-server"><a href="#1-server" class="headerlink" title="1.server"></a>1.server</h2><p>需要新增一个配置，实际上就是看需要增到哪了。</p>
<p>因为我暂时没有了解location的生效顺序规则，保险起见，我新建一个server对象</p>
<h2 id="2-listen"><a href="#2-listen" class="headerlink" title="2.listen"></a>2.listen</h2><p>监听的端口，也是响应的端口</p>
<h2 id="3-server-name"><a href="#3-server-name" class="headerlink" title="3.server_name"></a>3.server_name</h2><p>主机名</p>
<h2 id="4-location"><a href="#4-location" class="headerlink" title="4.location"></a>4.location</h2><p>如表面词意，位置。支持正则。</p>
<p>例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 配置</span><br><span class="line">listen 7788;</span><br><span class="line">server_name localhost;</span><br><span class="line"># 1.</span><br><span class="line">location /a&#123;&#125;</span><br><span class="line"></span><br><span class="line">http://localhost:7788/a   会被nginx响应</span><br><span class="line"></span><br><span class="line"># 2.</span><br><span class="line">location /b&#123;&#125;</span><br><span class="line"></span><br><span class="line">http://localhost:7788/b   会被nginx响应</span><br><span class="line"></span><br><span class="line"># 3.</span><br><span class="line">location /&#123;&#125;</span><br><span class="line"></span><br><span class="line">http://localhost:7788/   会被nginx响应</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>// TODO：补全此知识点，location的生效规则</p>
<p>因为我暂时没有了解location的生效顺序规则，所以我不会去写/这个规则。或许以后我会来补全这个知识点。</p>
<h3 id="4-1-root"><a href="#4-1-root" class="headerlink" title="4.1 root"></a>4.1 root</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location /b&#123;</span><br><span class="line">    root /Users/xing.wu/Desktop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>意思是当前server+port指向root</p>
<p>换句话说</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 输入：</span><br><span class="line">http://localhost:7788/b  </span><br><span class="line"></span><br><span class="line">#会被指向本地的文件夹：</span><br><span class="line">#输出：</span><br><span class="line">/Users/xing.wu/Desktop/b</span><br></pre></td></tr></table></figure>

<h3 id="4-2-alias"><a href="#4-2-alias" class="headerlink" title="4.2 alias"></a>4.2 alias</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location /b&#123;</span><br><span class="line">    alias /Users/xing.wu/Desktop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>别名，意思是server+port+location地址 = alias的地址</p>
<p>换句话说</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#输入：</span><br><span class="line">http://localhost:7788/b  </span><br><span class="line"></span><br><span class="line">#会被指向本地的文件夹：</span><br><span class="line">#输出：</span><br><span class="line">/Users/xing.wu/Desktop/</span><br><span class="line"></span><br><span class="line"># 注意没，本地路径后面没有b了</span><br></pre></td></tr></table></figure>

<h3 id="4-3-index-index-html-index-htm"><a href="#4-3-index-index-html-index-htm" class="headerlink" title="4.3 index index.html index.htm;"></a>4.3 index index.html index.htm;</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location /b&#123;</span><br><span class="line">    alias /Users/xing.wu/Desktop;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>意思是默认加载这些文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1.查找本地/Users/xing.wu/Desktop/文件夹下是否存在index index.html index.htm;</span><br><span class="line"># 2.访问路径</span><br><span class="line">http://localhost:7788/b</span><br><span class="line"># 3.重定向到路径上</span><br><span class="line">http://localhost:7788/b/index.html</span><br></pre></td></tr></table></figure>

<h3 id="4-4-判断"><a href="#4-4-判断" class="headerlink" title="4.4 判断"></a>4.4 判断</h3><p>正常情况下，本地开发，前端文件当然得是本地的，只有接口请求才会要求转发</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location /b&#123;</span><br><span class="line">    alias /Users/xing.wu/Desktop;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line">     # 如果不是本地文件</span><br><span class="line">    if (!-e $request_filename)&#123;</span><br><span class="line">		xxx</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>$request_filename<br>当前连接请求的文件路径，由root或alias指令与URI请求生成。</p>
<p>-e表示只要filename存在，则为真，不管filename是什么类型，当然这里加了!就取反</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">额外的一些:</span><br><span class="line">-e filename 如果 filename存在，则为真</span><br><span class="line">-d filename 如果 filename为目录，则为真 </span><br><span class="line">-f filename 如果 filename为常规文件，则为真</span><br><span class="line">-L filename 如果 filename为符号链接，则为真</span><br><span class="line">-r filename 如果 filename可读，则为真 </span><br><span class="line">-w filename 如果 filename可写，则为真 </span><br><span class="line">-x filename 如果 filename可执行，则为真</span><br><span class="line">-s filename 如果文件长度不为0，则为真</span><br><span class="line">-h filename 如果文件是软链接，则为真</span><br></pre></td></tr></table></figure>

<p>因此，上面的判断其实就是：如果请求的东西不是本地文件，进入if判断中</p>
<h3 id="4-5-proxy-pass"><a href="#4-5-proxy-pass" class="headerlink" title="4.5 proxy_pass"></a>4.5 proxy_pass</h3><p>转发的意思。结合之前的判断</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location /b&#123;</span><br><span class="line">    alias /Users/xing.wu/Desktop;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line">    if (!-e $request_filename)&#123;</span><br><span class="line">		proxy_pass http://www.baidu.com;</span><br><span class="line">		break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以理解为，文件读本地的，接口转发到对应接口地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 输入(后缀带文件)</span><br><span class="line">http://localhost:7788/b/index.html</span><br><span class="line"># 输出</span><br><span class="line">/Users/xing.wu/Desktop/index.html</span><br><span class="line"></span><br><span class="line"># 输入(接口请求，没有后缀)</span><br><span class="line">http://localhost:7788/b/getVersion</span><br><span class="line"># 输出</span><br><span class="line">http://www.baidu.com/getVersion</span><br></pre></td></tr></table></figure>
<h3 id="4-6-add-header"><a href="#4-6-add-header" class="headerlink" title="4.6 add_header"></a>4.6 add_header</h3><p>就是添加header，我这里添加这段的意思是，本地文件之类的不用缓存。</p>
<p>不添加的话，本地文件改了，浏览器刷新，还是走缓存，不会响应最新的修改。需要强刷才行。</p>
<p>添加以后，普通刷新就可以看到修改了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">add_header Cache-Control &quot;private, no-store, no-cache, must-revalidate, proxy-revalidate&quot;;</span><br></pre></td></tr></table></figure>

<p>附赠一个小知识，如何强刷：</p>
<p>（1）打开浏览器</p>
<p>（2）打开控制台（F12），必须打开。</p>
<p>（3）把鼠标放到刷新按钮上，右键，注意是右键！！！</p>
<p>（4）选择：清空缓存并硬性重加载</p>
<p><img src="/images/nginx1/2.png" alt="2.png"></p>
<h1 id="nginx常用命令"><a href="#nginx常用命令" class="headerlink" title="nginx常用命令"></a>nginx常用命令</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 启动</span><br><span class="line"># nginx路径 -c 配置文件路径</span><br><span class="line"># 例如：</span><br><span class="line">nginx -c /usr/local/etc/nginx/nginx.conf</span><br><span class="line"></span><br><span class="line"># 停止</span><br><span class="line">nginx -s stop</span><br><span class="line"></span><br><span class="line"># 退出</span><br><span class="line">nginx -s quit</span><br><span class="line"></span><br><span class="line"># 重启</span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>

<p>如果使用brew，可以交给brew services托管命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 启动</span><br><span class="line">brew services start nginx</span><br><span class="line"># 停止</span><br><span class="line">brew services stop nginx</span><br><span class="line"># 重启</span><br><span class="line">brew services restart nginx</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://nginx.org/en/docs/varindex.html">nginx内置变量</a></p>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的nginx配置学习（二）——Vue router history配置引发的思考</title>
    <url>/2021/02/03/%E6%97%A0%E6%98%9F%E7%9A%84nginx%E9%85%8D%E7%BD%AE%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94Vue%20router%20history%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="啥是History模式"><a href="#啥是History模式" class="headerlink" title="啥是History模式"></a>啥是History模式</h1><p><a href="https://router.vuejs.org/zh/guide/essentials/history-mode.html">文档</a></p>
<h1 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h1><h3 id="前提：假设把打包后的文件放在根目录下（这个前提很重要-）"><a href="#前提：假设把打包后的文件放在根目录下（这个前提很重要-）" class="headerlink" title="前提：假设把打包后的文件放在根目录下（这个前提很重要!!!）"></a>前提：假设把打包后的文件放在根目录下（这个前提很重要!!!）</h3><p>从文档可以看到，nginx配置内容为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># nginx</span><br><span class="line">location / &#123;</span><br><span class="line">  try_files $uri $uri/ /index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实际上这是什么意思呢？</p>
<p>根据以上前提</p>
<p>我们如果把对应文件放到根目录下，差不多是这个意思</p>
<h2 id="1-把dist包内容放到根路径下"><a href="#1-把dist包内容放到根路径下" class="headerlink" title="1.把dist包内容放到根路径下"></a>1.把dist包内容放到根路径下</h2><p>比如我们在桌面新建一个文件夹Nginx,然后把dist包里的内容都放进来</p>
<p>大概长这样<br><img src="/images/nginx2/1.png" alt="1"></p>
<h2 id="2-nginx构造server"><a href="#2-nginx构造server" class="headerlink" title="2.nginx构造server"></a>2.nginx构造server</h2><p>文档只有一个location的配置，并且写了前提是放在根路径，所以这个前提很重要，我们需要先构造这么一个前提，需要把上面的Nginx文件夹设置为根路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">       listen 8899;</span><br><span class="line">       server_name localhost;</span><br><span class="line">       root  /Users/xing.wu/Desktop/Nginx;</span><br><span class="line">       # 下面写location</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>构造这样一个server，使localhost:8899默认指向为 /Users/xing.wu/Desktop/Nginx 这个路径</p>
<p>这样，Nginx文件夹就默认变成了域名下的根路径</p>
<h2 id="3-补上location"><a href="#3-补上location" class="headerlink" title="3.补上location"></a>3.补上location</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 8899;</span><br><span class="line">        server_name localhost;</span><br><span class="line">        root  /Users/xing.wu/Desktop/Nginx;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            try_files $uri $uri/ /index.html;</span><br><span class="line">            index index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>完整的配置就出来了，接着我们再来解析一下这个配置</p>
<p><a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#try_files">try_files</a>：按指定顺序检查文件是否存在，并使用找到的第一个文件进行请求处理；该处理在当前上下文中执行。文件的路径是file根据根和别名指令从参数 构造的 。可以通过在名称末尾指定斜杠（例如“ $uri/”）来检查目录的存在。如果未找到任何文件，则进行内部重定向到uri最后一个参数中指定的文件 。</p>
<p>$uri：这个变量指当前的请求URI，不包括任何参数(见$args)。这个变量反映任何内部重定向或index模块所做的修改。注意，这和$request_uri不同，因$request_uri是浏览器发起的不做任何修改的原生URI。不包括协议及主机名。</p>
<p>$uri/：参考上面的try_files</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 访问</span><br><span class="line">http://localhost:8899</span><br><span class="line"># 或</span><br><span class="line">http://localhost:8899/index.html</span><br><span class="line"></span><br><span class="line"># 实际访问的文件都是</span><br><span class="line">/Users/xing.wu/Desktop/Nginx/index.html</span><br></pre></td></tr></table></figure>

<p>然后访问对应的js去渲染页面</p>
<h2 id="那么这时候我就有疑问了"><a href="#那么这时候我就有疑问了" class="headerlink" title="那么这时候我就有疑问了"></a>那么这时候我就有疑问了</h2><h1 id="疑问🤔️"><a href="#疑问🤔️" class="headerlink" title="疑问🤔️"></a>疑问🤔️</h1><h2 id="1-如果不要try-files-uri-uri-index-html-呢？"><a href="#1-如果不要try-files-uri-uri-index-html-呢？" class="headerlink" title="1.如果不要try_files $uri $uri/ /index.html;呢？"></a>1.如果不要try_files $uri $uri/ /index.html;呢？</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try_files $uri $uri/ /index.html;</span><br></pre></td></tr></table></figure>
<p>的目的是为了找不到的时候匹配index.html，但是上线都会配置对应的路径和文件，怎么会发生找不到的事呢。</p>
<p>那我干脆不要这一行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">        # try_files $uri $uri/ /index.html;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>按道理也能正确访问啊。</p>
<p>当前nginx配置如下图：</p>
<p><img src="/images/nginx2/q1n.png" alt="q1n"></p>
<h3 id="答："><a href="#答：" class="headerlink" title="答："></a>答：</h3><p>确实，在去掉这一行的时候</p>
<p>无论是访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:8899</span><br><span class="line"># 还是</span><br><span class="line">http://localhost:8899/index.html</span><br></pre></td></tr></table></figure>
<p>如果vue路由存在根路径，也能正确访问根路径，如下图<br><img src="/images/nginx2/2.png" alt="2"><br><img src="/images/nginx2/3.png" alt="3"></p>
<p>尤其是当我们点击的时候按钮的时候，似乎一切都正常<br><img src="/images/nginx2/4.gif" alt="4"></p>
<p>但是！！！！<br>当你在非根路由刷新的时候<br><img src="/images/nginx2/5.gif" alt="5"></p>
<p>看见没，404了。</p>
<p>因为当切换到</p>
<p>localhost:8899/about</p>
<p>的时候，实际上希望请求的是</p>
<p>/Users/xing.wu/Desktop/Nginx/about/index.html</p>
<p>但是很明显是没有这个文件的，所以404了（可以自己手动创建一个about文件夹放置一个index.html就可以验证了）</p>
<h4 id="如果添加了try-files-uri-uri-index-html"><a href="#如果添加了try-files-uri-uri-index-html" class="headerlink" title="如果添加了try_files $uri $uri/ /index.html;"></a>如果添加了try_files $uri $uri/ /index.html;</h4><p>意味着寻找 /Users/xing.wu/Desktop/Nginx/about/index.html 找不到的时候</p>
<p>会返回 /Users/xing.wu/Desktop/Nginx/index.html</p>
<p>这样作为模板的index.html就被加载上了，js也正常加载了，既然能匹配到js，就可以按照vue的路由逻辑，渲染页面了</p>
<p>加上try_files $uri $uri/ /index.html;以后的配置：<br><img src="/images/nginx2/6.png" alt="6"></p>
<p>刷新<br><img src="/images/nginx2/7.gif" alt="7"></p>
<h2 id="2-如果放在多层级路径下面呢？"><a href="#2-如果放在多层级路径下面呢？" class="headerlink" title="2.如果放在多层级路径下面呢？"></a>2.如果放在多层级路径下面呢？</h2><p>首先，vue的配置要写好再打包</p>
<p>其次，其实nginx配置不需要太多变化</p>
<p>比如，我希望使用 <a href="http://localhost:8899/hello/xing">http://localhost:8899/hello/xing</a> 来访问我的首页</p>
<p>那么配置可以改为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 8899;</span><br><span class="line">        server_name localhost;</span><br><span class="line"></span><br><span class="line">        location /hello/xing &#123;</span><br><span class="line">            root  /Users/xing.wu/Desktop/Nginx;</span><br><span class="line">            try_files $uri $uri/ /index.html;</span><br><span class="line">            index index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同理，Nginx文件夹下，需要新建hello文件夹，hello文件夹下需新建xing文件夹，里面放置打包产物即可<br>/Users/xing.wu/Desktop/Nginx/hello/xing/ 放产物</p>
<h2 id="3-如果是多页面呢？"><a href="#3-如果是多页面呢？" class="headerlink" title="3.如果是多页面呢？"></a>3.如果是多页面呢？</h2><p>如果是多页面，那么打出来的包实际上也是多个html，就应该访问具体指定的html。</p>
<p>毕竟使用不同模板html渲染出来的是不一样的。（使用不同html承载的vue页面之间其实也不能用vue-router跳转，得用a标签跳转，因为vue实例实际也不一样）</p>
<p>所以多页面如果没有使用一个html模板承载多个vue页面的话，其实不存在所谓的history模式，自然也就没有这个配置可言了。</p>
<p>但如果多页面中的某个页面存在使用了一个html模板渲染了多个页面，那么对该入口的路径还是需要配置try_files的。</p>
<p>（这一段比较绕，不知道能否看懂我再说什么。）</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h1><p><a href="https://www.cnblogs.com/jedi1995/p/10900224.html">陈一风的博客：nginx配置选项try_files详解</a></p>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的python学习之旅（一）-三方库管理文件</title>
    <url>/2019/09/08/%E6%97%A0%E6%98%9F%E7%9A%84python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85%EF%BC%88%E4%B8%80%EF%BC%89-%E4%B8%89%E6%96%B9%E5%BA%93%E7%AE%A1%E7%90%86%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>三方库管理文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">导出</span><br><span class="line">pip freeze &gt;requirements.txt</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">安装</span><br><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的react之旅（一）—— 遇到的问题</title>
    <url>/2021/04/23/%E6%97%A0%E6%98%9F%E7%9A%84react%E4%B9%8B%E6%97%85%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%20%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>记录一些我碰到的入门问题</p>
<h1 id="1-如何创建ts项目"><a href="#1-如何创建ts项目" class="headerlink" title="1.如何创建ts项目"></a>1.如何创建ts项目</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx create-react-app app-name --template typescript</span><br></pre></td></tr></table></figure>

<h1 id="2-react-ts项目eslint如何引入"><a href="#2-react-ts项目eslint如何引入" class="headerlink" title="2.react+ts项目eslint如何引入"></a>2.react+ts项目eslint如何引入</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add eslint --dev</span><br><span class="line"></span><br><span class="line">npx eslint --init</span><br></pre></td></tr></table></figure>
<p>选项如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">? How would you like to use ESLint? … </span><br><span class="line">  To check syntax only</span><br><span class="line">  To check syntax and find problems</span><br><span class="line">❯ To check syntax, find problems, and enforce code style</span><br><span class="line"></span><br><span class="line">? What <span class="built_in">type</span> of modules does your project use? … </span><br><span class="line">❯ JavaScript modules (import/export)</span><br><span class="line">  CommonJS (require/exports)</span><br><span class="line">  None of these</span><br><span class="line"></span><br><span class="line">? Which framework does your project use? … </span><br><span class="line">❯ React</span><br><span class="line">  Vue.js</span><br><span class="line">  None of these</span><br><span class="line"></span><br><span class="line">? Does your project use TypeScript? › No / Yes✔</span><br><span class="line"></span><br><span class="line">? Where does your code run? …  (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)</span><br><span class="line">✔ Browser</span><br><span class="line">  Node</span><br><span class="line"></span><br><span class="line">? How would you like to define a style <span class="keyword">for</span> your project? … </span><br><span class="line">❯ Use a popular style guide</span><br><span class="line">  Answer questions about your style</span><br><span class="line">  Inspect your JavaScript file(s)</span><br><span class="line"></span><br><span class="line">? Which style guide <span class="keyword">do</span> you want to follow? … </span><br><span class="line">❯ Airbnb: https://github.com/airbnb/javascript</span><br><span class="line">  Standard: https://github.com/standard/standard</span><br><span class="line">  Google: https://github.com/google/eslint-config-google</span><br><span class="line"></span><br><span class="line">? What format <span class="keyword">do</span> you want your config file to be <span class="keyword">in</span>? … (任选)</span><br><span class="line">  JavaScript</span><br><span class="line">  YAML</span><br><span class="line">❯ JSON</span><br><span class="line"></span><br><span class="line">? Would you like to install them now with npm? › No / Yes✔</span><br></pre></td></tr></table></figure>

<p>npm下载完成以后，删掉package-lock.json，重新使用yarn去加载依赖</p>
<p>接着，以为已经使用<code>airbnb规则</code>，万事大吉</p>
<p>但是你会发现特别多奇奇怪怪的错误，比如</p>
<h2 id="2-1-‘React’-was-used-before-it-was-defined"><a href="#2-1-‘React’-was-used-before-it-was-defined" class="headerlink" title="2.1 ‘React’ was used before it was defined"></a>2.1 ‘React’ was used before it was defined</h2><p><img src="/images/react1/1.png" alt="1.png"></p>
<p>入口文件第一行提示react在未定义前被调用，这就很离谱。</p>
<p>实际上这是ts引起的，我们先看<a href="https://stackoverflow.com/questions/63818415/react-was-used-before-it-was-defined/64024916#64024916">stackoverflow</a>的问题答案，再看<a href="https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-use-before-define.md#how-to-use">tslint的文档</a>，应该是ts声明引起的。</p>
<p>因此我们需要在<code>rules</code>中添加</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;no-use-before-define&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@typescript-eslint/no-use-before-define&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;error&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-2-Unable-to-resolve-path-to-module-‘-App’"><a href="#2-2-Unable-to-resolve-path-to-module-‘-App’" class="headerlink" title="2.2 Unable to resolve path to module ‘./App’"></a>2.2 Unable to resolve path to module ‘./App’</h2><p>接着我们会遇到文件引入的问题</p>
<p><img src="/images/react1/2.png" alt="2.png"></p>
<p>我们需要添加一个库<code>eslint-import-resolver-typescript</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add eslint-import-resolver-typescript --dev</span><br></pre></td></tr></table></figure>
<p>然后在<code>.eslintrc.json</code>添加settings，注意，不是rules</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;import/resolver&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;typescript&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>如果改完vscode还继续报错，重启vscode</p>
<h2 id="2-3-JSX-not-allowed-in-files-with-extension-‘-tsx’"><a href="#2-3-JSX-not-allowed-in-files-with-extension-‘-tsx’" class="headerlink" title="2.3 JSX not allowed in files with extension ‘.tsx’"></a>2.3 JSX not allowed in files with extension ‘.tsx’</h2><p><img src="/images/react1/3.png" alt="3.png"><br>rules添加</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;react/jsx-filename-extension&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;extensions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;.jsx&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;.tsx&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-4-Missing-file-extension-“tsx”-for-“-App”"><a href="#2-4-Missing-file-extension-“tsx”-for-“-App”" class="headerlink" title="2.4 Missing file extension “tsx” for “./App”"></a>2.4 Missing file extension “tsx” for “./App”</h2><h2 id="Missing-file-extension-“ts”-for-“-reportWebVitals”"><a href="#Missing-file-extension-“ts”-for-“-reportWebVitals”" class="headerlink" title="Missing file extension “ts” for “./reportWebVitals”"></a>Missing file extension “ts” for “./reportWebVitals”</h2><p>项目跑起来，发现还有错误<br>eslint添加<code>rules</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;import/extensions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;error&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;ignorePackages&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;ts&quot;</span><span class="punctuation">:</span> <span class="string">&quot;never&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;tsx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;never&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<p>终于，项目跑起来了</p>
<h2 id="总结一下："><a href="#总结一下：" class="headerlink" title="总结一下："></a>总结一下：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1.添加eslint</span><br><span class="line">yarn add eslint --dev</span><br><span class="line"># 2.回答eslint的问题</span><br><span class="line">npx eslint --init</span><br><span class="line"># 3.添加库eslint-import-resolver-typescript</span><br><span class="line">yarn add eslint-import-resolver-typescript --dev</span><br><span class="line"># 4.为eslint添加规则，最后如下</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;env&quot;: &#123;</span><br><span class="line">        &quot;browser&quot;: true,</span><br><span class="line">        &quot;es2021&quot;: true</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;extends&quot;: [</span><br><span class="line">        &quot;plugin:react/recommended&quot;,</span><br><span class="line">        &quot;airbnb&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;parser&quot;: &quot;@typescript-eslint/parser&quot;,</span><br><span class="line">    &quot;parserOptions&quot;: &#123;</span><br><span class="line">        &quot;ecmaFeatures&quot;: &#123;</span><br><span class="line">            &quot;jsx&quot;: true</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ecmaVersion&quot;: 12,</span><br><span class="line">        &quot;sourceType&quot;: &quot;module&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;plugins&quot;: [</span><br><span class="line">        &quot;react&quot;,</span><br><span class="line">        &quot;@typescript-eslint&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;settings&quot;: &#123;</span><br><span class="line">        &quot;import/resolver&quot;: &#123;</span><br><span class="line">            &quot;typescript&quot;: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;rules&quot;: &#123;</span><br><span class="line">        &quot;no-use-before-define&quot;: &quot;off&quot;,</span><br><span class="line">        &quot;@typescript-eslint/no-use-before-define&quot;: [</span><br><span class="line">            &quot;error&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;react/jsx-filename-extension&quot;: [</span><br><span class="line">            2,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;extensions&quot;: [</span><br><span class="line">                    &quot;.js&quot;,</span><br><span class="line">                    &quot;.jsx&quot;,</span><br><span class="line">                    &quot;.ts&quot;,</span><br><span class="line">                    &quot;.tsx&quot;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;import/extensions&quot;: [</span><br><span class="line">            &quot;error&quot;,</span><br><span class="line">            &quot;ignorePackages&quot;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;ts&quot;: &quot;never&quot;,</span><br><span class="line">                &quot;tsx&quot;: &quot;never&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-如何暴露webpack配置"><a href="#3-如何暴露webpack配置" class="headerlink" title="3.如何暴露webpack配置"></a>3.如何暴露webpack配置</h1><h2 id="方式1"><a href="#方式1" class="headerlink" title="方式1:"></a>方式1:</h2><p><img src="/images/react1/4.png" alt="4.png"></p>
<p>新建项目时说的很清楚了，<code>yarn eject</code>，但是这样做以后就无法返回之前收起来的状态了。</p>
<p>作为从vue转过来的，我们可以选择一个类似vue.config.js的方式</p>
<h2 id="方案2"><a href="#方案2" class="headerlink" title="方案2:"></a>方案2:</h2><p>使用<code>@craco/craco</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add @craco/craco</span><br></pre></td></tr></table></figure>

<p>根项目下新建<code>craco.config.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;&#125;;</span><br></pre></td></tr></table></figure>
<p><code>package.json</code>脚本修改</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;start&quot;</span>: <span class="string">&quot;craco start&quot;</span>,</span><br><span class="line">  <span class="string">&quot;build&quot;</span>: <span class="string">&quot;craco build&quot;</span>,</span><br><span class="line">  <span class="string">&quot;test&quot;</span>: <span class="string">&quot;craco test&quot;</span>,</span><br><span class="line">  <span class="string">&quot;eject&quot;</span>: <span class="string">&quot;craco eject&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<h1 id="4-设置别名，例如：src"><a href="#4-设置别名，例如：src" class="headerlink" title="4.设置别名，例如：src=@"></a>4.设置别名，例如：src=@</h1><h2 id="4-1-修改craco-config-js"><a href="#4-1-修改craco-config-js" class="headerlink" title="4.1.修改craco.config.js"></a>4.1.修改<code>craco.config.js</code></h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">pathResolve</span> = pathUrl =&gt; path.<span class="title function_">join</span>(__dirname, pathUrl)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">webpack</span>: &#123;</span><br><span class="line">		<span class="attr">alias</span>: &#123;</span><br><span class="line">			<span class="string">&#x27;@&#x27;</span>: <span class="title function_">pathResolve</span>(<span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">			<span class="string">&#x27;@assets&#x27;</span>: <span class="title function_">pathResolve</span>(<span class="string">&#x27;src/assets&#x27;</span>),</span><br><span class="line">			<span class="string">&#x27;@components&#x27;</span>: <span class="title function_">pathResolve</span>(<span class="string">&#x27;src/components&#x27;</span>),</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="4-2-修改tsconfig（加删除线是因为无效）"><a href="#4-2-修改tsconfig（加删除线是因为无效）" class="headerlink" title="4.2.修改tsconfig（加删除线是因为无效）"></a><del>4.2.修改tsconfig（加删除线是因为无效）</del></h2><p>修改<code>tsconfig</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;@/*&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;src/*&quot;</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>看似好像在代码中使用”@/xxx”不再报错了。</p>
<p>但是一旦使用<code>yarn start</code>运行就会发现，你加上的paths丢失了。</p>
<p>离谱不离谱</p>
<h2 id="4-3-正确的做法"><a href="#4-3-正确的做法" class="headerlink" title="4.3.正确的做法"></a>4.3.正确的做法</h2><p>根目录下添加<code>paths.json</code>文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;@/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;*&quot;</span><span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure>

<p>修改<code>tsconfig</code>文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./paths.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        ***</span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="4-4-eslint忽略-引入路径"><a href="#4-4-eslint忽略-引入路径" class="headerlink" title="4.4. eslint忽略@引入路径"></a>4.4. eslint忽略@引入路径</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;import/no-unresolved&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;ignore&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;^@/&quot;</span></span><br><span class="line">        <span class="punctuation">]</span> <span class="comment">// @ 是设置的路径别名</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>到现在为止，项目上可能遇到基础设置问题，应该都解决了</p>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的党员学习笔记（一）——为什么西方列强要侵略中国</title>
    <url>/2021/12/15/%E6%97%A0%E6%98%9F%E7%9A%84%E5%85%9A%E5%91%98%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<p>最近在读党史，记录一些随笔。</p>
<p>中国的近代史，自鸦片战争始。那么到底为什么，鸦片战争会爆发，列强为什么会侵略中国。<br>书中给了我一些启发。</p>
<p>中国曾经是一个历史悠久的东方大国，但是在近代，却落伍了。<br>西方国家率先爆发了资产阶级革命，并相继完成了工业革命，在新的生产方式下，资产阶级经过血与火的原始积累与殖民掠夺，开始了它的发展。”在它不到一百年的统治中所创造的生产力，比过去的一些世代所创造的生产力还要强大。”————《共产党宣言》。无论是对自然的征服，对机器的采用，对化学的应用等，这个时代的资产阶级，都走在了时代的前列。</p>
<p>那么具有如此之高生产力的资产阶级，为什么还会向外殖民侵略呢？其实列宁的《俄国资本主义的发展》早就揭示了：“资本主义如果不经常扩大其统治范围，如果不开发新的地方并把非资本主义的古老国家，卷入世界经济的漩涡，他就不能存在与发展。”</p>
<p>当然，这是结果，那我们要想想为什么列宁会总结出这样一句话。其实很简单，因为生成力高，制作商品成品非常快，作为资本家，产品积压的也就越多，但是市场就那么多，如果没有足够的市场来消化这些商品，那么资本家的钱就会囤积在商品上，无法得到资金的回流和扩大再生产，因此资本主义必须扩大市场和统治范围，才能把商品销售出去，获得发展。</p>
<p>因此，当自家的市场已经被资本主义统治了，如果想要再发展，就必须扩大资本主义的统治范围。而当时，一个幅员辽阔，资源丰富的东方古国——中国，自然成为了西方资本主义国家垂涎的市场。</p>
<p>这也就解释了为什么西方列强会想进入中国市场。</p>
<p>那么为什么他们不和平进入，而要采取战争侵略的方式？带着这个问题，我接着往后看。</p>
]]></content>
      <categories>
        <category>党员学习笔记</category>
      </categories>
      <tags>
        <tag>党员学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的党员学习笔记（六） —— 辛亥革命</title>
    <url>/2022/05/16/%E6%97%A0%E6%98%9F%E7%9A%84%E5%85%9A%E5%91%98%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%83%EF%BC%89/</url>
    <content><![CDATA[<p>最近在读党史，记录一些随笔。</p>
<p>孙中山先生是一位伟大的爱国主义者，也是中国民主革命的伟大先行者。</p>
<p>三民主义由民族主义（Principles of Nationalism）、民权主义（Principles of Democracy）和民生主义（Principles of People’s Livelihood）组成。</p>
<p>三民主义是孙中山先生民主思想的精髓和高度概括。</p>
<p>孙中山先生创立的中国同盟会，以“驱除鞑虏，恢复中华，创立民国，平均地权”的十六字革命纲领，首次提出了要以资产阶级民主共和国取代封建王朝的革命目标。</p>
<p>在同盟会成立后，革命党人开始了宣传工作，并积极联络军队，先后发起了一系列武装起义。如：广东潮州黄冈起义，惠州七女湖起义，广州起义等。这些奇艺虽然实质上是脱离人民群众的单纯军事行动，因而很快失败，但它反映了资产阶级革命党人反封建的精神，在全国不断扩大了影响力。</p>
<p>最终，以湖北新军为主力，发起的武昌起义获得了全国各省的积极响应，迅速推翻了清王朝，建立了中华民国。</p>
<p>1912年1月1日，孙中山在南京就任中华民国第一任临时大总统，发布《中华民国临时约法》，并颁布了多项新的政策政令，如：改国号为中华民国，不再跪拜，不再留长发，女子不再裹小脚等。反映出以孙中山先生为首的资产阶级革命派除旧布新，矢志共和的革命精神。</p>
<p>辛亥革命的成功，在于它推翻了清王朝的封建统治，结束了中国几千年的君主专制制度，推动了中国人民思想解放。为中国的先进分子探索救国救民的道路，拓宽了视野，为中国的进步潮流打开了阀门。</p>
<p>但辛亥革命也有弱点，没能提出明确的反帝反封建的革命纲领，加上帝国主义和封建势力在当时的力量强大，导致南京临时政府仅存在三个月，就被以袁世凯为代表的北洋军阀窃取了革命成果。因此从根本上讲，辛亥革命，既未能产出帝国主义和封建势力在中国的根基，也没能改变中国半殖民地半封建的社会性质。从这个角度看，辛亥革命并未成功。</p>
<p>尽管如此，辛亥革命仍然是中国人民为改变自己命运而崛起的一个伟大起点，后续的革命者们从辛亥革命未能解决中国所面临的基本问题这一事实中逐渐意识到，在中国半殖民地半封建社会的历史条件下，建立资产阶级民主共和国是不可能的，必须另外探索救国救民的新道路。</p>
]]></content>
      <categories>
        <category>党员学习笔记</category>
      </categories>
      <tags>
        <tag>党员学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的党员学习笔记（三）—— 西方侵略</title>
    <url>/2022/01/07/%E6%97%A0%E6%98%9F%E7%9A%84%E5%85%9A%E5%91%98%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<p>最近在读党史，记录一些随笔。</p>
<p>西方列强通过一次又一次的对华侵略战争，签订了一系列的不平等条约。西方列强在中国的活动，是以享受条约所赋予的特权为基本特征的。它们通过不平等条约，在中国取得了许多重要的特权。如设立港口“租界”，开设矿场，修筑铁路，建立银行等。它们控制着通商口岸，海关，对外贸易，交通运输。大量的倾销它们的商品，把中国变成它们的销售市场和榨取原料的基地。</p>
<p>实际上我们可以看到，所有的殖民地，资本主义国家对他们的态度都是一样的，要么变成某一单一原料的生产基地，要么变成产品倾销地，或二者皆有。反过来想想现在，大多数的发展中国家，有很多都是单一的原料生产国，巴西，菲律宾，厄瓜多尔等等。现有的西方发达国家，限制发展中国家们的发展，只希望它们成为单一的原料生产国，而加工等作业停留在本国，以及其便宜的原材料进口，然后对外输出商品。</p>
<p>在19世纪末，世界资本主义开始进入帝国主义阶段，垄断代替自由竞争模式。甲午战争后，资本输出成为帝国主义侵华的特殊手段。除在华投资建厂外，对中国的贷款成为帝国主义控制中国财政，争夺“势力范围“和左右中国政局的工具。除经济侵略之外，还有文化侵略，以传教为中心，不断对中国实行着精神灌输，妄图通过潜移默化的思想教育去”统治“中国人。</p>
<p>从1840年战争伊始，到20世纪初，中国虽然保持着形式上的独立，但是实际上已经完全沦为几个帝国主义国家的半殖民地，面临着空前的民族危机。</p>
]]></content>
      <categories>
        <category>党员学习笔记</category>
      </categories>
      <tags>
        <tag>党员学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的党员学习笔记（二）——为什么西方列强要用战争的方式侵略中国</title>
    <url>/2022/01/06/%E6%97%A0%E6%98%9F%E7%9A%84%E5%85%9A%E5%91%98%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<p>最近在读党史，记录一些随笔。</p>
<p>前面我们解释了为什么西方的资本主义国家想要进入中国市场。但是为什么不通过贸易的方式和平进入，而要发动鸦片战争？</p>
<p>带着这个问题，我继续阅读着党史。</p>
<p>西方资本主义国家也曾希望通过商品贸易进入中国，但是当时的中国还处于封建社会，由清政府统治。<br>清政府采取闭关锁国的策略，认为自己是“天朝上国”，物资充沛，自给自足。而确实，当时的中国是小农经济社会，商品并未完全自由流通。因此西方的商品，无法进入中国，反倒是中国的茶叶丝绸瓷器，在国外很受欢迎，这样就形成了贸易逆差。对西方而言，不仅赚不到钱，反而不断向中国送钱。</p>
<p>所以西方想出了一个恶毒的点子，贩卖鸦片。（我的评价是：西方🐶真的畜生。）因为鸦片具有成瘾性，可以源源不断的带来收益。</p>
<p>幸而有识之士的出现，1839年林则徐虎门销烟，开启了全面禁烟的时代。</p>
<p>但是彼时我国无论是经济政治还是军事文化，全面滞后于世界。落后就要挨打，虎门销烟后，列强就打算用大炮轰开我国的大门，获得贸易权。1840年第一次鸦片战争，就这样发生了。1842年，英军直逼南京城下，迫使清政府屈服，订立了中国近代史上第一个丧权辱国的不平等条约——中英《南京条约》。</p>
<p>鸦片战争成为中国近代史的转折点。从此西方侵略者穷凶极恶的对中国发起一次又一次的战争，把中国一步一步推入半殖民地的深渊。</p>
]]></content>
      <categories>
        <category>党员学习笔记</category>
      </categories>
      <tags>
        <tag>党员学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的党员学习笔记（五） —— 近代中国人民革命的兴起</title>
    <url>/2022/03/26/%E6%97%A0%E6%98%9F%E7%9A%84%E5%85%9A%E5%91%98%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89/</url>
    <content><![CDATA[<p>最近在读党史，记录一些随笔。</p>
<p>从鸦片战争开始，中国的仁人志士就开始同帝国主义和封建势力开始了斗争。从最早的广东三元里抗英斗争，到义和团，太平天国运动。无数的仁人志士前仆后继，抛头颅洒热血，显示出中国人民不屈不挠的反侵略反压迫的坚强意志和斗争精神。“我自横刀向天笑，去留肝胆两昆仑”——谭嗣同。</p>
<p>反帝反封建斗争的主力最初是农民，其实从历史就能看出来，自古封建统治阶级压迫农民，当农民日子过不下去了，就会起义。</p>
<p>农民战争是封建社会阶级斗争的产物。“封建社会的主要矛盾，是农民阶级和地主阶级的矛盾。”（《毛泽东选集》第2卷第625页）</p>
<p>但是历史上的农民起义，哪怕成功了，也没有改善农民的生活水平，只是有一批“农民阶级”通过起义跃迁到了“地主阶级”。</p>
<p>太平天国是近代以来，旧式农民战争的巅峰！而且太平天国发布了中国农民战争史上的第一个完整土地纲领——《天朝田亩制度》，虽然因为其带有空想色彩难以落地，但它反映了千百年来，农民对拥有自己土地的渴望，对于发动农民参与反封建斗争起到了非常积极的作用。</p>
<p>太平天国爆发出的力量，让帝国主义者看到了中国蕴藏的巨大反抗力量，让他们知道，如此“民气坚韧”的中国是不可征服的。</p>
<p>但是农民不代表新的生产方式，提不出科学的有远见的斗争纲领，不能战胜强大的敌人。在中外反动势力的镇压下，农民斗争以一次又一次的失败告终。在半封建半殖民的中国，太平天国和义和团运动证明：农民固然是一只强大的反帝反封建主力军，但是如果没有先进阶级的领导，是无法完成反帝反封建的历史任务的。</p>
]]></content>
      <categories>
        <category>党员学习笔记</category>
      </categories>
      <tags>
        <tag>党员学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的党员学习笔记（六） —— 资产阶级初登政治舞台</title>
    <url>/2022/04/11/%E6%97%A0%E6%98%9F%E7%9A%84%E5%85%9A%E5%91%98%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89/</url>
    <content><![CDATA[<p>最近在读党史，记录一些随笔。</p>
<p>在近代中国，出现了两个新的阶级：资产阶级和无产阶级。</p>
<p>自甲午战争失败，以康有为，谭嗣同，梁启超为代表的资产阶级维新派奋起，希望通过变法挽救国家，通过维新运动，试图仿照英日等资本主义，建立君主立宪制，以发展资本主义为目标开始自上而下的改革。历时103天，通过光绪皇帝下达变法诏书，希望能拯救中国，史称“百日维新”。</p>
<p>但资产阶级维新派自身力量弱小，光绪皇帝没有实权，因此被封建顽固扼杀在摇篮里，戊戌六君子血洒菜市口。</p>
<p>戊戌维新的失败表明，在近代中国，资产阶级改良主义道路是行不通的。</p>
<p>这个时间段，各个阶级的有识之士都在探索，如何才能拯救国家，力挽狂澜。她们敏锐地意识到，落后就会挨打，所以无不希望通过学习西方的知识，武装自己，走上资本主义的富强道路。</p>
<p>先进的中国人向西方学习经历了一个演进深化的过程：以林则徐，龚自珍，魏源为代表的第一代，要开眼看世界，师夷长技以制夷-&gt;太平天国洪秀全明确支持《资政新篇》中的资本主义纲领-&gt;洋务运动“自强求富”，希望“中体西用”。</p>
<p>但是甲午海战的失败表明了洋务运动的破产。</p>
<p>这时的中国，被八国联军侵占北京，积贫积弱，人民饥寒交迫，面临着亡国灭种。在这样日益深重的民族危机和社会危机下，近代中国民族民主革命所面临的反帝反封建任务更迫切的摆在中国人民面前。</p>
<h3 id="谁能领导中国人民求得民族独立和人民解放，谁就将成为中国革命的领导阶级"><a href="#谁能领导中国人民求得民族独立和人民解放，谁就将成为中国革命的领导阶级" class="headerlink" title="谁能领导中国人民求得民族独立和人民解放，谁就将成为中国革命的领导阶级"></a>谁能领导中国人民求得民族独立和人民解放，谁就将成为中国革命的领导阶级</h3>]]></content>
      <categories>
        <category>党员学习笔记</category>
      </categories>
      <tags>
        <tag>党员学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的党员学习笔记（四）—— 列强侵华引发了什么变化</title>
    <url>/2022/02/15/%E6%97%A0%E6%98%9F%E7%9A%84%E5%85%9A%E5%91%98%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    <content><![CDATA[<p>最近在读党史，记录一些随笔。</p>
<p>外国资本主义的入侵，打断了中国社会的正常发展历程。由此派生的社会矛盾，阶级关系和革命性质逐渐发生了深刻的变化。</p>
<p>在外国资本主义入侵之前，我国是一个独立的以农业经济为基础的封建君主制国家，而社会内部的商品经济发展已经孕育着资本主义生产关系萌芽。假如没有西方资本主义的入侵，我国也许也会和西方国家一样，缓慢发展到资本主义社会。</p>
<p>但是因为西方列强的侵略，打断了中国的自然发展道路。西方列强的侵略目的，不是把中国变成资本主义国家，而是希望把中国变成单纯的商品市场和原料基地。由于资本主义的入侵，我国的资本主义也得到了加速发展，但是传统的农业经济仍是中国的主要经济形式，“封建社会中占主导地位的自给自足的自然经济虽然逐渐遭到破坏，但是封建的土地关系，即封建剥削制度的根基——地主阶级对农民的剥削，不但依旧保持着，而且同官僚买办资本和高利贷的剥削结合在了一起，在中国的社会经济生活中仍占明显优势”。这一点在后续的革命中非常重要，也是为什么我党的革命能成功。</p>
<p>另一方面不少仁人志士围绕挽救民族危亡和改革中国社会，开展了一系列的革命行动。</p>
]]></content>
      <categories>
        <category>党员学习笔记</category>
      </categories>
      <tags>
        <tag>党员学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的前端之旅（一）-vue-自定义组件使用v-model.sync</title>
    <url>/2019/12/20/%E6%97%A0%E6%98%9F%E7%9A%84%E5%89%8D%E7%AB%AF%E4%B9%8B%E6%97%85%EF%BC%88%E4%B8%80%EF%BC%89-vue-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6%E4%BD%BF%E7%94%A8v-model.sync/</url>
    <content><![CDATA[<h3 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h3><p>正常情况下，vue是由父到子的单向数据流。但总会碰到一些操蛋的需求，想直接在子组件去修改对应数据。这时候就会发现，报警告️了。只能写子组件通知父组件修改对应数据，代码就又大又不优雅。</p>
<p>这时候就会想，v-model怎么实现的，自己封装的组件能不能用？还有没有别的方式。</p>
<p>于是乎有了这篇憨批文章。</p>
<p>其实相关文章也有很多了，但总觉得还是要自己总结一下比较好。</p>
<p>先上官网链接 </p>
<p><a href="https://cn.vuejs.org/v2/api/#model">自定义组件使用model</a></p>
<p><a href="https://cn.vuejs.org/v2/guide/render-function.html#v-model">使用 JavaScript 代替模板功能</a></p>
<p>这里我想举好几个例子，但是又不知道怎么分点，因此我就随意分了</p>
<h3 id="一-默认value和input的例子"><a href="#一-默认value和input的例子" class="headerlink" title="一.默认value和input的例子"></a>一.默认value和input的例子</h3><p>子组件如下,test1.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--v-model:https://cn.vuejs.org/v2/api/#model--&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;main&quot;&gt;</span><br><span class="line">    &lt;div @click=&quot;sub&quot;&gt;</span><br><span class="line">      -</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;input</span><br><span class="line">      v-model=&quot;value&quot;</span><br><span class="line">      type=&quot;text&quot;</span><br><span class="line">      style=&quot;width:160px&quot;</span><br><span class="line">      @input=&quot;$emit(&#x27;input&#x27;, $event.target.value)&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">    &lt;!-- @input=&quot;$emit(&#x27;input&#x27;, $event.target.value)&quot; --&gt;</span><br><span class="line">    &lt;div @click=&quot;add&quot;&gt;</span><br><span class="line">      +</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;&#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    value: &#123;</span><br><span class="line">      type: [Number, String],</span><br><span class="line">      default: 0,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  data: () =&gt; (&#123;&#125;),</span><br><span class="line">  computed: &#123;&#125;,</span><br><span class="line">  watch: &#123;&#125;,</span><br><span class="line">  // created() &#123;&#125;,</span><br><span class="line">  mounted() &#123;&#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    add() &#123;</span><br><span class="line">      // this.value = this.value + 1</span><br><span class="line">      this.$emit(&#x27;input&#x27;, Number(this.value) + 1)</span><br><span class="line">    &#125;,</span><br><span class="line">    sub() &#123;</span><br><span class="line">      this.$emit(&#x27;input&#x27;, Number(this.value) - 1)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;less&quot; scoped&gt;</span><br><span class="line">.main &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: row;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>父组件如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!----&gt;</span><br><span class="line">&lt;!----&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;main&quot;&gt;</span><br><span class="line">    &lt;Test1 v-model=&quot;nums1&quot; /&gt;</span><br><span class="line">    &lt;Test2 v-model=&quot;nums2&quot; /&gt;</span><br><span class="line">    &lt;p&gt;num1:&#123;&#123; nums1 &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;num2:&#123;&#123; nums2 &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Test1 from &#x27;./test1.vue&#x27;</span><br><span class="line">import Test2 from &#x27;./test2.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  // import引入的组件需要注入到对象中才能使用</span><br><span class="line">  components: &#123;</span><br><span class="line">    Test1,</span><br><span class="line">    Test2,</span><br><span class="line">  &#125;,</span><br><span class="line">  data: () =&gt; (&#123;</span><br><span class="line">    nums1: 0,</span><br><span class="line">    nums2: 0,</span><br><span class="line">  &#125;),</span><br><span class="line">  computed: &#123;&#125;,</span><br><span class="line">  watch: &#123;&#125;,</span><br><span class="line">  mounted() &#123;&#125;,</span><br><span class="line">  // 方法集合</span><br><span class="line">  methods: &#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;less&quot; scoped&gt;</span><br><span class="line">.main &#123;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/images/vue-v-model/1.png" alt="官网说明"><br>从官网链接可以看到自定义组件，默认会把value这个key作为prop，默认有个input事件。（跟我用不用input这个dom没关系，可以换成&lt;p&gt;&lt;/p&gt;） 体现在代码中就是。</p>
<p><img src="/images/vue-v-model/2.png" alt="注释"></p>
<p>效果如下图</p>
<p><img src="/images/vue-v-model/3.png" alt="演示"><br>可以看到，跟随变化，且右边没有报警告</p>
<h3 id="二-非默认值，自己写"><a href="#二-非默认值，自己写" class="headerlink" title="二.非默认值，自己写"></a>二.非默认值，自己写</h3><p>因为value本身可能是某些组件的’关键字’，我们更需要的是能自定义的值</p>
<p>子组件test2.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--v-model:https://cn.vuejs.org/v2/api/#model--&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;main&quot;&gt;</span><br><span class="line">    &lt;div @click=&quot;sub&quot;&gt;</span><br><span class="line">      -</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; curvalue &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;div @click=&quot;add&quot;&gt;</span><br><span class="line">      +</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  model: &#123;</span><br><span class="line">    prop: &#x27;curvalue&#x27;,</span><br><span class="line">    event: &#x27;updatecurvalue&#x27;,</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    curvalue: &#123;</span><br><span class="line">      type: [Number, String],</span><br><span class="line">      default: 0,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    add() &#123;</span><br><span class="line">      this.$emit(&#x27;updatecurvalue&#x27;, Number(this.curvalue) + 1)</span><br><span class="line">    &#125;,</span><br><span class="line">    sub() &#123;</span><br><span class="line">      this.$emit(&#x27;updatecurvalue&#x27;, Number(this.curvalue) - 1)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;less&quot; scoped&gt;</span><br><span class="line">.main &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: row;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/images/vue-v-model/4.png" alt="如图"></p>
<p>如上图，通过model下的prop接收对应的事件，去做当前值的绑定和当前值变更的事件绑定。</p>
<p><img src="/images/vue-v-model/5.gif" alt="效果图"></p>
<h3 id="3-其实还有一种方式-sync"><a href="#3-其实还有一种方式-sync" class="headerlink" title="3.其实还有一种方式.sync"></a>3.其实还有一种方式.sync</h3><p><a href="https://cn.vuejs.org/v2/guide/components-custom-events.html#sync-%E4%BF%AE%E9%A5%B0%E7%AC%A6">sync官方文档</a></p>
<p>test3.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--v-sync:https://cn.vuejs.org/v2/guide/components-custom-events.html#sync-%E4%BF%AE%E9%A5%B0%E7%AC%A6--&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;main&quot;&gt;</span><br><span class="line">    &lt;div @click=&quot;sub&quot;&gt;</span><br><span class="line">      -</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; curvalue &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;div @click=&quot;add&quot;&gt;</span><br><span class="line">      +</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    curvalue: &#123;</span><br><span class="line">      type: [Number, String],</span><br><span class="line">      default: 0,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    add() &#123;</span><br><span class="line">      this.$emit(&#x27;update:curvalue&#x27;, Number(this.curvalue) + 1)</span><br><span class="line">    &#125;,</span><br><span class="line">    sub() &#123;</span><br><span class="line">      this.$emit(&#x27;update:curvalue&#x27;, Number(this.curvalue) - 1)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;less&quot; scoped&gt;</span><br><span class="line">.main &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: row;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>父组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!----&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;main&quot;&gt;</span><br><span class="line">    &lt;Test3 :curvalue.sync=&quot;nums1&quot; /&gt;</span><br><span class="line">    &lt;p&gt;num1:&#123;&#123; nums1 &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Test3 from &#x27;./test3.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  // import引入的组件需要注入到对象中才能使用</span><br><span class="line">  components: &#123; Test3 &#125;,</span><br><span class="line">  data: () =&gt; (&#123;</span><br><span class="line">    nums1: 0,</span><br><span class="line">    nums2: 0,</span><br><span class="line">  &#125;),</span><br><span class="line">  computed: &#123;&#125;,</span><br><span class="line">  watch: &#123;&#125;,</span><br><span class="line">  mounted() &#123;&#125;,</span><br><span class="line">  // 方法集合</span><br><span class="line">  methods: &#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;less&quot; scoped&gt;</span><br><span class="line">.main &#123;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/images/vue-v-model/6.png" alt="test3.vue"><br>效果如下</p>
<p><img src="/images/vue-v-model/7.gif" alt="如图"></p>
<p>使用你封装的控件的人，一看到这个.sync就知道，肯定是绑定了。</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的前端之旅（七）—— PC端Web错误日志收集1</title>
    <url>/2020/07/01/%E6%97%A0%E6%98%9F%E7%9A%84%E5%89%8D%E7%AB%AF%E4%B9%8B%E6%97%85%EF%BC%88%E4%B8%83%EF%BC%89%E2%80%94%E2%80%94%20PC%E7%AB%AFWeb%E9%94%99%E8%AF%AF%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%861/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>线上报错，啥也不知道，无法复现束手无策，客户开喷，研发背锅</p>
<p>这种事情，u1s1，大家都遇到过吧</p>
<p>解决方式就是有个日志收集上报的地方去查，查什么时候，什么时间，什么环境，出了什么错误，在某些程度能不那么被动</p>
<h1 id="选型"><a href="#选型" class="headerlink" title="选型"></a>选型</h1><p>是不是以为我是要说用哪家，实际上是准备自己写。。</p>
<p>免费的不放心，付费的买不起<br>但这里还是列出几家<br><a href="https://www.fundebug.com/">fundebug</a><br><a href="https://sentry.io/welcome/">sentry</a></p>
<h1 id="怎么做？"><a href="#怎么做？" class="headerlink" title="怎么做？"></a>怎么做？</h1><p>1.了解需要采集的指标<br>2.收集的方式<br>3.上报的方式<br>4.上报的时机<br>5.如何解析<br>6.告警</p>
<h2 id="1-了解需要采集的数据指标"><a href="#1-了解需要采集的数据指标" class="headerlink" title="1.了解需要采集的数据指标"></a>1.了解需要采集的数据指标</h2><p>这里可以参考一些付费的服务的采集指标，比如上面提到的fundebug，sentry，看看人家都收集啥。</p>
<p>在了解以后，根据自身平台业务的需要，自行采集。</p>
<p>比如我没有那些花里胡哨的需求，我只采集了如下信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">appId:我自己的业务数据，用来标识哪个App出了问题</span><br><span class="line">type:错误类型</span><br><span class="line">message:错误抛出的message</span><br><span class="line">stack:错误堆栈信息</span><br><span class="line">line:出错行</span><br><span class="line">column:出错列</span><br><span class="line">url:sourceMap后出错的js地址</span><br><span class="line">userAgent:用户的环境，什么浏览器，什么版本等等</span><br><span class="line">time:出错的世界</span><br></pre></td></tr></table></figure>
<p>实际上你还可以采集更多，但我的业务只需要这些了。</p>
<h2 id="2-收集"><a href="#2-收集" class="headerlink" title="2.收集"></a>2.收集</h2><h3 id="2-1-收集上报策略核心"><a href="#2-1-收集上报策略核心" class="headerlink" title="2.1 收集上报策略核心"></a>2.1 收集上报策略核心</h3><p>这里我引用参考文章中《自研多端错误收集平台》，贝贝的一句话作为核心思路:“差异化采集，格式化上报！”<br>在不同平台使用不同的采集方式。处理成统一的方式最后上报。<br>在我落地的表现上就是，不同平台写不同包去处理，最后统一格式上传</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vue,xxx-error-vue</span><br><span class="line">react,xxx-error-react</span><br><span class="line">wechat,xxx-error-wechat</span><br></pre></td></tr></table></figure>
<h3 id="2-2-错误的类型"><a href="#2-2-错误的类型" class="headerlink" title="2.2 错误的类型"></a>2.2 错误的类型</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.同步的脚本错误</span><br><span class="line">2.异步的脚本错误</span><br><span class="line">3.网络错误</span><br><span class="line">4.资源加载型错误</span><br></pre></td></tr></table></figure>
<p>我这里只捕获1，2，3</p>
<h3 id="2-3-收集的方式"><a href="#2-3-收集的方式" class="headerlink" title="2.3 收集的方式"></a>2.3 收集的方式</h3><h4 id="2-3-1-自动收集方式兜底"><a href="#2-3-1-自动收集方式兜底" class="headerlink" title="2.3.1 自动收集方式兜底"></a>2.3.1 自动收集方式兜底</h4><p>自动采集的方式是一定要有的。</p>
<p>这是个兜底策略，在没能手动上报的时候去抓住一些钩子抛出来的错误。</p>
<p>对于运行在浏览器环境的JavaScript代码来说，浏览器会抛出几个钩子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.onerror = function (message, source, line, column, error) &#123;</span><br><span class="line">//错误捕获1与   window.addEventListener(&#x27;error&#x27;） 二选一即可</span><br><span class="line">&#125;</span><br><span class="line">window.addEventListener(&#x27;error&#x27;, event =&gt; &#123;</span><br><span class="line">//错误捕获2，与   window.onerror 二选一即可     </span><br><span class="line">&#125;)</span><br><span class="line">window.addEventListener(&#x27;unhandledrejection&#x27;, event =&gt; &#123;</span><br><span class="line">//错误捕获3，未实现Promise.reject()</span><br><span class="line">// 默认实现，以免控制台红色警告</span><br><span class="line">    if (process.env.NODE_ENV === &#x27;production&#x27;) &#123; event.preventDefault(); &#125;</span><br><span class="line">&#125;)</span><br><span class="line">function networkHandle(): void &#123;</span><br><span class="line">//错误捕获4，网络请求错误</span><br><span class="line">    let originSend = XMLHttpRequest.prototype.send;</span><br><span class="line">    XMLHttpRequest.prototype.send = function () &#123;</span><br><span class="line">        console.log(&#x27;send&#x27;, arguments);</span><br><span class="line">        this.addEventListener(&#x27;loadend&#x27;, () =&gt; &#123;</span><br><span class="line">            console.log(&#x27;loadend&#x27;)</span><br><span class="line">            if (this.status !== 200) &#123;</span><br><span class="line">            //网络请求挂了，捕获</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        originSend.apply(this, arguments);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于额外的框架提供的错误，例如vue,它有着自己的Vue.config.errorHandler机制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Vue.config.errorHandler = function (error: Error, vm: Object, info: any) &#123;</span><br><span class="line">//错误捕获处理</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-3-2-手动上报方式"><a href="#2-3-2-手动上报方式" class="headerlink" title="2.3.2 手动上报方式"></a>2.3.2 手动上报方式</h4><p>这个方式也是一定要有的，它可以用来人为捕获一些业务/技术错误</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function notify(error: Error): void &#123;</span><br><span class="line">//这里面就写点格式化处理和上报</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-4-2-如何进行错误格式化"><a href="#2-4-2-如何进行错误格式化" class="headerlink" title="2.4.2 如何进行错误格式化"></a>2.4.2 如何进行错误格式化</h4><p>上面也说了，核心思想是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">差异化采集，格式化上报</span><br></pre></td></tr></table></figure>
<p>那么提到格式化，就不得不提到这个背景了。</p>
<p>在不同浏览器不同框架上，抛出来的error不一样！</p>
<p>比如：Vue.config.errorHandler中拿到的error是Vue处理后的信息，你无法很直观的拿到colum和line。</p>
<p>这里就不得不提到一个库了<a href="https://github.com/csnover/TraceKit">TraceKit</a></p>
<p>他的作用就是，格式化error，使得不同环境下的error输出相同格式的错误！</p>
<p>使用方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import * as TraceKit from &#x27;tracekit&#x27;</span><br><span class="line">function notify(error: Error): void &#123;</span><br><span class="line">    // 计算堆栈</span><br><span class="line">    let stack = TraceKit.computeStackTrace(error)</span><br><span class="line">    // stack = &#123;name:&#x27;xx&#x27;,mode:&#x27;xx&#x27;,message:&#x27;xxx&#x27;,stack:[&#123;</span><br><span class="line">    //	出错的js地址</span><br><span class="line">    //	url:&#x27;xxx&#x27;,</span><br><span class="line">    //	line:0,</span><br><span class="line">    //	column:0,</span><br><span class="line">    //&#125;,&#123;xx&#125;,&#123;xx&#125;]&#125;</span><br><span class="line">    //取第一个是因为一般第一个item中的url是真实报错的业务js</span><br><span class="line">    let tmpStack = get(stack, [&#x27;stack&#x27;, &#x27;0&#x27;])</span><br><span class="line">    // 格式化stack</span><br><span class="line">    let errorInfo: ErrorInfo = createErrorInfo(stack.name,stack.mode,stack.message,tmpStack)</span><br><span class="line">    //格式化成string</span><br><span class="line">    let result: String = formatErrorInfo(errorInfo)</span><br><span class="line">    //这是上报，原因见下面</span><br><span class="line">    let image = new Image()</span><br><span class="line">    image.src = baseUrl + result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="3-上报的方式"><a href="#3-上报的方式" class="headerlink" title="3.上报的方式"></a>3.上报的方式</h2><p>这里我使用请求图片get请求的方式上报</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function notify(error)&#123;</span><br><span class="line">//formatErrorInfo是自定义的格式化方法，后文会写做了什么</span><br><span class="line">let result : String = formatErrorInfo(error)</span><br><span class="line">let image = new Image()</span><br><span class="line">image.src = baseUrl + result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为什么？</p>
<p>1.图片请求没有跨域错误</p>
<p>2.使用图片发送get请求，上报信息，由于浏览器对图片有缓存，同样的请求，图片只会发送一次，避免重复上报</p>
<p>3.get请求简单</p>
<h2 id="4-上报的时机"><a href="#4-上报的时机" class="headerlink" title="4.上报的时机"></a>4.上报的时机</h2><p>较好的方式：制定本地策略，合并请求，统一上传，节省流量也减少服务端压力。</p>
<p>我就没那么多想法，出错就上报，直接一梭子往上怼就完事了，没到那个量级，也没那么多错误。后面也许会优化吧。</p>
<h2 id="5-如何解析"><a href="#5-如何解析" class="headerlink" title="5.如何解析"></a>5.如何解析</h2><p>挖个坑</p>
<h2 id="6-告警"><a href="#6-告警" class="headerlink" title="6.告警"></a>6.告警</h2><p>暂未做</p>
<h2 id="7-可视化"><a href="#7-可视化" class="headerlink" title="7.可视化"></a>7.可视化</h2><p>我们有elk，直接把数据格式化打到elk上就可以了。</p>
<p>但是目前没有没有想到好的方式去做sourceMap解析。</p>
<p>曾经设想过写kibana插件去完成这个操作，但是我整了半天都没跑起来，有点难受。</p>
<p>我的设想：<br>1.kibana提供插件的形式去调取elk的存储查询功能，这是最完美的解决方式了。<br>2.自己写页面，调取elk的查询接口。但阻塞点是elk的查询接口如何使用http调用？<br>3.自己去存错误，不用elk，但这太蠢了。不太想这么做。</p>
<h2 id="8-写个demo？"><a href="#8-写个demo？" class="headerlink" title="8.写个demo？"></a>8.写个demo？</h2><p><del>啥时候有空啥时候补一个。。。</del></p>
<p><a href="https://github.com/XingXiaoWu/errorDemo">demo</a></p>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://juejin.im/post/5ec5c4aee51d457893029189">前端早早聊-自研多端错误收集平台</a><br><a href="https://zhuanlan.zhihu.com/p/26085642">前端异常监控系统的落地</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的前端之旅（三）——如何调试cli工程</title>
    <url>/2020/04/29/%E6%97%A0%E6%98%9F%E7%9A%84%E5%89%8D%E7%AB%AF%E4%B9%8B%E6%97%85%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%E5%A6%82%E4%BD%95%E8%B0%83%E8%AF%95cli%E5%B7%A5%E7%A8%8B/</url>
    <content><![CDATA[<p>作为前端开发工程师，希望搭建一些基础设置，cli是必不可少的一项。</p>
<p>至于cli如何制作，文章一大堆，相信网上大家都能搜到。</p>
<p>但是cli工具如何debug，我查了2天，都没查到。</p>
<p>我用的开发工具是vscode。虽然我知道答案一定在<br><a href="https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_launch-configuration-attributes">VSCode调试</a>与<a href="https://nodejs.org/en/docs/guides/debugging-getting-started/">NodeJS调试入门</a>中，但我天资愚钝，不知道如何融合起来。</p>
<p>不过天不亡我，最终还是找到了解决方式。</p>
<p> 不多bb，直接上代码和截图。</p>
<h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><h4 id="1-新增vscode的launch选项卡"><a href="#1-新增vscode的launch选项卡" class="headerlink" title="1.新增vscode的launch选项卡"></a>1.新增vscode的launch选项卡</h4><p><img src="/images/cli-debug/1.png" alt="1"></p>
<p> 抄就完事了，注意端口号，是根据后续产生的端口号去填写，可以先填一个。</p>
<h4 id="2-项目入口添加代码"><a href="#2-项目入口添加代码" class="headerlink" title="2.项目入口添加代码"></a>2.项目入口添加代码</h4> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env node --inspect-brk</span><br></pre></td></tr></table></figure>
<p>  #!/usr/bin/env node是干什么用的大家一定都很熟悉，就不赘述了。<br> <img src="/images/cli-debug/2.png" alt="1"><br>  后面添加–inspect-brk，让它在启动的时候停滞。</p>
<h4 id="3-进行debugger"><a href="#3-进行debugger" class="headerlink" title="3.进行debugger"></a>3.进行debugger</h4><p>  这时候我们执行自己的cli命令（我这已经link过了，如何link就不多说了，百度都能查到）<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">szyx-cli init aaa</span><br></pre></td></tr></table></figure><br>比如我这执行了一个init命令，大家可以看到，这里停滞了，并给出了一个端口号，将此端口号，设置到第一步中的launch选项中的端口。<br> <img src="/images/cli-debug/3.png" alt="1"><br>使用vscode进行debug<br> <img src="/images/cli-debug/4.png" alt="1"><br>可以看到，成功进来了！这样就可以很方便的查看cli工程执行过程中所产生的错误。尽情编写自己的cli工具吧。</p>
<h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><h4 id="编写launch"><a href="#编写launch" class="headerlink" title="编写launch"></a>编写launch</h4><p> <img src="/images/cli-debug/5.png" alt="1"><br>配置如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     &quot;type&quot;: &quot;node&quot;,</span><br><span class="line">     &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">     &quot;name&quot;: &quot;调试操作&quot;,</span><br><span class="line">     &quot;program&quot;: &quot;$&#123;workspaceFolder&#125;/src/index.js&quot;,</span><br><span class="line">     &quot;outFiles&quot;: [],</span><br><span class="line">     &quot;protocol&quot;: &quot;inspector&quot;,</span><br><span class="line">     &quot;console&quot;: &quot;integratedTerminal&quot;,</span><br><span class="line">     &quot;args&quot;: [&quot;init&quot;, &quot;aaa&quot;]</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>program执行自己的入口文件，args中填写需要后续执行的命令参数即可。<br>缺点就是cli命令较多的时候，调试需要不停更改。</p>
<p>当然也有解决办法，只是我没再去深究了。</p>
<h3 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h3><p>不用vscode的朋友怎么调试。<br>可以查看<a href="https://nodejs.org/en/docs/guides/debugging-getting-started/">NodeJS调试入门</a>配合chrome://inspect来进行调试。<br>但我一样没去深究。</p>
<h3 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h3><p>在这个探究过程中遇到了许多热心朋友的帮助。非常感谢。</p>
<p>也有朋友就是靠着看日志写出了工具链，确实🐂🍺。</p>
<p>但我还是认为，磨刀不误砍柴工。<br>写程序的第一步一定是了解如何进行debug，不然我总感觉根本无法开发下去。。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://zhuanlan.zhihu.com/p/91135032">nodejs调试全局安装的cli脚本</a></p>
<p><a href="https://cnodejs.org/topic/58f0453449056f03483478c2">Node命令行开发如何Debug</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的前端之旅（九）——撤销与反撤销</title>
    <url>/2020/08/28/%E6%97%A0%E6%98%9F%E7%9A%84%E5%89%8D%E7%AB%AF%E4%B9%8B%E6%97%85%EF%BC%88%E4%B9%9D%EF%BC%89%E2%80%94%E2%80%94%E6%92%A4%E9%94%80%E4%B8%8E%E5%8F%8D%E6%92%A4%E9%94%80/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redo() &#123;</span><br><span class="line">  // 反撤销</span><br><span class="line">  document.execCommand(&#x27;redo&#x27;, false, null);</span><br><span class="line">&#125;,</span><br><span class="line">undo() &#123;</span><br><span class="line">  //撤销</span><br><span class="line">  document.execCommand(&#x27;undo&#x27;, false, null);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的前端之旅（二十一）—— 表单封装</title>
    <url>/2021/06/15/%E6%97%A0%E6%98%9F%E7%9A%84%E5%89%8D%E7%AB%AF%E4%B9%8B%E6%97%85%EF%BC%88%E4%BA%8C%E5%8D%81%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%20%E8%A1%A8%E5%8D%95%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>我们做的是后台类型的管理系统，因此相对应的表单就会很多。</p>
<p>相信做过类似项目的老哥懂得都懂。</p>
<p>因此我们希望能够通过一些相对简单的配置方式生成表单，不再需要写一大堆的组件。</p>
<p>尽量通过数据驱动。</p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>不管是哪个平台，思路都是相通的。</p>
<h2 id="1-基于UI框架封装"><a href="#1-基于UI框架封装" class="headerlink" title="1.基于UI框架封装"></a>1.基于UI框架封装</h2><p>react我们基于antd封装。</p>
<p>vue我们基于element封装。</p>
<p>这两个框架下的表单，几乎都满足了我们对表单的需要，只是需要写那么多标签代码，让人感到厌倦。</p>
<h2 id="2-如何根据数据驱动"><a href="#2-如何根据数据驱动" class="headerlink" title="2.如何根据数据驱动"></a>2.如何根据数据驱动</h2><p>想要简化标签，首先就需要约定数据格式，什么样类型的数据渲染什么样的标签。</p>
<p>那么我可以暂定，需要一个<code>type</code>，去做判断，渲染什么样的表单内容标签（是的，<code>if</code>判断，没有那么多花里胡哨，最朴实无华的代码就能满足我们的需求）</p>
<h2 id="3-确定需要渲染的标签"><a href="#3-确定需要渲染的标签" class="headerlink" title="3.确定需要渲染的标签"></a>3.确定需要渲染的标签</h2><p>业务中其实常用的表单标签就如下几类：</p>
<ul>
<li><code>select</code></li>
<li><code>checkbox</code></li>
<li><code>radio</code></li>
<li><code>input</code>(包括各个类型的，<code>password</code>，<code>textarea</code>之类的)</li>
<li><code>switch</code></li>
</ul>
<p>等等，需要再加</p>
<h2 id="4-类型需要传递下去"><a href="#4-类型需要传递下去" class="headerlink" title="4.类型需要传递下去"></a>4.类型需要传递下去</h2><p>需要把表单可能用到的属性传递下去。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>因为我们在vue和react上都有，所以我会给出两个框架的封装代码。</p>
<h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><p>我使用的是vue3+element-plus</p>
<p>封装两个组件，Form和FormItem</p>
<p>代码如下:</p>
<h3 id="Form"><a href="#Form" class="headerlink" title="Form"></a>Form</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- Form/index.vue--&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-form :ref=&quot;setFormRef&quot; :model=&quot;form&quot; label-width=&quot;80px&quot;&gt;</span><br><span class="line">    &lt;el-form-item</span><br><span class="line">      v-for=&quot;(item, index) in needs&quot;</span><br><span class="line">      :key=&quot;index&quot;</span><br><span class="line">      :prop=&quot;item.prop&quot;</span><br><span class="line">      :label=&quot;item.label&quot;</span><br><span class="line">      :rules=&quot;item.rules&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;!-- 内容 --&gt;</span><br><span class="line">      &lt;FormItem</span><br><span class="line">        v-model=&quot;form[item.prop]&quot;</span><br><span class="line">        :type=&quot;item.type&quot;</span><br><span class="line">        placeholder=&quot;请输入内容&quot;</span><br><span class="line">        :options=&quot;item.options || []&quot;</span><br><span class="line">        :disabled=&quot;item.disabled&quot;</span><br><span class="line">        v-bind=&quot;item&quot;</span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">  &lt;/el-form&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; defineComponent, computed, watch &#125; from &#x27;vue&#x27;;</span><br><span class="line">import FormItem from &#x27;../FormItem/index.vue&#x27;;</span><br><span class="line"></span><br><span class="line">export default defineComponent(&#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    FormItem,</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    // 需要写的表单内容</span><br><span class="line">    needs: &#123;</span><br><span class="line">      type: Array,</span><br><span class="line">      default: () =&gt; [],</span><br><span class="line">    &#125;,</span><br><span class="line">    // 已知的表单内容</span><br><span class="line">    modelValue: &#123;</span><br><span class="line">      type: Object,</span><br><span class="line">      default: () =&gt; &#123;&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    instance: &#123;</span><br><span class="line">      type: Object,</span><br><span class="line">      default: () =&gt; &#123;&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  emits: [&#x27;update:modelValue&#x27;, &#x27;update:instance&#x27;],</span><br><span class="line">  setup(props, context) &#123;</span><br><span class="line">    const form = computed(&#123;</span><br><span class="line">      get: () =&gt; props.modelValue,</span><br><span class="line">      set: (val) =&gt; &#123;</span><br><span class="line">        console.log(&#x27;变化&#x27;);</span><br><span class="line">        context.emit(&#x27;update:modelValue&#x27;, val);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">    const setFormRef = (el) =&gt; &#123;</span><br><span class="line">      context.emit(&#x27;update:instance&#x27;, el);</span><br><span class="line">    &#125;;</span><br><span class="line">    // 变化触发更新</span><br><span class="line">    watch(form, (newValue) =&gt; &#123;</span><br><span class="line">      context.emit(&#x27;update:modelValue&#x27;, newValue);</span><br><span class="line">    &#125;);</span><br><span class="line">    return &#123; form, setFormRef &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="FormItem"><a href="#FormItem" class="headerlink" title="FormItem"></a>FormItem</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- FormItem/index.vue--&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-input v-if=&quot;type === &#x27;input&#x27;&quot; clearable v-model=&quot;value&quot; v-bind=&quot;$attrs&quot; :class=&quot;propsClass&quot; /&gt;</span><br><span class="line">  &lt;el-input</span><br><span class="line">    v-else-if=&quot;type === &#x27;password&#x27;&quot;</span><br><span class="line">    type=&quot;password&quot;</span><br><span class="line">    clearable</span><br><span class="line">    v-model=&quot;value&quot;</span><br><span class="line">    v-bind=&quot;$attrs&quot;</span><br><span class="line">    :class=&quot;propsClass&quot;</span><br><span class="line">  /&gt;</span><br><span class="line">  &lt;el-radio-group</span><br><span class="line">    v-else-if=&quot;type === &#x27;radio&#x27;&quot;</span><br><span class="line">    v-model=&quot;value&quot;</span><br><span class="line">    v-bind=&quot;$attrs&quot;</span><br><span class="line">    :disabled=&quot;disabled&quot;</span><br><span class="line">    :class=&quot;propsClass&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;el-radio</span><br><span class="line">      v-for=&quot;(item, index) in options&quot;</span><br><span class="line">      :key=&quot;index&quot;</span><br><span class="line">      :label=&quot;item.value&quot;</span><br><span class="line">      :disabled=&quot;item.disabled&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &#123;&#123; item.label &#125;&#125;</span><br><span class="line">    &lt;/el-radio&gt;</span><br><span class="line">  &lt;/el-radio-group&gt;</span><br><span class="line">  &lt;el-checkbox-group</span><br><span class="line">    v-else-if=&quot;type === &#x27;checkbox&#x27;&quot;</span><br><span class="line">    v-model=&quot;value&quot;</span><br><span class="line">    v-bind=&quot;$attrs&quot;</span><br><span class="line">    :disabled=&quot;disabled&quot;</span><br><span class="line">    :class=&quot;propsClass&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;el-checkbox</span><br><span class="line">      v-for=&quot;(item, index) in options&quot;</span><br><span class="line">      :key=&quot;index&quot;</span><br><span class="line">      :label=&quot;item.value&quot;</span><br><span class="line">      :disabled=&quot;item.disabled&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &#123;&#123; item.label &#125;&#125;</span><br><span class="line">    &lt;/el-checkbox&gt;</span><br><span class="line">  &lt;/el-checkbox-group&gt;</span><br><span class="line">  &lt;el-input</span><br><span class="line">    v-else-if=&quot;type === &#x27;textarea&#x27;&quot;</span><br><span class="line">    type=&quot;textarea&quot;</span><br><span class="line">    clearable</span><br><span class="line">    v-model=&quot;value&quot;</span><br><span class="line">    v-bind=&quot;$attrs&quot;</span><br><span class="line">    :class=&quot;propsClass&quot;</span><br><span class="line">  /&gt;</span><br><span class="line">  &lt;el-select</span><br><span class="line">    v-else-if=&quot;type === &#x27;select&#x27;&quot;</span><br><span class="line">    clearable</span><br><span class="line">    v-model=&quot;value&quot;</span><br><span class="line">    v-bind=&quot;$attrs&quot;</span><br><span class="line">    :disabled=&quot;disabled&quot;</span><br><span class="line">    :class=&quot;propsClass&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;el-option</span><br><span class="line">      v-for=&quot;(item, index) in options&quot;</span><br><span class="line">      :key=&quot;index&quot;</span><br><span class="line">      :label=&quot;item.label&quot;</span><br><span class="line">      :disabled=&quot;item.disabled&quot;</span><br><span class="line">      :value=&quot;item.value&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">  &lt;/el-select&gt;</span><br><span class="line">  &lt;el-switch v-else-if=&quot;type === &#x27;switch&#x27;&quot; v-model=&quot;value&quot; v-bind=&quot;$attrs&quot; :class=&quot;propsClass&quot; /&gt;</span><br><span class="line">  &lt;el-time-select</span><br><span class="line">    v-else-if=&quot;type === &#x27;timeSelect&#x27;&quot;</span><br><span class="line">    v-model=&quot;value&quot;</span><br><span class="line">    v-bind=&quot;$attrs&quot;</span><br><span class="line">    :disabled=&quot;disabled&quot;</span><br><span class="line">    :class=&quot;propsClass&quot;</span><br><span class="line">  /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; defineComponent, computed, watchEffect &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">export default defineComponent(&#123;</span><br><span class="line">  name: &#x27;FormItem&#x27;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    // 需要绑定的值</span><br><span class="line">    modelValue: &#123;</span><br><span class="line">      type: [String, Boolean, Number, Array],</span><br><span class="line">      default: &#x27;&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">    // 传递下来的class</span><br><span class="line">    propsClass: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      default: &#x27;&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">    /**</span><br><span class="line">     * 表单的类型 radio 单选 checkbox 多选 input 输入 select 选择 cascader 卡片 switch 切换 timeSelect 时间选择</span><br><span class="line">     * @values radio, checkbox, input, select, cascader, switch, timeSelect,</span><br><span class="line">     */</span><br><span class="line">    type: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      default: &#x27;&#x27;,</span><br><span class="line">      require: true,</span><br><span class="line">    &#125;,</span><br><span class="line">    // &#123;value,disabled,source&#125;</span><br><span class="line">    options: &#123;</span><br><span class="line">      type: Array,</span><br><span class="line">      default: () =&gt; [&#123;&#125;],</span><br><span class="line">    &#125;,</span><br><span class="line">    disabled: &#123;</span><br><span class="line">      type: Boolean,</span><br><span class="line">      default: false,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  emits: [&#x27;update:modelValue&#x27;],</span><br><span class="line">  setup(props, context) &#123;</span><br><span class="line">    const value = computed(&#123;</span><br><span class="line">      get: () =&gt; props.modelValue,</span><br><span class="line">      set: (val) =&gt; &#123;</span><br><span class="line">        context.emit(&#x27;update:modelValue&#x27;, val);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    watchEffect(</span><br><span class="line">      () =&gt; props.modelValue,</span><br><span class="line">      (newValue) =&gt; &#123;</span><br><span class="line">        value.value = newValue;</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">    return &#123;</span><br><span class="line">      value,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;less&quot; scoped&gt;</span><br><span class="line">:deep(.el-*) &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.width100 &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里要注意的点是<code>v-bind=&quot;$attrs&quot;</code></p>
<ul>
<li><p>因为我们不可能将所有组件可能用到的<code>props</code>都写在这并导出没，而且也没有这个必要。</p>
</li>
<li><p>所以我们可以用到vue提供的<a href="https://vue3js.cn/docs/zh/api/instance-properties.html#attrs">$attrs</a>来帮助我们透传下去</p>
</li>
</ul>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>比如像这样一个表单</p>
<p><img src="/images/%E5%89%8D%E7%AB%AF21/1.png" alt="1"></p>
<p>我们只需要如下代码</p>
<p>Rules规则是我们单独定义的符合<code>async-validator</code>的规则，这里就不写引入了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;Form </span><br><span class="line">  v-model:instance=&quot;formRef&quot; </span><br><span class="line">  v-model=&quot;formData&quot; </span><br><span class="line">  :needs=&quot;needs&quot; </span><br><span class="line">/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;</span><br><span class="line">  defineComponent, reactive, computed, ref</span><br><span class="line">&#125; from &#x27;vue&#x27;;</span><br><span class="line">export default defineComponent(&#123;</span><br><span class="line">  setup()&#123;</span><br><span class="line">    const formRef = ref();</span><br><span class="line">    const options = reactive(&#123;</span><br><span class="line">      departments: [],</span><br><span class="line">      places: [],</span><br><span class="line">      roles: [],</span><br><span class="line">    &#125;);</span><br><span class="line">    const formData = reactive(&#123;</span><br><span class="line">      account: &#x27;&#x27;,</span><br><span class="line">      department: [],</span><br><span class="line">      name: &#x27;&#x27;,</span><br><span class="line">      password: &#x27;&#x27;,</span><br><span class="line">      practicePlace: [],</span><br><span class="line">      rePassword: &#x27;&#x27;,</span><br><span class="line">      roleId: &#x27;&#x27;,</span><br><span class="line">      uniqueid: &#x27;&#x27;,</span><br><span class="line">    &#125;);</span><br><span class="line">    const needs = computed(() =&gt; [</span><br><span class="line">      &#123;</span><br><span class="line">        label: &#x27;用户名&#x27;,</span><br><span class="line">        type: &#x27;input&#x27;,</span><br><span class="line">        prop: &#x27;name&#x27;,</span><br><span class="line">        propsClass: &#x27;width100&#x27;,</span><br><span class="line">        placeholder: &#x27;请输入2-20个汉字，字母或数字&#x27;,</span><br><span class="line">        rules: [</span><br><span class="line">          Rules.required(&#x27;用户名不得为空&#x27;),</span><br><span class="line">          Rules.dynamicLength(2, 20, &#x27;用户名长度为2-20位&#x27;),</span><br><span class="line">          Rules.cen,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        label: &#x27;用户账号&#x27;,</span><br><span class="line">        type: &#x27;input&#x27;,</span><br><span class="line">        prop: &#x27;account&#x27;,</span><br><span class="line">        propsClass: &#x27;width100&#x27;,</span><br><span class="line">        placeholder: &#x27;请输入2-20个字母或数字&#x27;,</span><br><span class="line">        rules: [</span><br><span class="line">          Rules.required(&#x27;用户账号不得为空&#x27;),</span><br><span class="line">          Rules.dynamicLength(2, 20, &#x27;用户账号长度为2-20位&#x27;),</span><br><span class="line">          Rules.en,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        label: &#x27;密码&#x27;,</span><br><span class="line">        type: &#x27;password&#x27;,</span><br><span class="line">        prop: &#x27;password&#x27;,</span><br><span class="line">        propsClass: &#x27;width100&#x27;,</span><br><span class="line">        placeholder: &#x27;支持6-20个字母、数字、特殊字符&#x27;,</span><br><span class="line">        rules: [</span><br><span class="line">          Rules.required(&#x27;密码不得为空&#x27;),</span><br><span class="line">          Rules.dynamicLength(6, 20, &#x27;密码长度为6-20位&#x27;),</span><br><span class="line">          Rules.password,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        label: &#x27;再输一次&#x27;,</span><br><span class="line">        type: &#x27;password&#x27;,</span><br><span class="line">        prop: &#x27;rePassword&#x27;,</span><br><span class="line">        propsClass: &#x27;width100&#x27;,</span><br><span class="line">        placeholder: &#x27;支持6-20个字母、数字、特殊字符&#x27;,</span><br><span class="line">        rules: [</span><br><span class="line">          Rules.required(&#x27;请再输入一次密码&#x27;),</span><br><span class="line">          Rules.dynamicLength(6, 20, &#x27;密码长度为6-20位&#x27;),</span><br><span class="line">          Rules.password,</span><br><span class="line">          Rules.same(formData.password, formData.rePassword, &#x27;两次密码输入不一致&#x27;),</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        label: &#x27;角色&#x27;,</span><br><span class="line">        type: &#x27;select&#x27;,</span><br><span class="line">        prop: &#x27;roleId&#x27;,</span><br><span class="line">        propsClass: &#x27;width100&#x27;,</span><br><span class="line">        placeholder: &#x27;请选择角色&#x27;,</span><br><span class="line">        rules: [Rules.required(&#x27;角色不得为空&#x27;)],</span><br><span class="line">        options: options.roles,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        label: &#x27;执业地点&#x27;,</span><br><span class="line">        type: &#x27;select&#x27;,</span><br><span class="line">        prop: &#x27;practicePlace&#x27;,</span><br><span class="line">        propsClass: &#x27;width100&#x27;,</span><br><span class="line">        placeholder: &#x27;请选择执业地点&#x27;,</span><br><span class="line">        multiple: true,</span><br><span class="line">        filterable: true,</span><br><span class="line">        options: [&#123; label: &#x27;全部&#x27;, value: &#x27;all&#x27; &#125;].concat(options.places),</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        label: &#x27;科室&#x27;,</span><br><span class="line">        type: &#x27;select&#x27;,</span><br><span class="line">        prop: &#x27;department&#x27;,</span><br><span class="line">        propsClass: &#x27;width100&#x27;,</span><br><span class="line">        placeholder: &#x27;请选择科室&#x27;,</span><br><span class="line">        multiple: true,</span><br><span class="line">        filterable: true,</span><br><span class="line">        options: [&#123; label: &#x27;全部&#x27;, value: &#x27;all&#x27; &#125;].concat(options.departments),</span><br><span class="line">      &#125;,</span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    // 网络请求获取options，这里就简写了</span><br><span class="line">    // *********************</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      formData,</span><br><span class="line">      needs,</span><br><span class="line">      formRef,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>我们只需要聚焦数据，就可以构造出一张表单。</p>
<h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><p>也是相似的，而且较之Vue的更加灵活，除了我们上述的这种常用表单，我们可以把后台管理的搜索项也认为是表单</p>
<h3 id="Form-1"><a href="#Form-1" class="headerlink" title="Form"></a>Form</h3><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ColProps</span>, <span class="title class_">Form</span>, <span class="title class_">FormInstance</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">FormLayout</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;antd/lib/form/Form&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">FormItem</span>, &#123; <span class="title class_">IFormItem</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../FormItem&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IForm</span> &#123;</span><br><span class="line">  <span class="attr">form</span>: <span class="title class_">FormInstance</span>&lt;<span class="built_in">any</span>&gt;;</span><br><span class="line">  itemLayout?: &#123;</span><br><span class="line">    <span class="attr">labelCol</span>: <span class="title class_">ColProps</span>;</span><br><span class="line">    <span class="attr">wrapperCol</span>: <span class="title class_">ColProps</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  layout?: <span class="title class_">FormLayout</span>;</span><br><span class="line">  <span class="attr">options</span>: <span class="title class_">IFormItem</span>[];</span><br><span class="line">  initialValues?: &#123; [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">any</span> &#125;;</span><br><span class="line">  onValuesChange?(<span class="attr">changedValues</span>: <span class="built_in">unknown</span>, <span class="attr">allValues</span>: <span class="built_in">any</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这是个单独的表单校验模板</span></span><br><span class="line"><span class="comment">/* eslint-disable no-template-curly-in-string */</span></span><br><span class="line"><span class="keyword">const</span> validateMessages = &#123;</span><br><span class="line">  <span class="attr">required</span>: <span class="string">&#x27;$&#123;label&#125;是必填项&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/* eslint-enable no-template-curly-in-string */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">FormComponent</span> = (<span class="attr">props</span>: <span class="title class_">IForm</span>): <span class="variable constant_">JSX</span>.<span class="property">Element</span> =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    form, onValuesChange, initialValues, options, layout, itemLayout,</span><br><span class="line">  &#125; = props;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Form</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">form</span>=<span class="string">&#123;form&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#123;<span class="attr">...itemLayout</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">layout</span>=<span class="string">&#123;layout&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">onValuesChange</span>=<span class="string">&#123;onValuesChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">initialValues</span>=<span class="string">&#123;initialValues&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">validateMessages</span>=<span class="string">&#123;validateMessages&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* 内容 */&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;options.map((item) =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">FormItem</span> <span class="attr">key</span>=<span class="string">&#123;item.value&#125;</span> &#123;<span class="attr">...item</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Form</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">FormComponent</span>.<span class="property">defaultProps</span> = &#123;</span><br><span class="line">  <span class="attr">layout</span>: <span class="string">&#x27;horizontal&#x27;</span>,</span><br><span class="line">  <span class="attr">itemLayout</span>: &#123;</span><br><span class="line">    <span class="attr">labelCol</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">wrapperCol</span>: &#123;&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">initialValues</span>: &#123;&#125;,</span><br><span class="line">  <span class="comment">// 此处默认定义为空函数</span></span><br><span class="line">  <span class="title function_">onValuesChange</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">FormComponent</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> &#123; <span class="title class_">IFormItem</span> &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>需要注意的点</p>
<ul>
<li><code>form</code>的引用实例由外部传入</li>
<li>取值赋值通过<code>formInstance</code>做，因为和vue不一样，react做父子双向绑定比较复杂，所以建议是不要做成<code>受控组件</code></li>
</ul>
<h3 id="FormItem-1"><a href="#FormItem-1" class="headerlink" title="FormItem"></a>FormItem</h3><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">Form</span>, <span class="title class_">Radio</span>, <span class="title class_">Select</span>, <span class="title class_">Input</span>, <span class="title class_">DatePicker</span>, <span class="title class_">Switch</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Rule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;antd/lib/form&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Option</span> &#125; = <span class="title class_">Select</span>;</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">RangePicker</span> &#125; = <span class="title class_">DatePicker</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">IFormItem</span> &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;input&#x27;</span> | <span class="string">&#x27;radio&#x27;</span> | <span class="string">&#x27;select&#x27;</span> | <span class="string">&#x27;rangePicker&#x27;</span> | <span class="string">&#x27;datePicker&#x27;</span> | <span class="string">&#x27;switch&#x27;</span>;</span><br><span class="line">  <span class="attr">label</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="comment">// 需要绑定的key值</span></span><br><span class="line">  <span class="attr">value</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="comment">// 可选项</span></span><br><span class="line">  placeholder?: <span class="built_in">string</span>;</span><br><span class="line">  options?: &#123; <span class="attr">label</span>: <span class="built_in">string</span>; <span class="attr">value</span>: <span class="built_in">string</span> | <span class="built_in">number</span> &#125;[];</span><br><span class="line">  otherConfig?: <span class="built_in">any</span>;</span><br><span class="line">  itemConfig? : <span class="built_in">any</span>;</span><br><span class="line">  rules?: <span class="title class_">Rule</span>[];</span><br><span class="line">  itemClass?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Form.Item似乎也不允许HOC</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">FormItemComponent</span> = (<span class="attr">props</span>: <span class="title class_">IFormItem</span>): <span class="variable constant_">JSX</span>.<span class="property">Element</span> =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">type</span>, label, value, rules, placeholder, otherConfig, options, itemClass, itemConfig,</span><br><span class="line">  &#125; = props;</span><br><span class="line">  <span class="comment">// 判断类型</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Form.Item</span> <span class="attr">label</span>=<span class="string">&#123;label&#125;</span> <span class="attr">name</span>=<span class="string">&#123;value&#125;</span> <span class="attr">rules</span>=<span class="string">&#123;rules&#125;</span> <span class="attr">className</span>=<span class="string">&#123;itemClass&#125;</span> &#123;<span class="attr">...itemConfig</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;(() =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">        switch (type) &#123;</span></span><br><span class="line"><span class="language-xml">          case &#x27;input&#x27;:</span></span><br><span class="line"><span class="language-xml">            return <span class="tag">&lt;<span class="name">Input</span> <span class="attr">placeholder</span>=<span class="string">&#123;placeholder&#125;</span> &#123;<span class="attr">...otherConfig</span>&#125; /&gt;</span>;</span></span><br><span class="line"><span class="language-xml">          case &#x27;radio&#x27;:</span></span><br><span class="line"><span class="language-xml">            return (</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Radio.Group</span> &#123;<span class="attr">...otherConfig</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;options?.map((item) =&gt; (</span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">Radio</span> <span class="attr">key</span>=<span class="string">&#123;item.value&#125;</span> <span class="attr">value</span>=<span class="string">&#123;item.value&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#123;item.label&#125;</span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;/<span class="name">Radio</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                ))&#125;</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">Radio.Group</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            );</span></span><br><span class="line"><span class="language-xml">          case &#x27;select&#x27;:</span></span><br><span class="line"><span class="language-xml">            return (</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Select</span> &#123;<span class="attr">...otherConfig</span>&#125; <span class="attr">placeholder</span>=<span class="string">&#123;placeholder&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;options?.map((item) =&gt; (</span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">Option</span> <span class="attr">key</span>=<span class="string">&#123;item.value&#125;</span> <span class="attr">value</span>=<span class="string">&#123;item.value&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#123;item.label&#125;</span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;/<span class="name">Option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                ))&#125;</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">Select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            );</span></span><br><span class="line"><span class="language-xml">          case &#x27;rangePicker&#x27;:</span></span><br><span class="line"><span class="language-xml">            return <span class="tag">&lt;<span class="name">RangePicker</span> &#123;<span class="attr">...otherConfig</span>&#125; /&gt;</span>;</span></span><br><span class="line"><span class="language-xml">          case &#x27;datePicker&#x27;:</span></span><br><span class="line"><span class="language-xml">            return <span class="tag">&lt;<span class="name">DatePicker</span> &#123;<span class="attr">...otherConfig</span>&#125; /&gt;</span>;</span></span><br><span class="line"><span class="language-xml">          case &#x27;switch&#x27;:</span></span><br><span class="line"><span class="language-xml">            return <span class="tag">&lt;<span class="name">Switch</span> &#123;<span class="attr">...otherConfig</span>&#125; /&gt;</span>;</span></span><br><span class="line"><span class="language-xml">          default:</span></span><br><span class="line"><span class="language-xml">            return <span class="tag">&lt;<span class="name">div</span> /&gt;</span>;</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">      &#125;)()&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Form.Item</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">FormItemComponent</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里要注意的点</p>
<ul>
<li>antd的FormItem，似乎不允许HOC（反正我试过是会出bug），也就是说判断渲染组件需要放在Item组件的内部做，不能单独抽出方法render！</li>
<li><a href="https://github.com/ant-design/ant-design/issues/4853">A List of antd’s components that cannot work with HOC</a></li>
</ul>
<h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><p>例如下面两个例子</p>
<p><img src="/images/%E5%89%8D%E7%AB%AF21/2.png" alt="2"></p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">Form</span></span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">FormComponent</span>, &#123; <span class="title class_">IFormItem</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../../components/FormComponent&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Welcome</span> = (): <span class="variable constant_">JSX</span>.<span class="property">Element</span> =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [form] = <span class="title class_">Form</span>.<span class="title function_">useForm</span>();</span><br><span class="line">  <span class="keyword">const</span> [saleList, setSaleList] = useState&lt;<span class="title class_">Options</span>[]&gt;([]);</span><br><span class="line">  <span class="keyword">const</span> [firmList, setFirmList] = useState&lt;<span class="title class_">Options</span>[]&gt;([]);</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">options</span>: <span class="title class_">IFormItem</span>[] = [&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;select&#x27;</span>,</span><br><span class="line">    <span class="attr">label</span>: <span class="string">&#x27;厂商名称&#x27;</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;clientId&#x27;</span>,</span><br><span class="line">    <span class="attr">options</span>: firmList,</span><br><span class="line">    <span class="attr">itemClass</span>: <span class="string">&#x27;width25&#x27;</span>,</span><br><span class="line">    <span class="attr">otherConfig</span>: &#123;</span><br><span class="line">      <span class="attr">onChange</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 选中触发搜索，具体的就不写了</span></span><br><span class="line">        <span class="title function_">search</span>();</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;select&#x27;</span>,</span><br><span class="line">    <span class="attr">label</span>: <span class="string">&#x27;销售人员&#x27;</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;saleId&#x27;</span>,</span><br><span class="line">    <span class="attr">options</span>: saleList,</span><br><span class="line">    <span class="attr">itemClass</span>: <span class="string">&#x27;width25&#x27;</span>,</span><br><span class="line">    <span class="attr">otherConfig</span>: &#123;</span><br><span class="line">      <span class="attr">onChange</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 选中触发搜索，具体的就不写了</span></span><br><span class="line">        <span class="title function_">search</span>();</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;];</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获取两个列表，具体的就不写了</span></span><br><span class="line">    <span class="title function_">getFirmList</span>();</span><br><span class="line">    <span class="title function_">getSaleList</span>();</span><br><span class="line">  &#125;, []);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">FormComponent</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">form</span>=<span class="string">&#123;form&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">layout</span>=<span class="string">&quot;inline&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">options</span>=<span class="string">&#123;options&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">initialValues</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">clientId:</span> &#x27;&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">saleId:</span> &#x27;&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Welcome</span>;</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E5%89%8D%E7%AB%AF21/3.png" alt="3"></p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">Form</span></span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">FormComponent</span>, &#123; <span class="title class_">IFormItem</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../../components/FormComponent&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">UserList</span> = (): <span class="variable constant_">JSX</span>.<span class="property">Element</span> =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> initialValues = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">email</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">account</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">rePassword</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">roleId</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> [userForm] = <span class="title class_">Form</span>.<span class="title function_">useForm</span>();</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">userOptions</span>: <span class="title class_">IFormItem</span>[] = [&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;input&#x27;</span>,</span><br><span class="line">    <span class="attr">label</span>: <span class="string">&#x27;名称&#x27;</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;name&#x27;</span>,</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title class_">Rules</span>.<span class="title function_">dynamicLength</span>(<span class="number">2</span>, <span class="number">20</span>),</span><br><span class="line">      <span class="title class_">Rules</span>.<span class="property">chinese</span>,</span><br><span class="line">    ],</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;input&#x27;</span>,</span><br><span class="line">    <span class="attr">label</span>: <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;email&#x27;</span>,</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;input&#x27;</span>,</span><br><span class="line">    <span class="attr">label</span>: <span class="string">&#x27;账号&#x27;</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;account&#x27;</span>,</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title class_">Rules</span>.<span class="title function_">dynamicLength</span>(<span class="number">2</span>, <span class="number">20</span>),</span><br><span class="line">      <span class="title class_">Rules</span>.<span class="property">cen</span>,</span><br><span class="line">    ],</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;input&#x27;</span>,</span><br><span class="line">    <span class="attr">label</span>: <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;password&#x27;</span>,</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title class_">Rules</span>.<span class="title function_">minLength</span>(<span class="number">6</span>),</span><br><span class="line">      <span class="title class_">Rules</span>.<span class="property">englishAndNumber</span>,</span><br><span class="line">    ],</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;input&#x27;</span>,</span><br><span class="line">    <span class="attr">label</span>: <span class="string">&#x27;再次确认密码&#x27;</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;rePassword&#x27;</span>,</span><br><span class="line">    <span class="attr">itemConfig</span>: &#123;</span><br><span class="line">      <span class="attr">dependencies</span>: [<span class="string">&#x27;password&#x27;</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title class_">Rules</span>.<span class="title function_">minLength</span>(<span class="number">6</span>),</span><br><span class="line">      <span class="title class_">Rules</span>.<span class="property">englishAndNumber</span>,</span><br><span class="line">      <span class="function">(<span class="params">&#123; getFieldValue &#125;</span>) =&gt;</span> (&#123;</span><br><span class="line">        <span class="title function_">validator</span>(<span class="params">_, value</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (!value || <span class="title function_">getFieldValue</span>(<span class="string">&#x27;password&#x27;</span>) === value) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>();</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;两次密码不一致&#x27;</span>));</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;),</span><br><span class="line">    ],</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;select&#x27;</span>,</span><br><span class="line">    <span class="attr">label</span>: <span class="string">&#x27;用户角色&#x27;</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;roleId&#x27;</span>,</span><br><span class="line">    options,</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;];</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">FormComponent</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">form</span>=<span class="string">&#123;userForm&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">options</span>=<span class="string">&#123;userOptions&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">itemLayout</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">labelCol:</span> &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">sm:</span> &#123; <span class="attr">span:</span> <span class="attr">5</span> &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">wrapperCol:</span> &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">sm:</span> &#123; <span class="attr">span:</span> <span class="attr">18</span> &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">initialValues</span>=<span class="string">&#123;initialValues&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">UserList</span>;</span><br></pre></td></tr></table></figure>

<h1 id="over"><a href="#over" class="headerlink" title="over"></a>over</h1>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的前端之旅（二十七）——ts路径alias</title>
    <url>/2023/05/21/%E6%97%A0%E6%98%9F%E7%9A%84%E5%89%8D%E7%AB%AF%E4%B9%8B%E6%97%85%EF%BC%88%E4%BA%8C%E5%8D%81%E4%B8%83%EF%BC%89%E2%80%94%E2%80%94ts%E8%B7%AF%E5%BE%84alias/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>好久没写前端的东西了，正好前段时间写<code>typescript</code>时用<code>alias</code>遇到了一些问题，今天来聊一聊。</p>
<h1 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h1><p>其实用web框架写应用的时候用的很多啊</p>
<p>比如层级很深的时候</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> aa <span class="keyword">from</span> <span class="string">&quot;../../../utils/index&quot;</span></span><br></pre></td></tr></table></figure>

<p>通过配置<code>alias</code>，比如把根目录配置成<code>@</code>就会写成</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> aa <span class="keyword">from</span> <span class="string">&quot;@/utils/index&quot;</span></span><br></pre></td></tr></table></figure>

<p>这样</p>
<p>具体的路径就不演示了，大家应该都能明白，都用过。</p>
<p>那么问题来了，在使用<code>web</code>应用的时候，大家都会搭配使用<code>webpack</code>，<code>vite</code>等打包工具</p>
<p>其实配置<code>alias</code>本质上是配置这些打包工具的</p>
<p>那么如果写的是个<code>node</code>项目呢？</p>
<p>如果是个<code>node</code>项目（不一定是服务端，也有可能是别的）不需要<code>webpack</code>等打包工具，该怎么办？</p>
<h1 id="方式一：module-alias"><a href="#方式一：module-alias" class="headerlink" title="方式一：module-alias"></a>方式一：<code>module-alias</code></h1><p><a href="https://github.com/ilearnio/module-alias">module-alias</a></p>
<p>从<code>readme</code>看通过配置相关内容到<code>package.json</code>里，即可完成。</p>
<p>但因为看上去有4年没有更新了，所以我并没有选择这个方式。</p>
<p>不过我在它的<code>issues</code>里发现了一些有意思的东西.</p>
<p><a href="https://github.com/ilearnio/module-alias/issues/113">issues#113</a></p>
<h1 id="方式二：package-json的imports"><a href="#方式二：package-json的imports" class="headerlink" title="方式二：package.json的imports"></a>方式二：<code>package.json</code>的<code>imports</code></h1><p>是的，没错，<code>package.json</code>可以配置重命名。</p>
<p>来源就是上述提到的<a href="https://github.com/ilearnio/module-alias/issues/113">issues#113</a></p>
<p>我们可以使用<code>imports</code>来重命名文件夹</p>
<p>不过它必须使用<code>#</code>开头，这和写<code>web</code>时习惯使用<code>@</code>开头有点区别</p>
<p>不过我还是挺喜欢<code>#</code>开头的，因为使用<code>@</code>的，还有带命名空间的<code>npm</code>库，我觉得很容易混淆。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">//package.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">//....省略</span></span><br><span class="line">    <span class="attr">&quot;imports&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;#actions/*&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/actions/*&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;#utils/*&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/utils/*&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;#types/*&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/types/*&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;#config/*&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/config/*&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>既然是ts，那么当然免不了修改<code>tsconfig.json</code>配置</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">//tsconfig.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// ...省略</span></span><br><span class="line">     <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;#actions/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/actions/*&quot;</span><span class="punctuation">,</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;#utils/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/utils/*&quot;</span><span class="punctuation">,</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;#types/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/types/*&quot;</span><span class="punctuation">,</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;#config/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/config/*&quot;</span><span class="punctuation">,</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>好，截止到这里，你的开发工具（<code>vscode</code>）已经可以正常识别你的<code>import</code>语句了</p>
<p>但是使用<code>tsc</code>构建会发现，路径还是会报错。</p>
<p>再查看输出的文件，会发现<code>tsc</code>编译出来的<code>js</code>文件，居然没有按<code>我认为的</code>预期把路径替换！</p>
<p><a href="https://github.com/Microsoft/TypeScript/issues/5039">typescript/issues#5039</a>我们可以看到讨论很激烈</p>
<p>按<code>typescript</code>的设计，预期就不会替换，只会原样输出</p>
<p>那么问题来了，怎么修正呢？</p>
<h2 id="tsc-alias编译时使用"><a href="#tsc-alias编译时使用" class="headerlink" title="tsc-alias编译时使用"></a><code>tsc-alias</code>编译时使用</h2><p><a href="https://github.com/justkey007/tsc-alias">tsc-alias</a></p>
<p>修改一下打包命令</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="comment">// &quot;build&quot;: &quot;rm -rf dist &amp;&amp; tsc&quot;,</span></span><br><span class="line">        <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rm -rf dist &amp;&amp; tsc &amp;&amp; tsc-alias&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>是的，只需要在后面加个<code>tsc-alias</code>就可以了。</p>
<h2 id="tsconfig-paths开发时使用"><a href="#tsconfig-paths开发时使用" class="headerlink" title="tsconfig-paths开发时使用"></a><code>tsconfig-paths</code>开发时使用</h2><p><a href="https://github.com/dividab/tsconfig-paths">tsconfig-paths</a></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="comment">// &quot;start&quot;: &quot;ts-node ./src/index.ts&quot;</span></span><br><span class="line">        <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ts-node -r tsconfig-paths/register ./src/index.ts&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Over"><a href="#Over" class="headerlink" title="Over"></a>Over</h1>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>typescript</tag>
        <tag>alias</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的前端之旅（二十三）—— 手把手教你配置git hook</title>
    <url>/2021/07/17/%E6%97%A0%E6%98%9F%E7%9A%84%E5%89%8D%E7%AB%AF%E4%B9%8B%E6%97%85%EF%BC%88%E4%BA%8C%E5%8D%81%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%20%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E9%85%8D%E7%BD%AEgit%20hook/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>要求对<code>git</code>的<code>message</code>做限制，要求要以</p>
<p><code>[&#39;feat&#39;, &#39;fix&#39;, &#39;docs&#39;, &#39;style&#39;, &#39;refactor&#39;, &#39;perf&#39;, &#39;test&#39;, &#39;build&#39;, &#39;ci&#39;, &#39;revert&#39;, &#39;types&#39;]</code>:</p>
<p>做开头标记</p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p><code>git</code>存在<code>hook</code>，在每个步骤后面都会执行对应的🪝</p>
<p>因此我们可以考虑通过<code>git hook</code>去完成这项校验</p>
<p>实际上，在平时的开发过程中，就已经有于此相关的内容了，就是不知道同学们留意到没有</p>
<h1 id="举个🌰"><a href="#举个🌰" class="headerlink" title="举个🌰"></a>举个🌰</h1><p>比如在<code>Vue</code>项目中，如果在创建项目中，选择了<code>eslint</code>，并选择了保存并格式化</p>
<p><img src="/images/%E5%89%8D%E7%AB%AF23/1.png" alt="1.png"></p>
<p>在进行<code>git commit</code>时，代码会自动做一次格式化。</p>
<p>究其原因，实际上是来自<code>Vue</code>的默认配置</p>
<p><img src="/images/%E5%89%8D%E7%AB%AF23/2.png" alt="2.png"></p>
<p>那么<code>Vue</code>是怎么做的，实际上，翻开文档，我们能够找到相关内容</p>
<p><a href="https://cli.vuejs.org/zh/guide/cli-service.html#git-hook">git-hook</a></p>
<p>实际上是尤🌧️溪 fork 了 <code>husky</code>，稍做改造形成了<code>yorkie</code></p>
<p>但是我们可以看到，<code>yorkie</code>已经很久没有更新了，并且没有文档，想要直接使用<code>yorkie</code>是比较困难的</p>
<p>因此我们回到最初的库，<code>husky</code></p>
<h1 id="husky"><a href="#husky" class="headerlink" title="husky"></a><a href="https://typicode.github.io/husky/#/">husky</a></h1><p><code>husky</code>本身也是一个久负盛名的库，专注于<code>git hook</code></p>
<p>那么就让我们来集成它，完成我们的需求</p>
<h2 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx husky-init &amp;&amp; npm install       <span class="comment"># npm</span></span><br><span class="line">npx husky-init &amp;&amp; yarn              <span class="comment"># Yarn 1</span></span><br><span class="line">yarn dlx husky-init --yarn2 &amp;&amp; yarn <span class="comment"># Yarn 2</span></span><br></pre></td></tr></table></figure>

<p>集成以后，项目依赖会添加<code>husky</code>，且项目根目录下会添加<code>.husky</code>文件夹</p>
<h2 id="编写hook"><a href="#编写hook" class="headerlink" title="编写hook"></a>编写hook</h2><p><code>.husky</code>文件夹下，默认添加了一个<code>pre-commit</code>的<code>hook</code>文件</p>
<h3 id="pre-commit"><a href="#pre-commit" class="headerlink" title="pre-commit"></a>pre-commit</h3><p>我们可以先将<code>Vue</code>的默认配置转移进去</p>
<p><code>pre-commit</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">. <span class="string">&quot;<span class="subst">$(dirname <span class="string">&quot;<span class="variable">$0</span>&quot;</span>)</span>/_/husky.sh&quot;</span></span><br><span class="line"></span><br><span class="line">npm run lint</span><br><span class="line">git add .</span><br></pre></td></tr></table></figure>

<p>然后移除<code>package.json</code>中的<code>gitHooks</code>属性</p>
<h3 id="新增其他hook"><a href="#新增其他hook" class="headerlink" title="新增其他hook"></a>新增其他hook</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx husky add [fileName]</span><br><span class="line"><span class="comment"># 如果没有其他config上的变动，可以理解为照着如下写法写</span></span><br><span class="line"><span class="comment"># npx husky add .husky/hooks名称</span></span><br></pre></td></tr></table></figure>
<p>举个🌰</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx husky add .husky/commit-msg</span><br></pre></td></tr></table></figure>

<h3 id="git-hooks名称和作用"><a href="#git-hooks名称和作用" class="headerlink" title="git hooks名称和作用"></a>git hooks名称和作用</h3><p>可能有些旁友不知道有哪些hook可以添加，我这里教大家怎么看</p>
<ul>
<li><p><a href="https://git-scm.com/docs/githooks">git 文档</a></p>
</li>
<li><p>直接查看<code>.git</code>文件夹中hooks内容</p>
</li>
</ul>
<p><img src="/images/%E5%89%8D%E7%AB%AF23/3.png" alt="3.png"></p>
<h1 id="完成需求"><a href="#完成需求" class="headerlink" title="完成需求"></a>完成需求</h1><h2 id="1-添加commit-msg"><a href="#1-添加commit-msg" class="headerlink" title="1.添加commit-msg"></a>1.添加<code>commit-msg</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx husky add .husky/commit-msg</span><br></pre></td></tr></table></figure>
<h2 id="2-正则编写"><a href="#2-正则编写" class="headerlink" title="2.正则编写"></a>2.正则编写</h2><p><code>commit-msg</code>内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">. <span class="string">&quot;<span class="subst">$(dirname <span class="string">&quot;<span class="variable">$0</span>&quot;</span>)</span>/_/husky.sh&quot;</span></span><br><span class="line"></span><br><span class="line">MSG=`awk <span class="string">&#x27;&#123;printf(&quot;%s&quot;,$0)&#125;&#x27;</span> <span class="variable">$1</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$MSG</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$MSG</span> =~ ^(feat|fix|docs|style|refactor|perf|<span class="built_in">test</span>|build|ci|revert|types):.*$ ]]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;成功&#x27;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;失败&#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<h1 id="额外内容"><a href="#额外内容" class="headerlink" title="额外内容"></a>额外内容</h1><h2 id="不够保险"><a href="#不够保险" class="headerlink" title="不够保险"></a>不够保险</h2><p>因为上述行为的hook是在项目中做的</p>
<p>换句话说是在开发成员的本地电脑上做的</p>
<p>一旦开发人员不爽，把hook删了，那就无从约束</p>
<p>所以更保险的方式，应该是由git平台上去做检测</p>
<h2 id="仅测试hook"><a href="#仅测试hook" class="headerlink" title="仅测试hook"></a>仅测试hook</h2><p>可以在hook文件的最后添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exit</span> 1</span><br></pre></td></tr></table></figure>
<p>会中止本次git行为</p>
<p><a href="https://typicode.github.io/husky/#/?id=test-hooks">test-hooks</a></p>
<h2 id="commitlint"><a href="#commitlint" class="headerlink" title="commitlint"></a><a href="https://github.com/topics/commitlint">commitlint</a></h2><p><code>commitlint</code>，见名知意，commit内容的lint</p>
<p>我们可以使用其中的风格和工具做拓展</p>
<p>比如我们这里选择集成如下工具和风格</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@commitlint/cli</span><br><span class="line">@commitlint/config-conventional</span><br></pre></td></tr></table></figure>
<p>如果需要达成上述需求，我们可以这么做</p>
<ul>
<li><p>根目录下新建<code>commitlint.config.js</code>文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&#x27;@commitlint/config-conventional&#x27;</span>],</span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;type-enum&#x27;</span>: [</span><br><span class="line">      <span class="number">2</span>,</span><br><span class="line">      <span class="string">&#x27;always&#x27;</span>,</span><br><span class="line">      [<span class="string">&#x27;feat&#x27;</span>, <span class="string">&#x27;fix&#x27;</span>, <span class="string">&#x27;docs&#x27;</span>, <span class="string">&#x27;style&#x27;</span>, <span class="string">&#x27;refactor&#x27;</span>, <span class="string">&#x27;perf&#x27;</span>, <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;build&#x27;</span>, <span class="string">&#x27;ci&#x27;</span>, <span class="string">&#x27;revert&#x27;</span>, <span class="string">&#x27;types&#x27;</span>],</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>commit-msg内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">. <span class="string">&quot;<span class="subst">$(dirname <span class="string">&quot;<span class="variable">$0</span>&quot;</span>)</span>/_/husky.sh&quot;</span></span><br><span class="line"></span><br><span class="line">npx commitlint --edit <span class="variable">$1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="Done"><a href="#Done" class="headerlink" title="Done"></a>Done</h1>]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的前端之旅（二十二）—— 自定义CompositionAPI/hook</title>
    <url>/2021/04/28/%E6%97%A0%E6%98%9F%E7%9A%84%E5%89%8D%E7%AB%AF%E4%B9%8B%E6%97%85%EF%BC%88%E4%BA%8C%E5%8D%81%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%20%E8%87%AA%E5%AE%9A%E4%B9%89CompositionAPI/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>我们做的大量都是后台管理系统，对于这种系统，我们会发现，里面的业务其实相当单一</p>
<p>大量都是类似这种， 搜索条件，表格，分页</p>
<p><img src="/images/%E5%89%8D%E7%AB%AF22/1.png" alt="1"></p>
<p>每个页面都要处理上下翻页，搜索，mounted加载首页table数据等等逻辑</p>
<p>虽然不复杂，但很累。</p>
<p>因此，我们需要封装一些<code>DSL</code>来降低我们的重复工作量</p>
<h1 id="啥是CompositionAPI-hook"><a href="#啥是CompositionAPI-hook" class="headerlink" title="啥是CompositionAPI/hook"></a>啥是CompositionAPI/hook</h1><p>看看文档</p>
<h1 id="我们的请求经过封装，大概是这种格式"><a href="#我们的请求经过封装，大概是这种格式" class="headerlink" title="我们的请求经过封装，大概是这种格式"></a>我们的请求经过封装，大概是这种格式</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /api/index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="variable constant_">API</span> <span class="keyword">from</span> <span class="string">&#x27;@szyx/axios&#x27;</span>;</span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line"><span class="variable constant_">API</span>.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// xxxx</span></span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果拦截器</span></span><br><span class="line"><span class="variable constant_">API</span>.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 判断状态</span></span><br><span class="line">    <span class="keyword">if</span> (response.<span class="property">status</span> === <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> response.<span class="property">data</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 否则都是错了</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(response));</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> error;</span><br><span class="line">  &#125;,</span><br><span class="line">);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">getExample</span>: <span class="function">(<span class="params">params</span>) =&gt;</span> <span class="variable constant_">API</span>.<span class="title function_">POSTJSON</span>(<span class="string">&#x27;/xxx/xxx/xxx&#x27;</span>, params),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="提取CompositionAPI"><a href="#提取CompositionAPI" class="headerlink" title="提取CompositionAPI"></a>提取CompositionAPI</h1><p>tableCompositions.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="variable constant_">API</span> <span class="keyword">from</span> <span class="string">&#x27;@/api/index&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">tableCompositon</span>(<span class="params">params, urlName, pageDefault = <span class="number">1</span>, pageSizeDefault = <span class="number">10</span></span>) &#123;</span><br><span class="line">  <span class="comment">// 表格数据</span></span><br><span class="line">  <span class="keyword">const</span> tableData = <span class="title function_">ref</span>([]);</span><br><span class="line">  <span class="comment">// 总量</span></span><br><span class="line">  <span class="keyword">const</span> total = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="comment">// 当前页面,默认1</span></span><br><span class="line">  <span class="keyword">const</span> page = <span class="title function_">ref</span>(pageDefault);</span><br><span class="line">  <span class="comment">// 页面数量,默认10</span></span><br><span class="line">  <span class="keyword">const</span> pageSize = <span class="title function_">ref</span>(pageSizeDefault);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getTableData</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable constant_">API</span>[urlName](&#123;</span><br><span class="line">      ...params,</span><br><span class="line">      <span class="attr">pageNum</span>: page.<span class="property">value</span>,</span><br><span class="line">      <span class="attr">pageSize</span>: pageSize.<span class="property">value</span>,</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">      tableData.<span class="property">value</span> = data.<span class="property">list</span>;</span><br><span class="line">      page.<span class="property">value</span> = data.<span class="property">pageNum</span>;</span><br><span class="line">      pageSize.<span class="property">value</span> = data.<span class="property">pageSize</span>;</span><br><span class="line">      total.<span class="property">value</span> = data.<span class="property">total</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 页面加载请求</span></span><br><span class="line">  <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123; <span class="title function_">getTableData</span>(); &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    tableData,</span><br><span class="line">    total,</span><br><span class="line">    page,</span><br><span class="line">    pageSize,</span><br><span class="line">    getTableData,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="参数解析"><a href="#参数解析" class="headerlink" title="参数解析"></a>参数解析</h2><ul>
<li><code>params</code>入参是指当前页面除了<code>页码</code>，<code>分页数量</code>以外还需要的业务参数</li>
<li><code>urlName</code>是指请求的方法名，上面可以看到我们的请求封装完以后的导出都是一个个的方法，例如调用<code>getExample</code>方法，则传递<code>getExample</code>这个字符串即可。</li>
</ul>
<h2 id="return解析"><a href="#return解析" class="headerlink" title="return解析"></a>return解析</h2><ul>
<li><code>tableData</code> 页面的表格数据，表格肯定是数组类型的数据</li>
<li><code>total</code> 一共多少条数据</li>
<li><code>page</code> 当前页码</li>
<li><code>pageSize</code> 当前分页数</li>
<li><code>getTableData</code> 获取表格数据的方法</li>
</ul>
<h2 id="内容解析"><a href="#内容解析" class="headerlink" title="内容解析"></a>内容解析</h2><p>应该很简单，都能看懂，定义了一些数据，一个请求方法，还有<code>onMounted</code>中发起请求，然后<code>return</code>了这些东西出去</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>比如像这样的一个页面<br><img src="/images/%E5%89%8D%E7%AB%AF22/2.png" alt="2"></p>
<p>省略掉表单弹窗相关的代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;flex row align-items-center header&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;flex row align-items-center flex1&quot;&gt;</span><br><span class="line">      &lt;p class=&quot;title&quot;&gt;用户名：&lt;/p&gt;</span><br><span class="line">      &lt;el-input</span><br><span class="line">        v-model=&quot;nameState.username&quot;</span><br><span class="line">        placeholder=&quot;用户名称&quot;</span><br><span class="line">        class=&quot;name-input&quot;</span><br><span class="line">        @keyup.enter=&quot;getTableData&quot;</span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;flex row &quot;&gt;</span><br><span class="line">      &lt;el-button type=&quot;primary&quot; @click=&quot;page.value = 1;</span><br><span class="line">                                        getTableData();&quot;&gt;</span><br><span class="line">        搜索</span><br><span class="line">      &lt;/el-button&gt;</span><br><span class="line">      &lt;el-button plain @click=&quot;nameState.username = &#x27;&#x27;;getTableData();&quot;&gt;清空&lt;/el-button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;table&quot;&gt;</span><br><span class="line">    &lt;el-table :data=&quot;tableData&quot; border stripe</span><br><span class="line">              :header-cell-style=&quot;tableHeaderStyle&quot; :cell-style=&quot;tableCellStyle&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;name&quot; label=&quot;用户名&quot; align=&quot;center&quot; /&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;roleName&quot; label=&quot;角色名称&quot; align=&quot;center&quot; /&gt;</span><br><span class="line">      &lt;el-table-column label=&quot;操作&quot; align=&quot;center&quot;&gt;</span><br><span class="line">        &lt;template #default=&quot;scope&quot;&gt;</span><br><span class="line">          &lt;el-button type=&quot;primary&quot; v-permission=&quot;&#x27;100001002&#x27;&quot; @click=&quot;editUser(scope.row)&quot;&gt;</span><br><span class="line">            修改</span><br><span class="line">          &lt;/el-button&gt;</span><br><span class="line">          &lt;el-button type=&quot;danger&quot; v-permission=&quot;&#x27;100001003&#x27;&quot; @click=&quot;deleteUser(scope.row)&quot;&gt;</span><br><span class="line">            删除</span><br><span class="line">          &lt;/el-button&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">    &lt;/el-table&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;Pagination</span><br><span class="line">    class=&quot;pagination&quot;</span><br><span class="line">    v-model:total=&quot;total&quot;</span><br><span class="line">    v-model:page=&quot;page&quot;</span><br><span class="line">    v-model:limit=&quot;pageSize&quot;</span><br><span class="line">    @pagination=&quot;getTableData&quot;</span><br><span class="line">  /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;</span><br><span class="line">  defineComponent, reactive,</span><br><span class="line">&#125; from &#x27;vue&#x27;;</span><br><span class="line">import Pagination from &#x27;@/components/Pagination/index.vue&#x27;;</span><br><span class="line">import tableCompositions from &#x27;@/compositions/tableCompositions&#x27;;</span><br><span class="line"></span><br><span class="line">export default defineComponent(&#123;</span><br><span class="line">  components: &#123; Pagination &#125;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    // 用户名称</span><br><span class="line">    const nameState = reactive(&#123;</span><br><span class="line">      username: &#x27;&#x27;,</span><br><span class="line">    &#125;);</span><br><span class="line">    // 获取table数据</span><br><span class="line">    const &#123;</span><br><span class="line">      tableData, getTableData, total, pageSize, page,</span><br><span class="line">    &#125; = tableCompositions(</span><br><span class="line">      nameState,</span><br><span class="line">      &#x27;getUserList&#x27;,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      total,</span><br><span class="line">      pageSize,</span><br><span class="line">      page,</span><br><span class="line">      nameState,</span><br><span class="line">      tableData,</span><br><span class="line">      getTableData,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>大概不到100行的代码，就结束了。</p>
<p>js基本没什么逻辑。只需要定义除<code>page</code>和<code>pageSize</code>以外还需要的业务参数</p>
<p>比如我这个页面还需要一个用户名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> nameState = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>然后将<code>nameState</code>作为参数传递给<code>tableCompositions</code>，获取所有的东西</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">    tableData, getTableData, total, pageSize, page,</span><br><span class="line">  &#125; = <span class="title function_">tableCompositions</span>(</span><br><span class="line">    nameState,</span><br><span class="line">    <span class="string">&#x27;getUserList&#x27;</span>,</span><br><span class="line">  );</span><br></pre></td></tr></table></figure>

<p>然后<code>tableData</code>直接丢给<code>el-table</code>就行了</p>
<h1 id="pagination"><a href="#pagination" class="headerlink" title="pagination"></a>pagination</h1><p>至于<code>pagination</code>，其实直接用<code>el-pagination</code>就可以了</p>
<p>我们也只是把一些常用的放进去，包了一层而已</p>
<p>Pagination/index.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-pagination</span><br><span class="line">    :background=&quot;background&quot;</span><br><span class="line">    v-model:current-page=&quot;currentPage&quot;</span><br><span class="line">    v-model:page-size=&quot;pageSize&quot;</span><br><span class="line">    :layout=&quot;layout&quot;</span><br><span class="line">    :page-sizes=&quot;pageSizes&quot;</span><br><span class="line">    :total=&quot;total&quot;</span><br><span class="line">    v-bind=&quot;$attrs&quot;</span><br><span class="line">    @size-change=&quot;handleSizeChange&quot;</span><br><span class="line">    @current-change=&quot;handleCurrentChange&quot;</span><br><span class="line">  /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;Pagination&#x27;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    total: &#123;</span><br><span class="line">      required: true,</span><br><span class="line">      type: Number,</span><br><span class="line">    &#125;,</span><br><span class="line">    page: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">      default: 1,</span><br><span class="line">    &#125;,</span><br><span class="line">    limit: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">      default: 20,</span><br><span class="line">    &#125;,</span><br><span class="line">    pageSizes: &#123;</span><br><span class="line">      type: Array,</span><br><span class="line">      default() &#123;</span><br><span class="line">        return [5, 10, 20, 30, 50];</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    layout: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      default: &#x27;total, sizes, prev, pager, next, jumper&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">    background: &#123;</span><br><span class="line">      type: Boolean,</span><br><span class="line">      default: true,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    hidden: &#123;</span><br><span class="line">      type: Boolean,</span><br><span class="line">      default: false,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    currentPage: &#123;</span><br><span class="line">      get() &#123;</span><br><span class="line">        return this.page;</span><br><span class="line">      &#125;,</span><br><span class="line">      set(val) &#123;</span><br><span class="line">        this.$emit(&#x27;update:page&#x27;, val);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    pageSize: &#123;</span><br><span class="line">      get() &#123;</span><br><span class="line">        return this.limit;</span><br><span class="line">      &#125;,</span><br><span class="line">      set(val) &#123;</span><br><span class="line">        this.$emit(&#x27;update:limit&#x27;, val);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleSizeChange(val) &#123;</span><br><span class="line">      console.log(&#x27;handleSizeChange&#x27;, val);</span><br><span class="line">      this.$emit(&#x27;pagination&#x27;, &#123; page: this.currentPage, limit: val &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    handleCurrentChange(val) &#123;</span><br><span class="line">      console.log(&#x27;handleCurrentChange&#x27;, val);</span><br><span class="line">      this.$emit(&#x27;pagination&#x27;, &#123; page: val, limit: this.pageSize &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>所以上下页的逻辑,往上一绑，就结束了</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Pagination</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;pagination&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model:total</span>=<span class="string">&quot;total&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model:page</span>=<span class="string">&quot;page&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model:limit</span>=<span class="string">&quot;pageSize&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">pagination</span>=<span class="string">&quot;getTableData&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>

<p>react也一样，我这里就不放react代码了，可以自己封装一下</p>
<h1 id="我们的宗旨只有一个：懒"><a href="#我们的宗旨只有一个：懒" class="headerlink" title="我们的宗旨只有一个：懒"></a>我们的宗旨只有一个：懒</h1>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的前端之旅（二十五）—— css的一些用法</title>
    <url>/2021/07/17/%E6%97%A0%E6%98%9F%E7%9A%84%E5%89%8D%E7%AB%AF%E4%B9%8B%E6%97%85%EF%BC%88%E4%BA%8C%E5%8D%81%E4%BA%94%EF%BC%89%E2%80%94%E2%80%94%20css%E7%9A%84%E4%B8%80%E4%BA%9B%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>项目中总是遇到class取名难，样式到处定义，重复颜色到处写，代码切换烦得一批</p>
<h1 id="一-dart-sass，node-sass"><a href="#一-dart-sass，node-sass" class="headerlink" title="一.dart-sass，node-sass"></a>一.dart-sass，node-sass</h1><p>使用dart-sass，废弃node-sass</p>
<h1 id="二-Vue项目中色板的使用"><a href="#二-Vue项目中色板的使用" class="headerlink" title="二.Vue项目中色板的使用"></a>二.Vue项目中色板的使用</h1><p>在全局<code>css</code>文件中，新建一个文件，放置各种<code>scss</code>变量</p>
<p>例如：</p>
<p><code>src/styles/variables.scss</code></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$moedu-background-color</span>: <span class="number">#F5F7FA</span>;</span><br></pre></td></tr></table></figure>

<p>配置<code>vue.config.js</code>,将整个变量文件注入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//vue.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// …………省略其他配置</span></span><br><span class="line">  <span class="attr">css</span>: &#123;</span><br><span class="line">    <span class="attr">loaderOptions</span>: &#123;</span><br><span class="line">      <span class="attr">scss</span>:&#123;</span><br><span class="line">        <span class="attr">additionalData</span>: <span class="string">&#x27;@import &quot;@/styles/variables.scss&quot;;&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在任意<code>vue</code>文件中，可直接使用<code>$moedu-background-color</code>变量，无需引入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;main&quot;&gt;</span><br><span class="line">    &lt;p&gt;123&lt;p&gt;</span><br><span class="line">    &lt;p&gt;456&lt;p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.main&#123;</span><br><span class="line">  background-color: $moedu-background-color;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h1 id="三-定义布局class"><a href="#三-定义布局class" class="headerlink" title="三.定义布局class"></a>三.定义布局class</h1><p>有的时候，页面只是为了写一些布局，需要专门定义一个<code>class</code>名，非常费事</p>
<p>例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;main&quot;&gt;</span><br><span class="line">    &lt;p&gt;123&lt;p&gt;</span><br><span class="line">    &lt;p&gt;456&lt;p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.main&#123;</span><br><span class="line">  display:flex;</span><br><span class="line">  flex:1;</span><br><span class="line">  flex-direction: column;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>如果写好一些共用的</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex1</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.row</span> &#123;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.column</span> &#123;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.justify-content-center</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.justify-content-flex-end</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-end;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.justify-content-flex-start</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.justify-content-space-between</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.align-items-center</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.align-items-baseline</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: baseline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.align-items-flex-start</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.align-items-flex-end</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>则可以改成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;flex flex1 flex-direction-column&quot;&gt;</span><br><span class="line">    &lt;p&gt;123&lt;p&gt;</span><br><span class="line">    &lt;p&gt;456&lt;p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h1 id="四-烦人的margin与padding"><a href="#四-烦人的margin与padding" class="headerlink" title="四.烦人的margin与padding"></a>四.烦人的margin与padding</h1><p>同上述，<code>marigin</code>与<code>padding</code>经常性要定义<code>class</code>去写，烦得一批，相同的要定义很多次</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;flex flex1 flex-direction-column&quot;&gt;</span><br><span class="line">    &lt;p class=&quot;p1&quot;&gt;123&lt;p&gt;</span><br><span class="line">    &lt;p class=&quot;p2&quot;&gt;456&lt;p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.p1&#123;</span><br><span class="line">  margin-top:20px;</span><br><span class="line">&#125;</span><br><span class="line">.p2&#123;</span><br><span class="line">  margin-top:30px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>我们通过一些函数，生成这些东西</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 填写需要的边距</span></span><br><span class="line"><span class="variable">$margins</span>: (<span class="number">4</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">16</span>,<span class="number">24</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">@for</span> <span class="variable">$i</span> from <span class="number">1</span> through length(<span class="variable">$margins</span>) &#123;</span><br><span class="line">  <span class="variable">$item</span>: <span class="built_in">nth</span>(<span class="variable">$margins</span>, <span class="variable">$i</span>);</span><br><span class="line">  <span class="comment">// .w#&#123;$item&#125;px &#123;</span></span><br><span class="line">  <span class="comment">//   width: #&#123;$item&#125;px;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="selector-class">.margin-</span>#&#123;<span class="variable">$item</span>&#125;&#123;</span><br><span class="line">    <span class="attribute">margin</span>: #&#123;<span class="variable">$item</span>&#125;px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.margin-left-</span>#&#123;<span class="variable">$item</span>&#125; &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: #&#123;<span class="variable">$item</span>&#125;px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.margin-top-</span>#&#123;<span class="variable">$item</span>&#125; &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: #&#123;<span class="variable">$item</span>&#125;px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.margin-bottom-</span>#&#123;<span class="variable">$item</span>&#125; &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: #&#123;<span class="variable">$item</span>&#125;px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.margin-right-</span>#&#123;<span class="variable">$item</span>&#125; &#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: #&#123;<span class="variable">$item</span>&#125;px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.padding-</span>#&#123;<span class="variable">$item</span>&#125;&#123;</span><br><span class="line">    <span class="attribute">padding</span>: #&#123;<span class="variable">$item</span>&#125;px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.padding-left-</span>#&#123;<span class="variable">$item</span>&#125; &#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: #&#123;<span class="variable">$item</span>&#125;px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.padding-top-</span>#&#123;<span class="variable">$item</span>&#125; &#123;</span><br><span class="line">    <span class="attribute">padding-top</span>: #&#123;<span class="variable">$item</span>&#125;px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.padding-bottom-</span>#&#123;<span class="variable">$item</span>&#125; &#123;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: #&#123;<span class="variable">$item</span>&#125;px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.padding-right-</span>#&#123;<span class="variable">$item</span>&#125; &#123;</span><br><span class="line">    <span class="attribute">padding-right</span>: #&#123;<span class="variable">$item</span>&#125;px;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>则可以修改为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;flex flex1 flex-direction-column&quot;&gt;</span><br><span class="line">    &lt;p class=&quot;margin-top-20&quot;&gt;123&lt;p&gt;</span><br><span class="line">    &lt;p class=&quot;margin-top-30&quot;&gt;456&lt;p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>


<p>有点<code>tailwindcss</code>的味道</p>
<h1 id="五-hex透明度"><a href="#五-hex透明度" class="headerlink" title="五.hex透明度"></a>五.hex透明度</h1><p>颜色大家肯定喜欢写十六进制的<code>#ff6347</code>，没有人喜欢写<code>rgb(255,99,71)</code>吧</p>
<p>但是有时候遇到透明度要设置，看很多同学就不知道hex怎么加了，都纷纷使用<code>rgb(255,99,71,0.1)</code></p>
<p>其实hex可以直接加透明度</p>
<p>例如<code>rgb(255,99,71,0.1)</code>，可以直接写成<code>#ff63471A</code></p>
<p>透明度表格如下</p>
<table>
<thead>
<tr>
<th>Alpha %</th>
<th>Hex</th>
<th>Num</th>
</tr>
</thead>
<tbody><tr>
<td>100%</td>
<td>FF</td>
<td>255</td>
</tr>
<tr>
<td>99%</td>
<td>FC</td>
<td>252</td>
</tr>
<tr>
<td>98%</td>
<td>FA</td>
<td>250</td>
</tr>
<tr>
<td>97%</td>
<td>F7</td>
<td>247</td>
</tr>
<tr>
<td>96%</td>
<td>F5</td>
<td>245</td>
</tr>
<tr>
<td>95%</td>
<td>F2</td>
<td>242</td>
</tr>
<tr>
<td>94%</td>
<td>F0</td>
<td>240</td>
</tr>
<tr>
<td>93%</td>
<td>ED</td>
<td>237</td>
</tr>
<tr>
<td>92%</td>
<td>EB</td>
<td>235</td>
</tr>
<tr>
<td>91%</td>
<td>E8</td>
<td>232</td>
</tr>
<tr>
<td>90%</td>
<td>E6</td>
<td>230</td>
</tr>
<tr>
<td>89%</td>
<td>E3</td>
<td>227</td>
</tr>
<tr>
<td>88%</td>
<td>E0</td>
<td>224</td>
</tr>
<tr>
<td>87%</td>
<td>DE</td>
<td>222</td>
</tr>
<tr>
<td>86%</td>
<td>DB</td>
<td>219</td>
</tr>
<tr>
<td>85%</td>
<td>D9</td>
<td>217</td>
</tr>
<tr>
<td>84%</td>
<td>D6</td>
<td>214</td>
</tr>
<tr>
<td>83%</td>
<td>D4</td>
<td>212</td>
</tr>
<tr>
<td>82%</td>
<td>D1</td>
<td>209</td>
</tr>
<tr>
<td>81%</td>
<td>CF</td>
<td>207</td>
</tr>
<tr>
<td>80%</td>
<td>CC</td>
<td>204</td>
</tr>
<tr>
<td>79%</td>
<td>C9</td>
<td>201</td>
</tr>
<tr>
<td>78%</td>
<td>C7</td>
<td>199</td>
</tr>
<tr>
<td>77%</td>
<td>C4</td>
<td>196</td>
</tr>
<tr>
<td>76%</td>
<td>C2</td>
<td>194</td>
</tr>
<tr>
<td>75%</td>
<td>BF</td>
<td>191</td>
</tr>
<tr>
<td>74%</td>
<td>BD</td>
<td>189</td>
</tr>
<tr>
<td>73%</td>
<td>BA</td>
<td>186</td>
</tr>
<tr>
<td>72%</td>
<td>B8</td>
<td>184</td>
</tr>
<tr>
<td>71%</td>
<td>B5</td>
<td>181</td>
</tr>
<tr>
<td>70%</td>
<td>B3</td>
<td>179</td>
</tr>
<tr>
<td>69%</td>
<td>B0</td>
<td>176</td>
</tr>
<tr>
<td>68%</td>
<td>AD</td>
<td>173</td>
</tr>
<tr>
<td>67%</td>
<td>AB</td>
<td>171</td>
</tr>
<tr>
<td>66%</td>
<td>A8</td>
<td>168</td>
</tr>
<tr>
<td>65%</td>
<td>A6</td>
<td>166</td>
</tr>
<tr>
<td>64%</td>
<td>A3</td>
<td>163</td>
</tr>
<tr>
<td>63%</td>
<td>A1</td>
<td>161</td>
</tr>
<tr>
<td>62%</td>
<td>9E</td>
<td>158</td>
</tr>
<tr>
<td>61%</td>
<td>9C</td>
<td>156</td>
</tr>
<tr>
<td>60%</td>
<td>99</td>
<td>153</td>
</tr>
<tr>
<td>59%</td>
<td>96</td>
<td>150</td>
</tr>
<tr>
<td>58%</td>
<td>94</td>
<td>148</td>
</tr>
<tr>
<td>57%</td>
<td>91</td>
<td>145</td>
</tr>
<tr>
<td>56%</td>
<td>8F</td>
<td>143</td>
</tr>
<tr>
<td>55%</td>
<td>8C</td>
<td>140</td>
</tr>
<tr>
<td>54%</td>
<td>8A</td>
<td>138</td>
</tr>
<tr>
<td>53%</td>
<td>87</td>
<td>135</td>
</tr>
<tr>
<td>52%</td>
<td>85</td>
<td>133</td>
</tr>
<tr>
<td>51%</td>
<td>82</td>
<td>130</td>
</tr>
<tr>
<td>50%</td>
<td>80</td>
<td>128</td>
</tr>
<tr>
<td>49%</td>
<td>7D</td>
<td>125</td>
</tr>
<tr>
<td>48%</td>
<td>7A</td>
<td>122</td>
</tr>
<tr>
<td>47%</td>
<td>78</td>
<td>120</td>
</tr>
<tr>
<td>46%</td>
<td>75</td>
<td>117</td>
</tr>
<tr>
<td>45%</td>
<td>73</td>
<td>115</td>
</tr>
<tr>
<td>44%</td>
<td>70</td>
<td>112</td>
</tr>
<tr>
<td>43%</td>
<td>6E</td>
<td>110</td>
</tr>
<tr>
<td>42%</td>
<td>6B</td>
<td>107</td>
</tr>
<tr>
<td>41%</td>
<td>69</td>
<td>105</td>
</tr>
<tr>
<td>40%</td>
<td>66</td>
<td>102</td>
</tr>
<tr>
<td>39%</td>
<td>63</td>
<td>99</td>
</tr>
<tr>
<td>38%</td>
<td>61</td>
<td>97</td>
</tr>
<tr>
<td>37%</td>
<td>5E</td>
<td>94</td>
</tr>
<tr>
<td>36%</td>
<td>5C</td>
<td>92</td>
</tr>
<tr>
<td>35%</td>
<td>59</td>
<td>89</td>
</tr>
<tr>
<td>34%</td>
<td>57</td>
<td>87</td>
</tr>
<tr>
<td>33%</td>
<td>54</td>
<td>84</td>
</tr>
<tr>
<td>32%</td>
<td>52</td>
<td>82</td>
</tr>
<tr>
<td>31%</td>
<td>4F</td>
<td>79</td>
</tr>
<tr>
<td>30%</td>
<td>4D</td>
<td>77</td>
</tr>
<tr>
<td>29%</td>
<td>4A</td>
<td>74</td>
</tr>
<tr>
<td>28%</td>
<td>47</td>
<td>71</td>
</tr>
<tr>
<td>27%</td>
<td>45</td>
<td>69</td>
</tr>
<tr>
<td>26%</td>
<td>42</td>
<td>66</td>
</tr>
<tr>
<td>25%</td>
<td>40</td>
<td>64</td>
</tr>
<tr>
<td>24%</td>
<td>3D</td>
<td>61</td>
</tr>
<tr>
<td>23%</td>
<td>3B</td>
<td>59</td>
</tr>
<tr>
<td>22%</td>
<td>38</td>
<td>56</td>
</tr>
<tr>
<td>21%</td>
<td>36</td>
<td>54</td>
</tr>
<tr>
<td>20%</td>
<td>33</td>
<td>51</td>
</tr>
<tr>
<td>19%</td>
<td>30</td>
<td>48</td>
</tr>
<tr>
<td>18%</td>
<td>2E</td>
<td>46</td>
</tr>
<tr>
<td>17%</td>
<td>2B</td>
<td>43</td>
</tr>
<tr>
<td>16%</td>
<td>29</td>
<td>41</td>
</tr>
<tr>
<td>15%</td>
<td>26</td>
<td>38</td>
</tr>
<tr>
<td>14%</td>
<td>24</td>
<td>36</td>
</tr>
<tr>
<td>13%</td>
<td>21</td>
<td>33</td>
</tr>
<tr>
<td>12%</td>
<td>1F</td>
<td>31</td>
</tr>
<tr>
<td>11%</td>
<td>1C</td>
<td>28</td>
</tr>
<tr>
<td>10%</td>
<td>1A</td>
<td>26</td>
</tr>
<tr>
<td>9%</td>
<td>17</td>
<td>23</td>
</tr>
<tr>
<td>8%</td>
<td>14</td>
<td>20</td>
</tr>
<tr>
<td>7%</td>
<td>12</td>
<td>18</td>
</tr>
<tr>
<td>6%</td>
<td>0F</td>
<td>15</td>
</tr>
<tr>
<td>5%</td>
<td>0D</td>
<td>13</td>
</tr>
<tr>
<td>4%</td>
<td>0A</td>
<td>10</td>
</tr>
<tr>
<td>3%</td>
<td>08</td>
<td>8</td>
</tr>
<tr>
<td>2%</td>
<td>05</td>
<td>5</td>
</tr>
<tr>
<td>1%</td>
<td>03</td>
<td>3</td>
</tr>
<tr>
<td>0%</td>
<td>00</td>
<td>0</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>vue</tag>
        <tag>css</tag>
        <tag>sass</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的前端之旅（二十六）——css乱七八糟的单位</title>
    <url>/2021/11/02/%E6%97%A0%E6%98%9F%E7%9A%84%E5%89%8D%E7%AB%AF%E4%B9%8B%E6%97%85%EF%BC%88%E4%BA%8C%E5%8D%81%E5%85%AD%EF%BC%89%E2%80%94%E2%80%94css%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F%E7%9A%84%E5%8D%95%E4%BD%8D/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>因为要适配的设备有点多，经常性出现适配问题，单位又多的一批，烦死了</p>
<p>所以我决定从头来看，这些单位到底代表什么，和分辨率， 到底是个什么关系</p>
<p>我先放个移动端的iphone 设备表在这，再来分析</p>
<table>
<thead>
<tr>
<th>手机设备型号</th>
<th>屏幕尺寸</th>
<th>分辨率点数</th>
<th>设备像素比(DPR)</th>
<th>分辨率像素</th>
<th>屏幕比例</th>
</tr>
</thead>
<tbody><tr>
<td>iPhone SE</td>
<td>4.0英寸</td>
<td>320x568</td>
<td>@2x</td>
<td>640x1136</td>
<td>16:9</td>
</tr>
<tr>
<td>iPhone 6/6s/7/8/SE 2</td>
<td>4.7英寸</td>
<td>375x667</td>
<td>@2x</td>
<td>750x1334</td>
<td>16:9</td>
</tr>
<tr>
<td>iPhone 6p/7p/8p</td>
<td>5.5英寸</td>
<td>414x736</td>
<td>@3x</td>
<td>1242x2208</td>
<td>16:9</td>
</tr>
<tr>
<td>iPhone XR/11</td>
<td>6.1英寸</td>
<td>414x896</td>
<td>@2x</td>
<td>828x1792</td>
<td>19.5:9</td>
</tr>
<tr>
<td>iPhone X/XS/11 Pro</td>
<td>5.8英寸</td>
<td>375x812</td>
<td>@3x</td>
<td>1125x2436</td>
<td>19.5:9</td>
</tr>
<tr>
<td>iPhone XS Max/11 Pro Max</td>
<td>6.5英寸</td>
<td>414x896</td>
<td>@3x</td>
<td>1242x2688</td>
<td>19.5:9</td>
</tr>
<tr>
<td>iPhone 12 mini</td>
<td>5.4英寸</td>
<td>360x780</td>
<td>@3x</td>
<td>1080x2340</td>
<td>19.5:9</td>
</tr>
<tr>
<td>iPhone 12/12 Pro</td>
<td>6.1英寸</td>
<td>390x844</td>
<td>@3x</td>
<td>1170x2532</td>
<td>19.5:9</td>
</tr>
<tr>
<td>iPhone 12 Pro Max</td>
<td>6.7英寸</td>
<td>428x926</td>
<td>@3x</td>
<td>1284x2778</td>
<td>19.5:9</td>
</tr>
<tr>
<td>iPhone 13 mini</td>
<td>5.4英寸</td>
<td>360x780</td>
<td>@3x</td>
<td>1080x2340</td>
<td>19.5:9</td>
</tr>
<tr>
<td>iPhone 13/13 Pro</td>
<td>6.1英寸</td>
<td>390x844</td>
<td>@3x</td>
<td>1170x2532</td>
<td>19.5:9</td>
</tr>
<tr>
<td>iPhone 13 Pro Max</td>
<td>6.7英寸</td>
<td>428x926</td>
<td>@3x</td>
<td>1284x2778</td>
<td>19.5:9</td>
</tr>
</tbody></table>
<p>以下部分内容，我们拿<code>iPhone 13</code>这款机子举例子</p>
<h1 id="物理像素"><a href="#物理像素" class="headerlink" title="物理像素"></a>物理像素</h1><p>我们经常性会看到各种各样的分辨率</p>
<p>就如<code>iPhone 13</code>，我们都能看到两个分辨率</p>
<p>一个是分辨率像素 <code>1170x2532</code></p>
<p>一个是分辨率点数 <code>390x844</code></p>
<p>那么我们来说说这两个分别是啥</p>
<p><code>1170x2532</code>,意味着，他横向有<code>1170</code>个像素点，纵向有<code>2532</code>个像素点</p>
<p>这些像素点在硬件设备出厂的时候就定下来了，由设备元器件决定，是物理的</p>
<p>因此分辨率像素 <code>1170x2532</code>指的就是物理像素</p>
<hr>
<p>我们看的屏幕上不同的画面，其实就是通过一个个像素点渲染出来的</p>
<p>我们常说的有些屏幕看起来有颗粒感，显得很廉价，有一股像素风的感觉</p>
<p>其实就是指用来拼凑出画面的一个个点非常大</p>
<p>放到边缘看，一旦页面放大，就会有锯齿感</p>
<p>我们假设，有两个宽高相同的设备A，B</p>
<p>设备A屏幕像素点比较多，像素分辨率为<code>100x100</code></p>
<p>设备B为<code>10x10</code>，那么谁的画面更有颗粒感，谁的更精细呢？</p>
<hr>
<h1 id="逻辑像素"><a href="#逻辑像素" class="headerlink" title="逻辑像素"></a>逻辑像素</h1><p>物理像素有了，那什么是逻辑像素呢？</p>
<p>比如在2000年，我推出了一款设备，是10英寸x10英寸的</p>
<p>那时候我一个像素点的发光元器件只能做到1英寸这么大，即<code>1px=1英寸</code>如下图左边</p>
<p>我要写个盒子铺满这是十个像素，当然是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    height:10px;</span><br><span class="line">    width:10px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><img src="/images/%E5%89%8D%E7%AB%AF26/1.png" alt="301635840360_.pic.jpg"></p>
<p>而2020年，我新推出了一款设备，还是10英寸x10英寸的</p>
<p>但是这时候技术升级了，我一个像素点的发光元器件可以缩小到1/4英寸这么小，如上图右侧</p>
<p>这时候要展示10英寸x10英寸大小的盒子，我就要是原来的好多倍了</p>
<p>而且技术不断革新，可能未来越来越小呢，不可能软件不停的去改啊</p>
<p>所以这时候，就有了逻辑像素的出现，不管你物理像素缩的多小，逻辑上，这个设备的宽高像素点就是一定的</p>
<p>依旧以<code>iPhone 13</code>这款机子为例，上面我们说到的分辨率点数<code>390x844</code>就是指这个逻辑分辨率</p>
<h1 id="DPR-设备像素比"><a href="#DPR-设备像素比" class="headerlink" title="DPR(设备像素比)"></a>DPR(设备像素比)</h1><p>我们观察上表，有个叫做设备像素比(DPR)的，<code>iPhone 13</code>为<code>@3x</code></p>
<p>做iOS开发的老哥应该很熟悉，图片都有@2x，@3x</p>
<p>表示一个设备的物理像素与逻辑像素的比</p>
<p><code>1170/390=3</code> <code>2532/844=3</code></p>
<h1 id="ppi（像素密度）"><a href="#ppi（像素密度）" class="headerlink" title="ppi（像素密度）"></a>ppi（像素密度）</h1><p>那么接下来，我们说说ppi（像素密度）</p>
<p>依旧以<code>iphone 13</code>举例</p>
<p><code>iPhone 13</code>屏幕比例为<code>19.5:9</code>,根据勾股定理，我们可以列出式子<code>(19.5x)^2 + (9x)^2 = (6.1)^2</code></p>
<p>解出<code>x约等于0.284</code></p>
<p>则高约为<code>5.538英寸</code>，宽为<code>2.55英寸</code></p>
<p>(当然，主要是没仔细查屏幕的宽高，有时间的同学自己查一下，就免得算了=。=)</p>
<p>那么我们算算它的PPI（1英寸像素密度）</p>
<p>其实非常简单</p>
<p><code>2532/5.538</code> 约等于457</p>
<p>或</p>
<p><code>1170/2.55</code> 约等于等于458</p>
<p>那么实际上，<code>iPhone 13</code>的像素密度为460，和我们估算的差不多，毕竟宽高我们都是估算的=。=</p>
<p>其实就是<code>物理像素（高）/高（英寸）</code>或<code>物理像素（宽）/宽（英寸）</code></p>
<p>记得是英寸啊</p>
<h2 id="然而"><a href="#然而" class="headerlink" title="然而"></a>然而</h2><p>大部分时候，不会去列举屏幕的宽高英寸，而是标注屏幕大小（斜对角线）</p>
<p>因此有另一个计算公式</p>
<p><img src="/images/%E5%89%8D%E7%AB%AF26/3.webp" alt="3881353-592695bcf9d3dccc.webp"></p>
<h1 id="DPI"><a href="#DPI" class="headerlink" title="DPI"></a>DPI</h1><p>说完了<code>ppi</code>，有的时候，如果做安卓，我们还会听到一个词，叫做<code>dpi</code></p>
<p>实际上查来查去，人都疯了，直接把他们相等处理，多数情况下，<code>DPI=PPI</code>。</p>
<h1 id="分辨率"><a href="#分辨率" class="headerlink" title="分辨率"></a>分辨率</h1><p>那么经过上面这么多铺垫</p>
<p>我们现在应该知道了</p>
<p>物理分辨率是指，物理像素的分辨率，<code>1170x2532 </code><br>逻辑分辨率是指，逻辑像素的分辨率，<code>390x844</code></p>
<hr>
<h1 id="接下来说单位"><a href="#接下来说单位" class="headerlink" title="接下来说单位"></a>接下来说单位</h1><p>说在前面</p>
<h3 id="css中我们写的px，实际上也是会随着物理分辨率的变化而调整的，所以它其实是逻辑像素"><a href="#css中我们写的px，实际上也是会随着物理分辨率的变化而调整的，所以它其实是逻辑像素" class="headerlink" title="css中我们写的px，实际上也是会随着物理分辨率的变化而调整的，所以它其实是逻辑像素"></a>css中我们写的px，实际上也是会随着物理分辨率的变化而调整的，所以它其实是逻辑像素</h3><p>这里就产生了一个经典的面试题<code>移动设备上h5的1px像素问题</code></p>
<p>指得就是css写了1px，但是在某些设备上，展示了2px以上的宽度</p>
<h1 id="px"><a href="#px" class="headerlink" title="px"></a>px</h1><p>我们在css中写的px，是逻辑像素</p>
<h1 id="pt"><a href="#pt" class="headerlink" title="pt"></a>pt</h1><p>是一个标准的长度单位，1pt＝1/72英寸，打印常用</p>
<p>但是我们不是打印！就展示而言，但其实也和DPR有关</p>
<p>可见参考资料<a href="https://www.cnblogs.com/chinhr/archive/2008/01/23/1049576.html">CSS长度单位：px和pt的区别 - 莫问奴归处 - 博客园 (cnblogs.com)</a></p>
<p>其中最重要的一句话，我引用过来</p>
<blockquote>
<p>使用px定义文字，无论用户怎么设置，都不会改变大小；使用pt定义文字，当用户设置超过96DPI的值，数值越大，字体就越大。</p>
</blockquote>
<h1 id="em"><a href="#em" class="headerlink" title="em"></a>em</h1><p>摘自<a href="https://segmentfault.com/a/1190000004605022">pt，px，rem和em之间区别总结 - SegmentFault 思否</a></p>
<p>em是相对长度单位，相对于当前对象内文本的字体尺寸，即em的计算是基于父级元素font-size的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body style=&quot;font-size:14px&quot;&gt;</span><br><span class="line">    &lt;p style=&quot;font-size:2em&quot;&gt;我这里的字体显示大小是28px(14px*2)&lt;/p&gt;  </span><br><span class="line">    &lt;div style=&quot;font-size:18px&quot;&gt;</span><br><span class="line">        &lt;p style=&quot;font-size:2em&quot;&gt;我这里显示字体大小是36px(18px*2),而不是上面计算的28px&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<p>如果没有特殊设置</p>
<p>浏览器中默认font-size的设定为16px</p>
<p>即1em = 16px, 但是这就不好算了</p>
<p>所以在使用em的时候，有时候会这么做：</p>
<p>body选择器中，设置font-size为62.5%，这时候，默认font-size就缩放为了10px，这个时候1em = 10px了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body style=&quot;font-size:62.5%&quot;&gt;</span><br><span class="line">    &lt;p style=&quot;font-size:2em&quot;&gt;我这里的字体显示大小是28px(14px*2)&lt;/p&gt;  </span><br><span class="line">    &lt;div style=&quot;font-size:18px&quot;&gt;</span><br><span class="line">        &lt;p style=&quot;font-size:2em&quot;&gt;我这里显示字体大小是36px(18px*2),而不是上面计算的28px&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<h1 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h1><p>摘自<a href="https://segmentfault.com/a/1190000004605022">pt，px，rem和em之间区别总结 - SegmentFault 思否</a></p>
<p>em是css3新增的一个相对单位，与em的区别在于，它是相对于html根元素的(在body标签里面设置字体大小不起作用)。还是上面那个例子，如果换做rem，结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body style=&quot;font-size:14px&quot;&gt;</span><br><span class="line">    &lt;p style=&quot;font-size:2rem&quot;&gt;我这里的字体显示大小是32px(16px*2),因为我是根据html根元素的font-size大小进行计算的&lt;/p&gt;  </span><br><span class="line">    &lt;div style=&quot;font-size:18px&quot;&gt;</span><br><span class="line">        &lt;p style=&quot;font-size:2rem&quot;&gt;我这里显示字体大小是32px(16px*2),因为我是根据html根元素的font-size大小进行计算的&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<p>同上</p>
<h1 id="vh-vw-vmax-vmin"><a href="#vh-vw-vmax-vmin" class="headerlink" title="vh,vw,vmax,vmin"></a>vh,vw,vmax,vmin</h1><p>vw：视窗宽度，1vw等于视窗宽度的1%。</p>
<p>vh：视窗高度，1vh等于视窗高度的1%。</p>
<p>vmin：vw和vh中较小的那个。</p>
<p>vmax：vw和vh中较大的那个。</p>
<p>（vw, vh, vmin, vmax：IE9+局部支持，chrome/firefox/safari/opera支持，iOS safari 8+支持，Android browser4.4+支持，chrome for android39支持）</p>
<h1 id="那么回到最上面的问题，如何处理不同设备的适配呢？"><a href="#那么回到最上面的问题，如何处理不同设备的适配呢？" class="headerlink" title="那么回到最上面的问题，如何处理不同设备的适配呢？"></a>那么回到最上面的问题，如何处理不同设备的适配呢？</h1><p>如果使用媒体查询，预区分不同设备</p>
<p>使用<code>window.devicePixelRatio</code>来获取DRP</p>
<p>使用rem单位</p>
<p>在不同设备设置不同的font-size，是不是就能达到适配效果？</p>
<h1 id="以上均为胡说八道，不对正确性负责，如有不对，请在评论区指出，感谢！"><a href="#以上均为胡说八道，不对正确性负责，如有不对，请在评论区指出，感谢！" class="headerlink" title="以上均为胡说八道，不对正确性负责，如有不对，请在评论区指出，感谢！"></a>以上均为胡说八道，不对正确性负责，如有不对，请在评论区指出，感谢！</h1><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.cnblogs.com/chinhr/archive/2008/01/23/1049576.html">CSS长度单位：px和pt的区别 - 莫问奴归处 - 博客园 (cnblogs.com)</a></p>
<p><a href="https://blog.csdn.net/flyingpig2016/article/details/58039326">px,pt,ppi,dpi,dp,sp,em,rem,vw和vh等css中常用长度之间区别总结_flyingpig2016的博客-CSDN博客</a></p>
<p><a href="https://www.zhihu.com/question/40506180/answer/164301075">逻辑分辨率和物理分辨率到底是什么呀？ - 知乎 (zhihu.com)</a></p>
<p><a href="https://segmentfault.com/a/1190000004605022">pt，px，rem和em之间区别总结 - SegmentFault 思否</a></p>
<p><a href="https://blog.csdn.net/flyingpig2016/article/details/58039326">px,pt,ppi,dpi,dp,sp,em,rem,vw和vh等css中常用长度之间区别总结_flyingpig2016的博客-CSDN博客</a></p>
<p><a href="https://www.cnblogs.com/xiaocaiyuxiaoniao/p/10156680.html">CSS中的px与物理像素、逻辑像素、1px边框问题 - 小菜与小鸟 - 博客园 (cnblogs.com)</a></p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的前端之旅（二十四）——Vue的组件npm封装</title>
    <url>/2021/07/20/%E6%97%A0%E6%98%9F%E7%9A%84%E5%89%8D%E7%AB%AF%E4%B9%8B%E6%97%85%EF%BC%88%E4%BA%8C%E5%8D%81%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94Vue%E7%9A%84%E7%BB%84%E4%BB%B6npm%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>很早就有这种需求，项目里封装好了组件，但是不知道怎么丢到npm库里</p>
<p>直接写vue文件丢到npm上，项目里好像也能直接用，但总觉的怪怪的</p>
<p>因为别人的库都是最后打包出来的js，不是vue文件</p>
<p>怎奈何一致不知道正规的的做法，webpack也不会用，babel也不懂，js也不精通，只能打打酱油，</p>
<p>TODO：未完待续。。。</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>vue</tag>
        <tag>rollup</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的前端之旅（二十）-element-plus给el-select添加上拉加载</title>
    <url>/2021/04/28/%E6%97%A0%E6%98%9F%E7%9A%84%E5%89%8D%E7%AB%AF%E4%B9%8B%E6%97%85%EF%BC%88%E4%BA%8C%E5%8D%81%EF%BC%89-element-plus%E7%BB%99select%E6%B7%BB%E5%8A%A0loadMore/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>element-plus中，el-select中可选项达到了500条，页面跳转销毁时导致异常卡顿（vue3.0.0版本，3.0.11版本有很大改善，建议升级）</p>
<p>因此需要进行分页操作。初步设想时当select中的options滚动到最底部的时候，触发加载更多，获取更多的可选项。</p>
<h1 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h1><p>打算通过指令实现，这样添加就很方便，预期一个指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">v-loadmore=&quot;loadMore&quot;</span><br></pre></td></tr></table></figure>

<h1 id="搜一下"><a href="#搜一下" class="headerlink" title="搜一下"></a>搜一下</h1><p>正常情况下，我们碰到的100个需求，99个都已经有人实现过了，所以我们就只需要搜一哈，就能找到答案。</p>
<p><img src="/images/%E5%89%8D%E7%AB%AF20/1.png" alt="1.png"></p>
<p>果不其然，答案异常的多，只不过都是element-ui的，不过改动不多，应该问题不大，让我们来试一试。</p>
<h1 id="开始踩坑"><a href="#开始踩坑" class="headerlink" title="开始踩坑"></a>开始踩坑</h1><h2 id="1-附上随处可搜的代码"><a href="#1-附上随处可搜的代码" class="headerlink" title="1.附上随处可搜的代码"></a>1.附上随处可搜的代码</h2><p>我就不贴从哪抄的了，因为随处可以搜到</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;loadMore&#x27;</span>, &#123;</span><br><span class="line">  <span class="title function_">bind</span>(<span class="params">el, binding</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取element-ui定义好的scroll盒子</span></span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">SELECTWRAP_DOM</span> = el.<span class="title function_">querySelector</span>(<span class="string">&#x27;.el-select-dropdown .el-select-dropdown__wrap&#x27;</span>)</span><br><span class="line">    <span class="variable constant_">SELECTWRAP_DOM</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> <span class="variable constant_">CONDITION</span> = <span class="variable language_">this</span>.<span class="property">scrollHeight</span> - <span class="variable language_">this</span>.<span class="property">scrollTop</span> &lt;= <span class="variable language_">this</span>.<span class="property">clientHeight</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable constant_">CONDITION</span>) &#123;</span><br><span class="line">        binding.<span class="title function_">value</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>这个代码分析起来很简单</p>
<p>1.通过指令绑定的时候传递dom节点</p>
<p>2.再通过class选择器找到scroll的盒子节点</p>
<p>3.添加滚动监听事件</p>
<p>4.滚动到底，触发绑定事件</p>
<p>在element-ui上完美运行</p>
<h2 id="但是"><a href="#但是" class="headerlink" title="但是"></a>但是</h2><p>在element-plus不行，会提示找不到<code>SELECTWRAP_DOM</code></p>
<p>因为<code>SELECTWRAP_DOM</code>为null，所以添加监听器就报错了</p>
<p><img src="/images/%E5%89%8D%E7%AB%AF20/2.png" alt="2.png"></p>
<h2 id="探寻不同"><a href="#探寻不同" class="headerlink" title="探寻不同"></a>探寻不同</h2><h3 id="1-对比element-ui和element-plus的dom节点"><a href="#1-对比element-ui和element-plus的dom节点" class="headerlink" title="1.对比element-ui和element-plus的dom节点"></a>1.对比element-ui和element-plus的dom节点</h3><p><img src="/images/%E5%89%8D%E7%AB%AF20/3.png" alt="3.png"></p>
<p>左边是element-ui，右边是element-plus</p>
<p>节点都在，而且都在body下，按道理应该没问题</p>
<h3 id="2-打印挂载的el节点"><a href="#2-打印挂载的el节点" class="headerlink" title="2.打印挂载的el节点"></a>2.打印挂载的el节点</h3><p><img src="/images/%E5%89%8D%E7%AB%AF20/4.png" alt="4.png"></p>
<p><a href="https://codepen.io/xingxiaowu/pen/dyNLejB?editors=1111">代码：element-ui</a></p>
<p><img src="/images/%E5%89%8D%E7%AB%AF20/5.png" alt="5.png"></p>
<p><a href="https://codepen.io/xingxiaowu/pen/ZELPwNY?editors=1112">代码：element-plus</a></p>
<p>发现了没，plus下打印的节点，异常清爽，并且还有两行贴心的注释</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--teleport start--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--teleport end--&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-vue3新增了Teleport"><a href="#3-vue3新增了Teleport" class="headerlink" title="3.vue3新增了Teleport"></a>3.vue3新增了<code>Teleport</code></h3><p><a href="https://vue3js.cn/docs/zh/guide/teleport.html#teleport">Teleport</a></p>
<p>在vue3刚出来的时候，我读过一遍文档，依稀记得添加了一个神奇的控件<code>Teleport</code>，可以把逻辑和展示分开，但是是它的逻辑在一块。</p>
<p>想必element-plus就是使用这种方式重构了select组件。</p>
<h3 id="4-阅读源码"><a href="#4-阅读源码" class="headerlink" title="4.阅读源码"></a>4.阅读源码</h3><p>让我们翻开<code>element-plus/packages/select/src/select.vue</code></p>
<p><img src="/images/%E5%89%8D%E7%AB%AF20/6.png" alt="6.png"></p>
<p>映入眼帘的就是<code>el-popper</code></p>
<p>我们再看看<code>element-plus/packages/popper/src/index.vue</code></p>
<p><img src="/images/%E5%89%8D%E7%AB%AF20/7.png" alt="7.png"></p>
<p>看来我们找到它了</p>
<h3 id="5-定位联系"><a href="#5-定位联系" class="headerlink" title="5.定位联系"></a>5.定位联系</h3><p>我们点击<code>select</code>，唤起对应的待选列表</p>
<p>如果一个页面有多个<code>select</code>，也是正常能唤起的</p>
<p>所以每个<code>select</code>与每个<code>popper</code>之间，应该存在着某种联系</p>
<p>继续阅读<code>el-popper</code>，果然，我们发现了一个值<code>popperId</code></p>
<p><img src="/images/%E5%89%8D%E7%AB%AF20/8.png" alt="8.png"></p>
<p>并且被赋值给了<code>ariaDescribedby</code></p>
<h3 id="回过头来看dom🌲"><a href="#回过头来看dom🌲" class="headerlink" title="回过头来看dom🌲"></a>回过头来看dom🌲</h3><p>我们果然在select的标签上，找到了<code>ariaDescribedby</code>属性</p>
<p><img src="/images/%E5%89%8D%E7%AB%AF20/9.png" alt="9.png"></p>
<p>并且再其对应的<code>popper</code>上，找到了这个id</p>
<p><img src="/images/%E5%89%8D%E7%AB%AF20/10.png" alt="10.png"></p>
<p>那么问题解决了，我们只需要对指令稍作修改</p>
<h1 id="最终指令"><a href="#最终指令" class="headerlink" title="最终指令"></a>最终指令</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> loadMore = &#123;</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params">el, binding</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> child = el.<span class="title function_">querySelector</span>(<span class="string">&#x27;.select-trigger&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> id = child.<span class="title function_">getAttribute</span>(<span class="string">&#x27;ariadescribedby&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> poper = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(id);</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">SELECTDOWN_DOM</span> = poper.<span class="title function_">querySelector</span>(<span class="string">&#x27;.el-scrollbar .el-select-dropdown__wrap&#x27;</span>);</span><br><span class="line">    <span class="comment">// 这里不能使用箭头函数！</span></span><br><span class="line">    <span class="comment">// eslint-disable-next-line func-names</span></span><br><span class="line">    <span class="variable constant_">SELECTDOWN_DOM</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * scrollHeight 获取元素内容高度(只读)</span></span><br><span class="line"><span class="comment">       * scrollTop 获取或者设置元素的偏移值,</span></span><br><span class="line"><span class="comment">       *  常用于:计算滚动条的位置, 当一个元素的容器没有产生垂直方向的滚动条, 那它的scrollTop的值默认为0.</span></span><br><span class="line"><span class="comment">       * clientHeight 读取元素的可见高度(只读)</span></span><br><span class="line"><span class="comment">       * 如果元素滚动到底, 下面等式返回true, 没有则返回false:</span></span><br><span class="line"><span class="comment">       * ele.scrollHeight - ele.scrollTop === ele.clientHeight;</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">const</span> <span class="variable constant_">CONDITION</span> = <span class="variable language_">this</span>.<span class="property">scrollHeight</span> - <span class="variable language_">this</span>.<span class="property">scrollTop</span> &lt;= <span class="variable language_">this</span>.<span class="property">clientHeight</span>;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable constant_">CONDITION</span>) &#123;</span><br><span class="line">        binding.<span class="title function_">value</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> loadMore;</span><br></pre></td></tr></table></figure>

<h1 id="over"><a href="#over" class="headerlink" title="over"></a>over</h1>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的前端之旅（二）-vue 使用 lottie</title>
    <url>/2019/12/31/%E6%97%A0%E6%98%9F%E7%9A%84%E5%89%8D%E7%AB%AF%E4%B9%8B%E6%97%85%EF%BC%88%E4%BA%8C%EF%BC%89-vue-%E4%BD%BF%E7%94%A8-lottie/</url>
    <content><![CDATA[<h2 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h2><p>最近在写vue，使用的是nuxt框架做ssr。css属实有点难搞，ui又想让我做动画，说要好看，要酷，要炫。属实有点要命。</p>
<p>没办法，我只能搪塞到：“你看看lottie，这个比较简单，比较方便，我也不用写很多代码，你也能看到你想要的效果”。当时UI就答应了，表示回去研究研究。</p>
<p>其实我也没用过，当时想的是，等你研究完估计就得明年了。谁知道不到两个星期，ae就导出json就给我了，怎么效率这么高。。。</p>
<h2 id="一-引入lottie"><a href="#一-引入lottie" class="headerlink" title="一.引入lottie"></a>一.引入lottie</h2><p>看了半天，怎么都说用vue-lottie，这玩意也不是官方的拓展啊，莫名觉得心里不靠谱，不太想用（写rn的时候也是，想用echarts,发现没有，只好自己桥接了一个）。再看看，官方不是有lottie-web么，用就完事了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add lottie-web</span><br></pre></td></tr></table></figure>
<p>引入完毕</p>
<h2 id="二-纯json使用"><a href="#二-纯json使用" class="headerlink" title="二.纯json使用"></a>二.纯json使用</h2><p>属实简单，但是这里有些不一样的地方。先上代码,style我直接省略了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--loading--&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div v-show=&quot;showloading&quot; class=&quot;main&quot;&gt;</span><br><span class="line">    &lt;div id=&quot;money&quot; class=&quot;loading&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import lottie from &#x27;lottie-web&#x27;</span><br><span class="line">import datajson from &#x27;@/assets/lottie/withdraw/data.json&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;&#125;,</span><br><span class="line">  data: () =&gt; (&#123;</span><br><span class="line">    showloading: true,</span><br><span class="line">  &#125;),</span><br><span class="line">  computed: &#123;&#125;,</span><br><span class="line">  watch: &#123;&#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    this.init()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    init() &#123;</span><br><span class="line">      const icon = document.getElementById(&#x27;money&#x27;)</span><br><span class="line">      lottie.loadAnimation(&#123;</span><br><span class="line">        container: icon, // 包含动画的dom元素</span><br><span class="line">        renderer: &#x27;svg&#x27;, // 渲染出来的是什么格式</span><br><span class="line">        loop: true, // 循环播放</span><br><span class="line">        autoplay: true, // 自动播放</span><br><span class="line">        animationData: datajson, // 动画json的路径</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    show() &#123;</span><br><span class="line">      this.showloading = true</span><br><span class="line">      lottie.play()</span><br><span class="line">    &#125;,</span><br><span class="line">    hidden() &#123;</span><br><span class="line">      this.showloading = false</span><br><span class="line">      lottie.stop()</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>可以查到的是，大多数你能查到的资料，都是使用path加载json路径。因为我是nuxt，webpack打包后我也不知道我的路径在哪。</p>
<p>所以这里有两条路</p>
<ul>
<li>path加载远端路径</li>
<li>animationData加载本地json的导出对象</li>
</ul>
<p>关于path：</p>
<p>这里我选择的是animationData，如果你的项目不是nuxt，那么你直接写相对路径肯定是没问题的。</p>
<p>ps：如果你也是nuxt项目，path加载远端路径，可以把json放到server里面，然后加载本地的ip路径即可。</p>
<p>关于animationData：</p>
<p>也可以把json转成js对象导出再用，都是可以的。如果不ok，打个断点看看是不是要加.default</p>
<h2 id="三-带图片的json"><a href="#三-带图片的json" class="headerlink" title="三.带图片的json"></a>三.带图片的json</h2><p>这个就很有意思，你会发现，查不到什么资料。。。</p>
<p>先说结论，项目结构图如下（我知道pack-lock.json和yarn.lock同时存在是不对的）</p>
<p><img src="/images/vue%E4%BD%BF%E7%94%A8lottie/%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="项目结构图"></p>
<h3 id="方式一，加载本地图片（我认为的最佳方案）"><a href="#方式一，加载本地图片（我认为的最佳方案）" class="headerlink" title="方式一，加载本地图片（我认为的最佳方案）"></a>方式一，加载本地图片（我认为的最佳方案）</h3><p>我是将json的文件放在了assets文件夹下，这里会被webpack打包静态资源</p>
<p><img src="/images/vue%E4%BD%BF%E7%94%A8lottie/json%E6%89%80%E5%9C%A8%E8%B7%AF%E5%BE%84.png" alt="json所在路径"></p>
<p>将原本UI导出给你的图片放到static文件夹下，并改动对应的json</p>
<p>json中的u是图片路径，p是文件名，这里我们只需要把u改动为相对路径即可</p>
<p><img src="/images/vue%E4%BD%BF%E7%94%A8lottie/%E5%9B%BE%E7%89%87%E6%89%80%E5%9C%A8%E8%B7%AF%E5%BE%84.png" alt="图片所在路径"></p>
<p>为什么要把图片放到static下呢？因为static下的静态资源文件不会被webpack打包，可以直接通过路径被外部访问。</p>
<h3 id="方式二，加载远程图片资源"><a href="#方式二，加载远程图片资源" class="headerlink" title="方式二，加载远程图片资源"></a>方式二，加载远程图片资源</h3><p>如上图，将json中的u对应的路径，直接删了，将p换成远端资源文件路径。</p>
<h3 id="方式三，和UI进行友好亲切的会谈"><a href="#方式三，和UI进行友好亲切的会谈" class="headerlink" title="方式三，和UI进行友好亲切的会谈"></a>方式三，和UI进行友好亲切的会谈</h3><p><img src="/images/vue%E4%BD%BF%E7%94%A8lottie/%E5%8F%8B%E5%A5%BD%E4%BC%9A%E8%B0%88.png" alt="友好会谈"></p>
<p>告诉UI。将image转成svg，然后转成.ai文件，放进AE，最终导出为json，这样json中就含有了对应的image，按纯json文件方式使用即可，你也不需要做这么多事了。</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的前端之旅（五）——小程序批量发布如何压缩打包时间</title>
    <url>/2020/05/09/%E6%97%A0%E6%98%9F%E7%9A%84%E5%89%8D%E7%AB%AF%E4%B9%8B%E6%97%85%EF%BC%88%E4%BA%94%EF%BC%89%E2%80%94%E2%80%94%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%89%B9%E9%87%8F%E5%8F%91%E5%B8%83%E5%A6%82%E4%BD%95%E5%8E%8B%E7%BC%A9%E6%89%93%E5%8C%85%E6%97%B6%E9%97%B4/</url>
    <content><![CDATA[<p>其实标题起的有点大，主要是使用shell中的&amp;和wait这两个命令。</p>
<p>运维大佬不要嘲笑。</p>
<p><a href="http://blog.xingxiaowu.cn/2020/05/07/%E6%97%A0%E6%98%9F%E7%9A%84%E5%89%8D%E7%AB%AF%E4%B9%8B%E6%97%85%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/">无星的前端之旅（四）——小程序持续集成</a>前面介绍了背景，我们有一套代码要发40多个客户的小程序主体。</p>
<p>在Jenkins中加shell去完成上传开发版这个操作。但是需要进行多参数化配置，换句话说就是40多家客户我们要打40多个包，分别上传。</p>
<p>shell的执行方式是，前面执行完了，我们才能执行下一个命令。</p>
<p>因此如果我们打一个包并上传的时间是1分钟，那40家就是40分钟。这谁顶得住啊。</p>
<p>所以需要考虑如何压缩这个打包上传时间，能不能同时打包，同时上传。</p>
<p>原本的shell如下，变量我就写中文代替了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function npminstall()&#123;</span><br><span class="line">  echo &quot;拉依赖&quot;</span><br><span class="line">  cd 代码文件夹下</span><br><span class="line">  npm install</span><br><span class="line">&#125;</span><br><span class="line">function buildwx()&#123;</span><br><span class="line">  echo &quot;执行构建&quot;</span><br><span class="line">  # echo &#x27;环境:&#x27;$1</span><br><span class="line">  # echo &#x27;文件名:&#x27;$2</span><br><span class="line">  # echo &#x27;客户名:&#x27;$3</span><br><span class="line">  npx cross-env 环境=$1 文件名=$2 客户名=$3 node build/build.js wx</span><br><span class="line">&#125;</span><br><span class="line">function upload()&#123;</span><br><span class="line">  echo &quot;执行上传&quot;</span><br><span class="line">  # echo &#x27;文件名:&#x27;$1</span><br><span class="line">  # echo &#x27;appid:&#x27;$2</span><br><span class="line">  # echo &#x27;version:&#x27;$3</span><br><span class="line">  npx miniprogram-ci upload --pp  ./dist/$&#123;1&#125;/wx --pkp ./privatekey/private.$&#123;2&#125;.key --appid $&#123;2&#125; --uv $&#123;3&#125; -r 1 --enable-es6 true</span><br><span class="line">&#125;</span><br><span class="line">#------------------待构建配置------------------</span><br><span class="line">configs=(</span><br><span class="line">&quot;xxx客户;xxx环境;xxx文件名;xxxxappid&quot;</span><br><span class="line">&quot;xxx客户;xxx环境;xxx文件名;xxxxappid&quot;</span><br><span class="line">)</span><br><span class="line">##读取version变量</span><br><span class="line">version=‘xxx文件读取’</span><br><span class="line">#------------------执行批量构建------------------</span><br><span class="line">npminstall</span><br><span class="line">for xxx in $&#123;configs[@]&#125;;do </span><br><span class="line">客户名=`echo $&#123;xxx&#125; | awk -F &quot;;&quot; &#x27;&#123;print $1&#125;&#x27;`</span><br><span class="line">环境=`echo $&#123;xxx&#125; | awk -F &quot;;&quot; &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">文件名=`echo $&#123;xxx&#125; | awk -F &quot;;&quot; &#x27;&#123;print $3&#125;&#x27;`</span><br><span class="line">appid=`echo $&#123;xxx&#125; | awk -F &quot;;&quot; &#x27;&#123;print $4&#125;&#x27;`</span><br><span class="line">buildwx $&#123;环境&#125; $&#123;文件名&#125; $&#123;客户名&#125;</span><br><span class="line">upload $&#123;文件名&#125; $&#123;appid&#125; $&#123;version&#125;</span><br><span class="line">echo &quot;$客户名 上传完毕&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p>就是一个简单的for循环，根据配置信息批量打包。40多家就是40分钟。</p>
<p>&amp;：可以将命令转到后台执行，不阻塞。<br>wait：可以等待前面命令全部执行完毕，避免终端提前退出。</p>
<p>因此我们改造一下批量构建的shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npminstall</span><br><span class="line">for xxx in $&#123;configs[@]&#125;;do &#123;</span><br><span class="line">客户名=`echo $&#123;xxx&#125; | awk -F &quot;;&quot; &#x27;&#123;print $1&#125;&#x27;`</span><br><span class="line">环境=`echo $&#123;xxx&#125; | awk -F &quot;;&quot; &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">文件名=`echo $&#123;xxx&#125; | awk -F &quot;;&quot; &#x27;&#123;print $3&#125;&#x27;`</span><br><span class="line">appid=`echo $&#123;xxx&#125; | awk -F &quot;;&quot; &#x27;&#123;print $4&#125;&#x27;`</span><br><span class="line">buildwx $&#123;环境&#125; $&#123;文件名&#125; $&#123;客户名&#125;</span><br><span class="line">upload $&#123;文件名&#125; $&#123;appid&#125; $&#123;version&#125;</span><br><span class="line">echo &quot;$客户名 上传完毕&quot;</span><br><span class="line">&#125; &amp;</span><br><span class="line">done</span><br><span class="line">wait </span><br><span class="line">echo &quot;全部完成&quot;</span><br></pre></td></tr></table></figure>

<p>就这样，将Jenkins的整个时间，从40分钟，降到了3分钟。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的前端之旅（八）——微信小程序声网接入</title>
    <url>/2020/07/27/%E6%97%A0%E6%98%9F%E7%9A%84%E5%89%8D%E7%AB%AF%E4%B9%8B%E6%97%85%EF%BC%88%E5%85%AB%EF%BC%89%E2%80%94%E2%80%94%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%A3%B0%E7%BD%91%E6%8E%A5%E5%85%A5/</url>
    <content><![CDATA[<h1 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h1><p><img src="/images/%E5%89%8D%E7%AB%AF8/%E5%A3%B0%E7%BD%91.png" alt="流程图"></p>
<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>房间号：房间号是基于声网appid命名空间的，同一个appid下的房间号如果存在会加入，不存在则直接创建</p>
<p>uid:可使用下面的组件中提供的组件中的utils获取，本质是基于时间生成的各不相同，也可以根据我们的业务自定义产生，比如直接使用用户id</p>
<h1 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h1><p><a href="/images/%E5%89%8D%E7%AB%AF8/agroa.zip">组件下载地址</a><br>集成步骤可查看readme</p>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>微信基础库 1.7.0 开始支持，低版本需做兼容处理。</p>
<h1 id="微信需要配置域名"><a href="#微信需要配置域名" class="headerlink" title="微信需要配置域名"></a>微信需要配置域名</h1><h2 id="request"><a href="#request" class="headerlink" title="request:"></a>request:</h2><p><a href="https://miniapp-1.agoraio.cn/">https://miniapp-1.agoraio.cn</a></p>
<p><a href="https://miniapp-2.agoraio.cn/">https://miniapp-2.agoraio.cn</a></p>
<p><a href="https://miniapp-3.agoraio.cn/">https://miniapp-3.agoraio.cn</a></p>
<p><a href="https://miniapp-4.agoraio.cn/">https://miniapp-4.agoraio.cn</a></p>
<p><a href="https://miniapp.agoraio.cn/">https://miniapp.agoraio.cn</a></p>
<p><a href="https://uni-webcollector.agora.io/">https://uni-webcollector.agora.io</a></p>
<h2 id="socket"><a href="#socket" class="headerlink" title="socket:"></a>socket:</h2><p>wss://miniapp.agoraio.cn</p>
<h1 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h1><p><a href="https://docs.agora.io/cn/Agora%20Platform/downloads">下载地址</a></p>
<p><a href="https://docs.agora.io/cn/Agora%20Platform/community">开发者社区</a></p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>声网</tag>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的前端之旅（六）—— Vue引入Storybook（一）</title>
    <url>/2020/06/07/%E6%97%A0%E6%98%9F%E7%9A%84%E5%89%8D%E7%AB%AF%E4%B9%8B%E6%97%85%EF%BC%88%E5%85%AD%EF%BC%89%E2%80%94%E2%80%94%20Vue%E5%BC%95%E5%85%A5Storybook%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h3 id="为什么要引入"><a href="#为什么要引入" class="headerlink" title="为什么要引入"></a>为什么要引入</h3><p>一开始我想的是，可能多人多项目开发，把组件展示出来，避免重复造轮子</p>
<p>但后来想想，好像除了展示，没什么其他用处</p>
<p>两个项目如果要用同一个样式的组件，如果没有单独抽出组件库，还是得复制粘贴，用处不大</p>
<p>只能说做组件库的同学用这个比较好用。</p>
<p>还有一个自动化测试的好处（不过我从来没写过测试，暂时还无法体会这个好处）</p>
<p>还有其他用处的话，麻烦老哥们留言区告诉我</p>
<h3 id="如何引入"><a href="#如何引入" class="headerlink" title="如何引入"></a>如何引入</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd 项目目录下</span><br><span class="line">npx -p @storybook/cli sb init</span><br></pre></td></tr></table></figure>
<p>会拉一些依赖，并新建两个文件夹</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.storybook</span><br><span class="line">stories/xxx</span><br></pre></td></tr></table></figure>
<p>启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run storybook</span><br></pre></td></tr></table></figure>

<h3 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h3><h4 id="1-项目中有alias重命名了目录怎么办？"><a href="#1-项目中有alias重命名了目录怎么办？" class="headerlink" title="1.项目中有alias重命名了目录怎么办？"></a>1.项目中有alias重命名了目录怎么办？</h4><p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//vue.config.js</span><br><span class="line">module.exports = &#123;</span><br><span class="line">//省略</span><br><span class="line">....</span><br><span class="line">configureWebpack: &#123;</span><br><span class="line">    resolve: &#123;</span><br><span class="line">      alias: &#123;</span><br><span class="line">        &#x27;@&#x27;: resolve(&#x27;src&#x27;),</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
<p>在.storybook/main.js中一样新增即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//.storybook/main.js</span><br><span class="line">const path = require(&#x27;path&#x27;)</span><br><span class="line">module.exports = &#123;</span><br><span class="line">//省略</span><br><span class="line">.......</span><br><span class="line">  webpackFinal: async (config) =&gt; &#123;</span><br><span class="line">    config.resolve = &#123;</span><br><span class="line">      ...config.resolve,</span><br><span class="line">      alias: &#123;</span><br><span class="line">        ...config.resolve.alias,</span><br><span class="line">        &#x27;@&#x27;: path.join(__dirname, &#x27;../src&#x27;),</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">//省略</span><br><span class="line">.......</span><br><span class="line">    return config</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2-项目中用到了less-scss等怎么办"><a href="#2-项目中用到了less-scss等怎么办" class="headerlink" title="2.项目中用到了less/scss等怎么办?"></a>2.项目中用到了less/scss等怎么办?</h4><p>因为基于vue.cli4版本的项目，脚手架内置了cssloader，因此什么都不用做。<br>但是storybook还是需要手动处理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//.storybook/main.js</span><br><span class="line">module.exports = &#123;</span><br><span class="line">//省略</span><br><span class="line">....</span><br><span class="line">  webpackFinal: async (config) =&gt; &#123;</span><br><span class="line">  //省略</span><br><span class="line">  ......</span><br><span class="line">  //这里只写less的，scss同理改一下配置即可</span><br><span class="line">    config.module.rules.push(&#123;</span><br><span class="line">      test: /\.less$/,</span><br><span class="line">      loaders: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;less-loader&quot;],</span><br><span class="line">      include: path.resolve(__dirname, &#x27;../&#x27;)</span><br><span class="line">    &#125;);</span><br><span class="line">  //省略</span><br><span class="line">  ......</span><br><span class="line">    return config</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3-Vue项目中引入了element-ui，大量组件基于element-ui封装的，怎么让storybook能够读取到element-ui的组件"><a href="#3-Vue项目中引入了element-ui，大量组件基于element-ui封装的，怎么让storybook能够读取到element-ui的组件" class="headerlink" title="3.Vue项目中引入了element-ui，大量组件基于element-ui封装的，怎么让storybook能够读取到element-ui的组件?"></a>3.Vue项目中引入了element-ui，大量组件基于element-ui封装的，怎么让storybook能够读取到element-ui的组件?</h4><p>在.storybook文件夹下新建一个config.js文件,引入即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//.storybook/config.js</span><br><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import ElementUI from &#x27;element-ui&#x27;</span><br><span class="line">import &#x27;element-ui/lib/theme-chalk/index.css&#x27;</span><br><span class="line">Vue.use(ElementUI)</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>前端</tag>
        <tag>vue</tag>
        <tag>storybook</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的前端之旅（十一）——Vscode的换行符问题</title>
    <url>/2020/11/26/%E6%97%A0%E6%98%9F%E7%9A%84%E5%89%8D%E7%AB%AF%E4%B9%8B%E6%97%85%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94Vscode%E7%9A%84%E6%8D%A2%E8%A1%8C%E7%AC%A6%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>大🔥都知道，Vscode的换行符有LF和CRLF</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在各操作系统下，文本文件所使用的换行符是不一样的。UNIX/Linux 使用的是 0x0A（LF），早期的 Mac OS 使用的是0x0D（CR），后来的 OS X 在更换内核后与 UNIX 保持一致了。但 DOS/Windows 一直使用 0x0D0A（CRLF）作为换行符。Git提供了一个“换行符自动转换”功能。这个功能默认处于“自动模式”，当你在签出文件时，它试图将 UNIX 换行符（LF）替换为 Windows 的换行符（CRLF）；当你在提交文件时，它又试图将 CRLF 替换为 LF。Git 的“换行符自动转换”功能听起来似乎很智能、很贴心，因为它试图一方面保持仓库内文件的一致性（UNIX 风格），一方面又保证本地文件的兼容性（Windows 风格）。但遗憾的是，这个功能是有 bug 的，而且在短期内都不太可能会修正。 </span><br></pre></td></tr></table></figure>
<p>从<a href="https://www.cnblogs.com/sdgf/p/6237847.html">git 换行符LF与CRLF转换问题</a>抄的</p>
<p>这里我们可以知道，在macOS和linux上，与windows的换行符是不一致的。</p>
<p>一旦使用eslint等工具，就会整个项目出问题。。。</p>
<h2 id="可能在百度搜半天，怎么解决这个问题，发现的都是以下两种："><a href="#可能在百度搜半天，怎么解决这个问题，发现的都是以下两种：" class="headerlink" title="可能在百度搜半天，怎么解决这个问题，发现的都是以下两种："></a>可能在百度搜半天，怎么解决这个问题，发现的都是以下两种：</h2><p>1.新建文件怎么设置换行符</p>
<p>2.单文件如何通过编辑器修改换行符</p>
<p>丝毫没提如何修正已有文件</p>
<h2 id="项目那么多文件，怎么可能手动一个个修复"><a href="#项目那么多文件，怎么可能手动一个个修复" class="headerlink" title="项目那么多文件，怎么可能手动一个个修复"></a>项目那么多文件，怎么可能手动一个个修复</h2><p> 所以这里提一下如何修正</p>
<h3 id="在mac-linux上："><a href="#在mac-linux上：" class="headerlink" title="在mac/linux上："></a>在mac/linux上：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd 项目根目录</span><br><span class="line">find . -type f | grep -v &quot;node_modules&quot; | xargs dos2unix</span><br></pre></td></tr></table></figure>


<h3 id="在windows上，使用git-bash终端，不要用cmd或者powershell"><a href="#在windows上，使用git-bash终端，不要用cmd或者powershell" class="headerlink" title="在windows上，使用git-bash终端，不要用cmd或者powershell"></a>在windows上，使用git-bash终端，不要用cmd或者powershell</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd 项目根目录</span><br><span class="line">find . -type f | grep -v &quot;node_modules&quot; | xargs dos2unix</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的前端之旅（十七）-typescript初探</title>
    <url>/2021/02/13/%E6%97%A0%E6%98%9F%E7%9A%84%E5%89%8D%E7%AB%AF%E4%B9%8B%E6%97%85%EF%BC%88%E5%8D%81%E4%B8%83%EF%BC%89-typescript%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<p>之前干iOS的，写过一段时间swift，所以从js转到ts对我其实影响不太大。</p>
<p>只是有些知识点比较乱，没有串起来过。</p>
<p>首先我们需要上<a href="https://www.typescriptlang.org/zh/">typescript的官方文档</a>阅读一哈文档</p>
<p>中文网很久没有更新了，不过github有老哥一直在翻译<a href="https://github.com/zhongsp/TypeScript">zhongsp/TypeScript</a></p>
<p>实际上现在看官网也有中文语言这个选项了，但是翻译完成的文章不太多，今后应该会越来越多。</p>
<p>那么接下来就是把知识点串起来了</p>
<p>以下都是个人观点，如果有不对，望大牛指点</p>
<h1 id="1-要不要全局安装typescript"><a href="#1-要不要全局安装typescript" class="headerlink" title="1.要不要全局安装typescript"></a>1.要不要全局安装typescript</h1><p>个人觉得不要，typescript也是有版本的，版本随着项目走，项目去安装typescript即可，完全没有必要全局安装。</p>
<h1 id="2-tsc命令"><a href="#2-tsc命令" class="headerlink" title="2.tsc命令"></a>2.tsc命令</h1><p><a href="https://www.typescriptlang.org/docs/handbook/compiler-options.html">tsc options</a></p>
<p>安装typescript以后，就会有tsc命令了，tsc命令能做的事很多，ts转js等。</p>
<p>而tsc的可选项实际上是通过tsconfig传递的（当然也可以手动添加参数）</p>
<h1 id="3-tsconfig文件"><a href="#3-tsconfig文件" class="headerlink" title="3.tsconfig文件"></a>3.tsconfig文件</h1><p><a href="https://www.typescriptlang.org/zh/tsconfig">tsconfig</a></p>
<p>实际上这才是整个项目的配置精髓，遇到的大部分配置性问题，都可以在文档查到。</p>
<p>整个ts项目的编译和静态检测都依赖于tsconifg文件的配置。</p>
<h1 id="4-ts项目写好了，d-ts文件怎么生成"><a href="#4-ts项目写好了，d-ts文件怎么生成" class="headerlink" title="4.ts项目写好了，d.ts文件怎么生成"></a>4.ts项目写好了，d.ts文件怎么生成</h1><p>开发库或者对知名库做二次封装是常见的需求，像我第一次用ts的需求就是对库做二次封装，声明文件的生成真是让我头痛。</p>
<p>实际上，tsconfig的配置项中添加<a href="https://www.typescriptlang.org/zh/tsconfig#declaration">declaration</a>即可。写好<a href="https://www.typescriptlang.org/zh/tsconfig#outDir">outDir</a>做输出路径即可。</p>
<h1 id="5-有了ts还要babel吗？"><a href="#5-有了ts还要babel吗？" class="headerlink" title="5.有了ts还要babel吗？"></a>5.有了ts还要babel吗？</h1><p><a href="https://www.typescriptlang.org/tsconfig#target">tsconfig target</a><br>从文档中我们能够看到，通过设置target选项，可以将ts编译成低版本的js代码，那还要babel吗？</p>
<p>一般三方库都会做好低版本的编译，自己的项目又没有js的话，我个人觉得没有必要了。</p>
<p>因为ts编译的时候已经帮你转好了。</p>
<h1 id="6-用eslint还是tslint"><a href="#6-用eslint还是tslint" class="headerlink" title="6.用eslint还是tslint"></a>6.用eslint还是tslint</h1><p>其实现在应该没有这个问题了，因为tslint早就被废弃了，使用eslint。</p>
<h1 id="P-S：掘金的搜索能不能添加一个沸点搜索功能"><a href="#P-S：掘金的搜索能不能添加一个沸点搜索功能" class="headerlink" title="P.S：掘金的搜索能不能添加一个沸点搜索功能"></a>P.S：掘金的搜索能不能添加一个沸点搜索功能</h1><p>之前在掘金的沸点看到过一个老哥提问，说看中文网上写的：“默认情况下null和undefined是所有类型的子类型。 就是说你可以把 null和undefined赋值给number类型的变量。”但是发布沸点的老哥表示自己尝试了一下，报错了，不知道原因为何。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let aa: number = null;</span><br></pre></td></tr></table></figure>
<p>实际上文档下面标注了，strictNullChecks这个选项在文档介绍中是关闭的<br><img src="/images/%E5%89%8D%E7%AB%AF17/1.png"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的前端之旅（十三）——require.context和vuex持久化</title>
    <url>/2021/01/13/%E6%97%A0%E6%98%9F%E7%9A%84%E5%89%8D%E7%AB%AF%E4%B9%8B%E6%97%85%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94require.context%E5%92%8Cvuex%E6%8C%81%E4%B9%85%E5%8C%96/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>有些component需要全局注册的，但是在main.js中全局注册又太麻烦了。</p>
<p>store采用modules方式分包，使用的时候也要手动注册。</p>
<p>store刷新丢失，需要持久化。</p>
<p>这时候解决前两个问题，可以使用<a href="https://webpack.js.org/guides/dependency-management/#requirecontext">require.context</a></p>
<p>解决最后一个问题可以使用<a href="https://github.com/robinvdvleuten/vuex-persistedstate">vuex-persistedstate</a></p>
<h1 id="require-context"><a href="#require-context" class="headerlink" title="require.context"></a>require.context</h1><h2 id="1-require-context是什么？"><a href="#1-require-context是什么？" class="headerlink" title="1.require.context是什么？"></a>1.require.context是什么？</h2><p>Vue内置了webpack的部分配置，这个咱们就不多说了。</p>
<p>require.context是webpack的api。</p>
<h2 id="2-require-context能干什么？"><a href="#2-require-context能干什么？" class="headerlink" title="2.require.context能干什么？"></a>2.require.context能干什么？</h2><p>通过执行require.context()函数可以获取一个特定的上下文，主要用来实现自动化导入模块。</p>
<p>它允许您传递要搜索的目录，指示是否也应搜索子目录的标志以及用于匹配文件的正则表达式，然后自动导入，使得不需要每次显式的调用import导入模块。</p>
<p>require.context()在构建时，webpack在代码中进行解析。</p>
<h1 id="全局自动注册component"><a href="#全局自动注册component" class="headerlink" title="全局自动注册component"></a>全局自动注册component</h1><p>新建一个放置全局组件的文件夹，例如：components</p>
<p>在components文件夹下新建一个js文件，例如：autoRegister.js</p>
<p>vue2版本：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /components/autoRegister.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> componentsContext = <span class="built_in">require</span>.<span class="title function_">context</span>(<span class="string">&#x27;./&#x27;</span>, <span class="literal">true</span>, <span class="regexp">/index.(vue|js)$/</span>);</span><br><span class="line">componentsContext.<span class="title function_">keys</span>().<span class="title function_">forEach</span>(<span class="function">(<span class="params">fileName</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 获取文件中的 default 模块</span></span><br><span class="line">  <span class="keyword">const</span> componentConfig = <span class="title function_">componentsContext</span>(fileName).<span class="property">default</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/.vue$/</span>.<span class="title function_">test</span>(fileName)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(componentConfig.<span class="property">name</span>);</span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(componentConfig.<span class="property">name</span>, componentConfig);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">use</span>(componentConfig);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>vue3版本：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /components/autoRegister.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">autoRegister</span> = (<span class="params">app</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> componentsContext = <span class="built_in">require</span>.<span class="title function_">context</span>(<span class="string">&#x27;./&#x27;</span>, <span class="literal">true</span>, <span class="regexp">/index.(vue|js)$/</span>);</span><br><span class="line">  componentsContext.<span class="title function_">keys</span>().<span class="title function_">forEach</span>(<span class="function">(<span class="params">fileName</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获取文件中的 default 模块</span></span><br><span class="line">    <span class="keyword">const</span> componentConfig = <span class="title function_">componentsContext</span>(fileName).<span class="property">default</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/.vue$/</span>.<span class="title function_">test</span>(fileName)) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(componentConfig.<span class="property">name</span>);</span><br><span class="line">      app.<span class="title function_">component</span>(componentConfig.<span class="property">name</span>, componentConfig);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      app.<span class="title function_">use</span>(componentConfig);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> autoRegister;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>main.js中调用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue2,是的，只需要引入就行了，因为js会默认执行</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@/components/autoRegister&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// vue3</span></span><br><span class="line"><span class="keyword">import</span> autoRegister <span class="keyword">from</span> <span class="string">&#x27;./components/autoRegister&#x27;</span>;</span><br><span class="line"><span class="title function_">autoRegister</span>(app);</span><br></pre></td></tr></table></figure>

<h1 id="自动分module注册store"><a href="#自动分module注册store" class="headerlink" title="自动分module注册store"></a>自动分module注册store</h1><p>我们在store文件夹下新建一个index.js和一个modules文件夹</p>
<p>vue2:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> modulesFiles = <span class="built_in">require</span>.<span class="title function_">context</span>(<span class="string">&#x27;./modules&#x27;</span>, <span class="literal">true</span>, <span class="regexp">/\.js$/</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> modules = modulesFiles.<span class="title function_">keys</span>().<span class="title function_">reduce</span>(<span class="function">(<span class="params">modules, modulePath</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> moduleName = modulePath.<span class="title function_">replace</span>(<span class="regexp">/^\.\/(.*)\.\w+$/</span>, <span class="string">&#x27;$1&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> value = <span class="title function_">modulesFiles</span>(modulePath)</span><br><span class="line">  modules[moduleName] = value.<span class="property">default</span></span><br><span class="line">  <span class="keyword">return</span> modules</span><br><span class="line">&#125;, &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  modules,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure>

<p>vue3:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> modulesFiles = <span class="built_in">require</span>.<span class="title function_">context</span>(<span class="string">&#x27;./modules&#x27;</span>, <span class="literal">true</span>, <span class="regexp">/\.js$/</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> modules = modulesFiles.<span class="title function_">keys</span>().<span class="title function_">reduce</span>(<span class="function">(<span class="params">modules, modulePath</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> moduleName = modulePath.<span class="title function_">replace</span>(<span class="regexp">/^\.\/(.*)\.\w+$/</span>, <span class="string">&#x27;$1&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> value = <span class="title function_">modulesFiles</span>(modulePath)</span><br><span class="line">  modules[moduleName] = value.<span class="property">default</span></span><br><span class="line">  <span class="keyword">return</span> modules</span><br><span class="line">&#125;, &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  modules,</span><br><span class="line">  <span class="attr">strict</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>关于分包的store，举个例子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /store/modules/exampleStore.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">store.<span class="property">state</span>.<span class="property">exampleStore</span>.<span class="property">xxx</span></span><br></pre></td></tr></table></figure>

<h1 id="vuex持久化"><a href="#vuex持久化" class="headerlink" title="vuex持久化"></a>vuex持久化</h1><p>持久化用<a href="https://github.com/robinvdvleuten/vuex-persistedstate">vuex-persistedstate</a>，这没有什么好说的了，用法看文档。</p>
<p>这里要说的是配合require.context，如何让每个store里加上持久化</p>
<p>在导出的时候我们可以看到，其实导出了一堆属性，最后都是通过</p>
<p>modules[moduleName] = value.default</p>
<p>的方式注入</p>
<p>那我们是否可以多导出一个属性，通过一些方式，让指定属性用于本地持久化呢？</p>
<p>答案是：可以</p>
<p>我们对上面的东西稍作演化</p>
<h2 id="1-修改modules中的模块导出"><a href="#1-修改modules中的模块导出" class="headerlink" title="1.修改modules中的模块导出"></a>1.修改modules中的模块导出</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default &#123;              export default &#123;  </span><br><span class="line">  namespaced: true,             namespaced: true,</span><br><span class="line">  state,                =&gt;      state,</span><br><span class="line">  mutations,                    mutations,</span><br><span class="line">  actions,                      actions,</span><br><span class="line">&#125;;                              localStorage: [&#x27;name&#x27;],//假设state中需要持久化的key为name</span><br><span class="line">                              &#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-在自动倒入中稍加判断是否存在localStorage"><a href="#2-在自动倒入中稍加判断是否存在localStorage" class="headerlink" title="2.在自动倒入中稍加判断是否存在localStorage"></a>2.在自动倒入中稍加判断是否存在localStorage</h2><p>vue2:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> createPersistedState <span class="keyword">from</span> <span class="string">&#x27;vuex-persistedstate&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>);</span><br><span class="line"><span class="keyword">const</span> modules = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> modulePluginPaths = [];</span><br><span class="line"><span class="keyword">const</span> requireModule = <span class="built_in">require</span>.<span class="title function_">context</span>(<span class="string">&#x27;./modules&#x27;</span>, <span class="literal">false</span>, <span class="regexp">/.js$/</span>);</span><br><span class="line">requireModule.<span class="title function_">keys</span>().<span class="title function_">forEach</span>(<span class="function">(<span class="params">fileName</span>) =&gt;</span> &#123;</span><br><span class="line">  modules[fileName.<span class="title function_">slice</span>(<span class="number">2</span>, -<span class="number">3</span>)] = requireModule(fileName).<span class="property">default</span>;</span><br><span class="line">  <span class="comment">// 如果存在且大于0</span></span><br><span class="line">  <span class="keyword">if</span> (requireModule(fileName).<span class="property">default</span>.<span class="property">localStorage</span>?.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    requireModule(fileName).<span class="property">default</span>.<span class="property">localStorage</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      modulePluginPaths.<span class="title function_">push</span>(<span class="string">`<span class="subst">$&#123;fileName.slice(<span class="number">2</span>, -<span class="number">3</span>)&#125;</span>.<span class="subst">$&#123;item&#125;</span>`</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  modules,</span><br><span class="line">  <span class="attr">strict</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">createPersistedState</span>(&#123;</span><br><span class="line">      <span class="attr">paths</span>: modulePluginPaths,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>vue3:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> createPersistedState <span class="keyword">from</span> <span class="string">&#x27;vuex-persistedstate&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> modules = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> modulePluginPaths = [];</span><br><span class="line"><span class="keyword">const</span> requireModule = <span class="built_in">require</span>.<span class="title function_">context</span>(<span class="string">&#x27;./modules&#x27;</span>, <span class="literal">false</span>, <span class="regexp">/.js$/</span>);</span><br><span class="line">requireModule.<span class="title function_">keys</span>().<span class="title function_">forEach</span>(<span class="function">(<span class="params">fileName</span>) =&gt;</span> &#123;</span><br><span class="line">  modules[fileName.<span class="title function_">slice</span>(<span class="number">2</span>, -<span class="number">3</span>)] = requireModule(fileName).<span class="property">default</span>;</span><br><span class="line">  <span class="comment">// 如果存在且大于0</span></span><br><span class="line">  <span class="keyword">if</span> (requireModule(fileName).<span class="property">default</span>.<span class="property">localStorage</span>?.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    requireModule(fileName).<span class="property">default</span>.<span class="property">localStorage</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      modulePluginPaths.<span class="title function_">push</span>(<span class="string">`<span class="subst">$&#123;fileName.slice(<span class="number">2</span>, -<span class="number">3</span>)&#125;</span>.<span class="subst">$&#123;item&#125;</span>`</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  modules,</span><br><span class="line">  <span class="attr">strict</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">createPersistedState</span>(&#123;</span><br><span class="line">      <span class="attr">paths</span>: modulePluginPaths,</span><br><span class="line">      <span class="comment">// storage: window.sessionStorage,</span></span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这样无论怎么刷新，你需要持久化的内容，都被存到了localstorage中，使用起来方便无感</p>
<p>以上内容，配合plop模板创建使用更加，请见</p>
<p><a href="http://blog.xingxiaowu.cn/2021/01/13/%E6%97%A0%E6%98%9F%E7%9A%84%E5%89%8D%E7%AB%AF%E4%B9%8B%E6%97%85%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94%E5%B7%A7%E7%94%A8plop%E7%94%9F%E6%88%90%E6%A8%A1%E6%9D%BF%E8%BF%9B%E8%A1%8C%E5%81%B7%E6%87%92/">无星的前端之旅（十四）——巧用plop生成模板进行偷懒</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的前端之旅（十九）-临时修改npm库</title>
    <url>/2021/03/29/%E6%97%A0%E6%98%9F%E7%9A%84%E5%89%8D%E7%AB%AF%E4%B9%8B%E6%97%85%EF%BC%88%E5%8D%81%E4%B9%9D%EF%BC%89-%E4%B8%B4%E6%97%B6%E4%BF%AE%E6%94%B9npm%E5%BA%93/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在开发过程中，偶尔会遇到一些问题，需要通过修改三方库才能解决。</p>
<p>一般遇到这种情况，我们会采取以下方式解决：</p>
<h3 id="1-fork一份并修改，package-json指向fork的地址。"><a href="#1-fork一份并修改，package-json指向fork的地址。" class="headerlink" title="1.fork一份并修改，package.json指向fork的地址。"></a>1.fork一份并修改，package.json指向fork的地址。</h3><h3 id="2-写一个shell脚本，在拉完包后执行脚本替换。"><a href="#2-写一个shell脚本，在拉完包后执行脚本替换。" class="headerlink" title="2.写一个shell脚本，在拉完包后执行脚本替换。"></a>2.写一个shell脚本，在拉完包后执行脚本替换。</h3><p>第一个方法太重了，并且在主库的更新合并上比较麻烦，需要手动去合并。</p>
<p>第二个方法需要写shell脚本，投入产出比不高，还经常忘记执行。</p>
<p>但自从发现了如下方法，临时修改npm包再也不是事了</p>
<h1 id="使用patch-package和postinstall-postinstall"><a href="#使用patch-package和postinstall-postinstall" class="headerlink" title="使用patch-package和postinstall-postinstall"></a>使用<code>patch-package</code>和<code>postinstall-postinstall</code></h1><h2 id="1-集成"><a href="#1-集成" class="headerlink" title="1.集成"></a>1.集成</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add patch-package postinstall-postinstall -D</span><br></pre></td></tr></table></figure>

<h2 id="2-下载包"><a href="#2-下载包" class="headerlink" title="2.下载包"></a>2.下载包</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn</span><br></pre></td></tr></table></figure>

<h2 id="3-修改文件"><a href="#3-修改文件" class="headerlink" title="3.修改文件"></a>3.修改文件</h2><p>找到node_modules中需要修改的文件，直接修改它</p>
<h2 id="4-创建布丁"><a href="#4-创建布丁" class="headerlink" title="4.创建布丁"></a>4.创建布丁</h2><p>修改完文件以后，执行如下命令，package-name是修改的包名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx patch-package package-name</span><br></pre></td></tr></table></figure>

<p>执行完毕以后，会在项目根目录下生成一个patches目录，目录中生成文件：package-name+version.patch</p>
<p>该文件描述了修改内容</p>
<h2 id="5-每次拉包自动执行替换"><a href="#5-每次拉包自动执行替换" class="headerlink" title="5.每次拉包自动执行替换"></a>5.每次拉包自动执行替换</h2><p><code>package.json</code>中<code>scripts</code>添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;postinstall&quot;: &quot;patch-package&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样每次<code>yarn</code>或者<code>npm install</code>完成以后，都会依照补丁文件自动修正npm包内容。</p>
<p>但是要注意，lock文件是需要加入版本管理的，因为布丁会指定具体版本</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的前端之旅（十二）——扩充elementUI的icon(复用i标签展示iconfont)</title>
    <url>/2020/11/26/%E6%97%A0%E6%98%9F%E7%9A%84%E5%89%8D%E7%AB%AF%E4%B9%8B%E6%97%85%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94iconfont%E5%A4%8D%E7%94%A8elementUI/</url>
    <content><![CDATA[<p>在 Vue 中引入 ElementUI 是非常常见的</p>
<p><a href="https://element.eleme.cn/#/zh-CN/component/icon">elementUI-icon 图标</a></p>
<p>ElementUI 默认提供了一个 icon 图标集合,可以使用 i 标签展示</p>
<p>直接 class 名写图标名就能展示,这可太方便了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;i class=&quot;图标名&quot;/&gt;</span><br></pre></td></tr></table></figure>

<p>但是图标肯定是不够用的,总会要引入一些自己的图标,比如使用阿里的<a href="https://www.iconfont.cn/">iconfont</a></p>
<h1 id="iconfont-引入"><a href="#iconfont-引入" class="headerlink" title="iconfont 引入"></a>iconfont 引入</h1><p>在阿里<a href="https://www.iconfont.cn/help/detail?spm=a313x.7781068.0.0&helptype=code">帮助页面</a>我们可以看到好几种引入方式</p>
<p>其中 font-class 方式引入</p>
<p><img src="/images/%E5%89%8D%E7%AB%AF12/2.png" alt="fontclass引入.png"></p>
<p>可以看到,需要先写个 fontclass</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.iconfont&#123;</span><br><span class="line">    font-family:&quot;iconfont&quot; !important;</span><br><span class="line">    font-size:16px;font-style:normal;</span><br><span class="line">    -webkit-font-smoothing: antialiased;</span><br><span class="line">    -webkit-text-stroke-width: 0.2px;</span><br><span class="line">    -moz-osx-font-smoothing: grayscale;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后每次引用都需要写 fontclass icon 名称</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;i class=&quot;iconfont icon-xxx&quot;/&gt;</span><br></pre></td></tr></table></figure>

<p>虽然不是什么繁琐的事,但写多了还是很烦的…</p>
<p>那怎么才能做到和 element-icon 一样,只需要写 icon 名呢</p>
<h1 id="element-的-icon-是怎么做到只要一个-icon-的-class-名的"><a href="#element-的-icon-是怎么做到只要一个-icon-的-class-名的" class="headerlink" title="element 的 icon 是怎么做到只要一个 icon 的 class 名的"></a>element 的 icon 是怎么做到只要一个 icon 的 class 名的</h1><p><img src="/images/%E5%89%8D%E7%AB%AF12/1.png" alt="i标签.png"></p>
<p>图中揭晓了秘密,css 选择器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[class*=&quot;el-icon-&quot;], [class^=&quot;el-icon-&quot;]&#123;</span><br><span class="line">  xxxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过 css 选择器,使得只要 el-icon-开头/包含 el-icon-的 class 名,都会作用这块 css</p>
<h1 id="如法炮制"><a href="#如法炮制" class="headerlink" title="如法炮制"></a>如法炮制</h1><h2 id="1-iconfont-平台支持项目前缀"><a href="#1-iconfont-平台支持项目前缀" class="headerlink" title="1.iconfont 平台支持项目前缀"></a>1.iconfont 平台支持项目前缀</h2><p><img src="/images/%E5%89%8D%E7%AB%AF12/3.png" alt="i标签.png"></p>
<p><img src="/images/%E5%89%8D%E7%AB%AF12/4.png" alt="i标签.png"></p>
<p>可以看到,项目-更多操作-编辑-前缀</p>
<p>这里支持写前缀,例如 wx-icon-</p>
<h2 id="2-修改引入的-css"><a href="#2-修改引入的-css" class="headerlink" title="2.修改引入的 css"></a>2.修改引入的 css</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[class*=&quot;wx-icon-&quot;], [class^=&quot;wx-icon-&quot;]&#123;</span><br><span class="line">    font-family:&quot;iconfont&quot; !important;</span><br><span class="line">    font-size:16px;font-style:normal;</span><br><span class="line">    -webkit-font-smoothing: antialiased;</span><br><span class="line">    -webkit-text-stroke-width: 0.2px;</span><br><span class="line">    -moz-osx-font-smoothing: grayscale;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-main-js-引入"><a href="#3-main-js-引入" class="headerlink" title="3.main.js 引入"></a>3.main.js 引入</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#x27;@/styles/iconfont.css&#x27;;</span><br></pre></td></tr></table></figure>

<p>当然</p>
<p>你要是有 less 或者 scss 之类预编译框架也可以去 vue.config.js 里面配全局引入</p>
<p>反正引入就行了</p>
<h2 id="4-使用"><a href="#4-使用" class="headerlink" title="4.使用"></a>4.使用</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;i class=&quot;wx-icon-xxx&quot; /&gt;</span><br></pre></td></tr></table></figure>

<p>这下舒服了</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的前端之旅（十五）——babel初探</title>
    <url>/2021/02/04/%E6%97%A0%E6%98%9F%E7%9A%84%E5%89%8D%E7%AB%AF%E4%B9%8B%E6%97%85%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89%E2%80%94%E2%80%94babel%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>其实很早我就知道，babel会帮助我们做一件事，就是把高版本的ES语法，转换为低版本的ES语法，以确保在低版本浏览器上能正确运行。</p>
<p>但是一直我都不知道怎么去操纵它，只知道需要一堆配置，配合webpack可以做这件事（甚至我一度认为必须使用webpack才能做这件事）。</p>
<h1 id="集成-基本就是抄文档"><a href="#集成-基本就是抄文档" class="headerlink" title="集成(基本就是抄文档)"></a>集成(基本就是抄文档)</h1><p>其实如果用百度搜索，集成的东西有各种es版本的依赖，配置文件有js，rc，json文件，乱七八糟什么都有。</p>
<p>其实这是历史原因。但现在已经2021年了，咱们就直接按<a href="https://www.babeljs.cn/">官网</a>说的来。</p>
<h2 id="1-下载依赖包"><a href="#1-下载依赖包" class="headerlink" title="1.下载依赖包"></a>1.下载依赖包</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save-dev @babel/core @babel/cli @babel/preset-env</span><br><span class="line">npm install --save @babel/polyfill</span><br></pre></td></tr></table></figure>
<p>当然，我个人认为，如果不需要兼容IE的话，应该不需要下载polyfill了</p>
<h2 id="2-添加依赖文件"><a href="#2-添加依赖文件" class="headerlink" title="2.添加依赖文件"></a>2.添加依赖文件</h2><p>在项目的根目录下创建一个命名为 babel.config.json 的配置文件（需要 v7.8.0 或更高版本），并将以下内容复制到此文件中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;@babel/env&quot;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;targets&quot;: &#123;</span><br><span class="line">          &quot;edge&quot;: &quot;17&quot;,</span><br><span class="line">          &quot;firefox&quot;: &quot;60&quot;,</span><br><span class="line">          &quot;chrome&quot;: &quot;67&quot;,</span><br><span class="line">          &quot;safari&quot;: &quot;11.1&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;useBuiltIns&quot;: &quot;usage&quot;,</span><br><span class="line">        &quot;corejs&quot;: &quot;3.6.5&quot;,</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>上述浏览器列表仅用于示例。根据你所需要支持的浏览器进行调整。</li>
</ul>
<p>如果@babel/core的版本低于7.8.0，就应该使用babel.config.js了，配置看官网</p>
<h2 id="3-可以直接进行编译了"><a href="#3-可以直接进行编译了" class="headerlink" title="3.可以直接进行编译了"></a>3.可以直接进行编译了</h2><p>比如，将src下的文件全部进行转换到lib文件夹</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx babel src --out-dir lib</span><br></pre></td></tr></table></figure>

<p>换句话说，如果你是对一些库做一些简单的二次封装给内部用，可能只需要babel就能满足你的需求了，并不需要配置webpack。</p>
<h1 id="不想集成，就一两个文件，只想快点拿到转换后的代码临时解决问题"><a href="#不想集成，就一两个文件，只想快点拿到转换后的代码临时解决问题" class="headerlink" title="不想集成，就一两个文件，只想快点拿到转换后的代码临时解决问题"></a>不想集成，就一两个文件，只想快点拿到转换后的代码临时解决问题</h1><p><a href="https://www.babeljs.cn/repl">babel的在线工具</a>值得一用</p>
<h1 id="配合webpack"><a href="#配合webpack" class="headerlink" title="配合webpack"></a>配合webpack</h1><p>当然配合webpack也能用</p>
<p>除了上面添加的这些</p>
<p><a href="https://webpack.docschina.org/loaders/babel-loader/">babel-loader</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i babel-loader -D</span><br></pre></td></tr></table></figure>

<p>webpack.config.js中添加对应解析规则</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: /\.m?js$/,</span><br><span class="line">      exclude: /(node_modules|bower_components)/,</span><br><span class="line">      use: &#123;</span><br><span class="line">        loader: &#x27;babel-loader&#x27;,</span><br><span class="line">        options: &#123;</span><br><span class="line">          presets: [&#x27;@babel/preset-env&#x27;]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当然如果需要更多的优化性配置，可以查看<a href="https://webpack.docschina.org/loaders/babel-loader/">babel-loader的文档</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的前端之旅（十八）-Vue3+ts常见问题</title>
    <url>/2021/02/14/%E6%97%A0%E6%98%9F%E7%9A%84%E5%89%8D%E7%AB%AF%E4%B9%8B%E6%97%85%EF%BC%88%E5%8D%81%E5%85%AB%EF%BC%89-Vue3+ts%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>第一次用Vue3+ts，采用了eslint（aribnb），遇到了一些问题，又不想用经常性使用any，只能逼迫自己解决问题。</p>
<p>本文只是记录一些自己遇到的检测问题</p>
<h1 id="1-使用less并导出变量到ts使用，但是ts报错找不到"><a href="#1-使用less并导出变量到ts使用，但是ts报错找不到" class="headerlink" title="1.使用less并导出变量到ts使用，但是ts报错找不到"></a>1.使用less并导出变量到ts使用，但是ts报错找不到</h1><p>报错内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Cannot</span> find <span class="variable language_">module</span> <span class="string">&#x27;xxx.less&#x27;</span> or its corresponding type declarations.</span><br></pre></td></tr></table></figure>
<p>解决方法：</p>
<p><a href="https://juejin.cn/post/6844903560056930311">CSS in Typescript</a></p>
<h1 id="2-setup中获取proxy，但提示可能为null"><a href="#2-setup中获取proxy，但提示可能为null" class="headerlink" title="2.setup中获取proxy，但提示可能为null"></a>2.setup中获取proxy，但提示可能为null</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; proxy &#125; = <span class="title function_">getCurrentInstance</span>();</span><br></pre></td></tr></table></figure>
<p>提示报错内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Property</span> <span class="string">&#x27;proxy&#x27;</span> does not exist on type <span class="string">&#x27;ComponentInternalInstance | null&#x27;</span>.</span><br></pre></td></tr></table></figure>
<p>解决方法：</p>
<p>1.直接强制确认，因为毫无疑问，在页面或组件中，CurrentInstance一定存在，因此可以使用!强制标记存在</p>
<p>但在aribnb的eslint规则下，仍然会报警告</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; proxy &#125; = <span class="title function_">getCurrentInstance</span>()!;</span><br></pre></td></tr></table></figure>
<p>2.使用as强转</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ComponentInternalInstance</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> &#123; proxy &#125; = <span class="title function_">getCurrentInstance</span>() <span class="keyword">as</span> <span class="title class_">ComponentInternalInstance</span>;</span><br></pre></td></tr></table></figure>

<h1 id="3-如何使用ref获取dom节点"><a href="#3-如何使用ref获取dom节点" class="headerlink" title="3.如何使用ref获取dom节点"></a>3.如何使用ref获取dom节点</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:ref</span>=<span class="string">&quot;setDivRef&quot;</span> /&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; defineComponent, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> divRef = ref&lt;<span class="title class_">HTMLElement</span>&gt;();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> <span class="title function_">setDivRef</span> = (<span class="params">el: HTMLElement</span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      divRef.<span class="property">value</span> = el;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      setDivRef,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br></pre></td></tr></table></figure>

<h1 id="4-如果使用Element-Plus的form组件，使用resetFields或者validate方法时，提示没有该属性"><a href="#4-如果使用Element-Plus的form组件，使用resetFields或者validate方法时，提示没有该属性" class="headerlink" title="4.如果使用Element-Plus的form组件，使用resetFields或者validate方法时，提示没有该属性"></a>4.如果使用Element-Plus的form组件，使用resetFields或者validate方法时，提示没有该属性</h1><p>报错内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Property</span> <span class="string">&#x27;resetFields&#x27;</span> does not exist on type <span class="string">&#x27;HTMLElement&#x27;</span></span><br><span class="line"><span class="title class_">Property</span> <span class="string">&#x27;validate&#x27;</span> does not exist on type <span class="string">&#x27;HTMLElement&#x27;</span></span><br></pre></td></tr></table></figure>
<p>解决方法:</p>
<p>使用<code>InstanceType&lt;typeof ElForm&gt;</code>作为范型约束</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 表单 --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">&quot;form&quot;</span> <span class="attr">:ref</span>=<span class="string">&quot;setFormRef&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;100px&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 注释 --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ElForm &#125; from &#x27;element-plus&#x27;;</span><br><span class="line">import &#123; defineComponent, ref &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">export default defineComponent(&#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const formRef = ref&lt;InstanceType&lt;typeof ElForm&gt;&gt;();</span><br><span class="line">    const setFormRef = (el: InstanceType&lt;typeof ElForm&gt;) =&gt; &#123;</span><br><span class="line">      formRef.value = el;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    const resetForm = () =&gt; &#123;</span><br><span class="line">      formRef.value?.resetFields();</span><br><span class="line">    &#125;;</span><br><span class="line">    const confirm = () =&gt; &#123;</span><br><span class="line">      formRef.value?.validate((valid) =&gt; &#123;</span><br><span class="line">        if (valid) &#123;</span><br><span class="line">          // do</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    return &#123;</span><br><span class="line">      setFormRef,</span><br><span class="line">      resetForm,</span><br><span class="line">      confirm,</span><br><span class="line">      formRef,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>参考：</p>
<p><a href="http://alsritter.icu/posts/a51bba78/">Treffen人事管理项目记录</a></p>
<p><a href="https://qiita.com/jay-es/items/6d0279737fb510b0aa6c">Vue.js の Composition API における this.$refs の取得方法</a></p>
<h1 id="6-props中已经加上约束，但是在setup中使用还是在报错"><a href="#6-props中已经加上约束，但是在setup中使用还是在报错" class="headerlink" title="6.props中已经加上约束，但是在setup中使用还是在报错"></a>6.props中已经加上约束，但是在setup中使用还是在报错</h1><p>报错内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Property</span> <span class="string">&#x27;xxx&#x27;</span> does not exist on type <span class="string">&#x27;Readonly&lt;&#123; [x: number]: string; &#125; &amp; &#123; length?: number | undefined; toString?: string | undefined; toLocaleString?: string | undefined; concat?: string[] | undefined; join?: string | undefined; slice?: string[] | undefined; ... 16 more ...; flat?: unknown[] | undefined; &#125;&gt; | Readonly&lt;...&gt;&#x27;</span>.</span><br><span class="line">  <span class="title class_">Property</span> <span class="string">&#x27;xxx&#x27;</span> does not exist on type <span class="string">&#x27;Readonly&lt;&#123; [x: number]: string; &#125; &amp; &#123; length?: number | undefined; toString?: string | undefined; toLocaleString?: string | undefined; concat?: string[] | undefined; join?: string | undefined; slice?: string[] | undefined; ... 16 more ...; flat?: unknown[] | undefined; &#125;&gt;&#x27;</span>.</span><br></pre></td></tr></table></figure>
<p>解决方法：</p>
<p>额外添加一个interface，名字任意，并将setup的props参数类型标记为定义类型</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  computed,</span><br><span class="line">  defineComponent,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">Props1</span> &#123;</span><br><span class="line">  <span class="attr">modelValue</span>: boolean;</span><br><span class="line">  <span class="attr">loading</span>: boolean;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">modelValue</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">loading</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props: Props1, context</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> visible = <span class="title function_">computed</span>(&#123;</span><br><span class="line">      <span class="attr">get</span>: <span class="function">() =&gt;</span> props.<span class="property">modelValue</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> loadingnow = <span class="title function_">computed</span>(&#123;</span><br><span class="line">      <span class="attr">get</span>: <span class="function">() =&gt;</span> props.<span class="property">loading</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      visible,</span><br><span class="line">      loadingnow,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="7-如何给template加上ts类型推断"><a href="#7-如何给template加上ts类型推断" class="headerlink" title="7.如何给template加上ts类型推断"></a>7.如何给template加上ts类型推断</h1><p>解决方法：</p>
<p>使用vscode，并添加vetur插件&gt;0.29.0版本，在配置中添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vetur.experimental.templateInterpolationService: true</span><br></pre></td></tr></table></figure>

<p>参考：<br><a href="https://www.zhihu.com/question/381589636/answer/1585177300">木子李的回答</a></p>
<h1 id="8-在‘no-unused-expressions’的eslint规则下，经常将-这个判断是否存在的语法糖标记为eslint错误"><a href="#8-在‘no-unused-expressions’的eslint规则下，经常将-这个判断是否存在的语法糖标记为eslint错误" class="headerlink" title="8.在‘no-unused-expressions’的eslint规则下，经常将?.这个判断是否存在的语法糖标记为eslint错误"></a>8.在‘no-unused-expressions’的eslint规则下，经常将?.这个判断是否存在的语法糖标记为eslint错误</h1><p>（实际上?这个语法糖，除了ts，js在ES2020中也支持了，所以我觉得这个判读机制该升级了）</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const foo = bar &amp;&amp; bar.tea &amp;&amp; bar.tea.cup;</span><br><span class="line">//简写为</span><br><span class="line">const foo = bar?.tea?.cup;</span><br></pre></td></tr></table></figure>
<p>报错内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Expected an assignment or function call and instead saw an expression. eslint(no-unused-expressions)</span><br></pre></td></tr></table></figure>
<p>解决方法：</p>
<p>如果是使用vue-cli创建的项目，默认会引入‘@typescript-eslint’</p>
<p>在eslint配置规则中，关闭’no-unused-expressions’，开启‘@typescript-eslint/no-unused-expressions’</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;no-unused-expressions&#x27;: &#x27;off&#x27;,</span><br><span class="line">&#x27;@typescript-eslint/no-unused-expressions&#x27;: &#x27;error&#x27;,</span><br></pre></td></tr></table></figure>
<p>参考：</p>
<p><a href="https://www.karltarvas.com/2020/04/07/typescript-no-unused-expressions.html">Typescript optional chaining and ESLint <code>no-unused-expressions</code></a></p>
<h1 id="9-添加全局挂载属性，比如axios"><a href="#9-添加全局挂载属性，比如axios" class="headerlink" title="9.添加全局挂载属性，比如axios"></a>9.添加全局挂载属性，比如axios</h1><p>挂载代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.ts</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$api</span> = axios;</span><br></pre></td></tr></table></figure>
<p>使用代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setup()&#123;</span><br><span class="line">const &#123; proxy &#125; = getCurrentInstance() as ComponentInternalInstance;</span><br><span class="line">proxy.$api.xxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>会发现根本没有任何提示，并且会报错</p>
<p>解决方法：</p>
<p>新建一个xxx.d.ts声明文件，并在tsconfig中引入（可以使用include，也可以使用typeRoots等，主要看自己项目配置和路径）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AxiosInstance</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line">declare <span class="variable language_">module</span> <span class="string">&#x27;@vue/runtime-core&#x27;</span> &#123;</span><br><span class="line">  interface <span class="title class_">ComponentCustomProperties</span> &#123;</span><br><span class="line">    <span class="attr">$api</span>: <span class="title class_">AxiosInstance</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>参考：<br><a href="https://github.com/vuejs/vue-next/blob/1abcb2cf61ec16807cae11cfe56acefab19487a1/packages/runtime-core/src/componentPublicInstance.ts#L41-L66">componentPublicInstance.ts#L41-L66</a></p>
<h3 id="p-s-因为我对axios做了二次封装，我所有的api都写在一个文件里，类似："><a href="#p-s-因为我对axios做了二次封装，我所有的api都写在一个文件里，类似：" class="headerlink" title="p.s:因为我对axios做了二次封装，我所有的api都写在一个文件里，类似："></a>p.s:因为我对axios做了二次封装，我所有的api都写在一个文件里，类似：</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// api.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">	<span class="attr">login</span>:<span class="function">()=&gt;</span> axios.<span class="title function_">get</span>(xxx,xxx),</span><br><span class="line">	xxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种，有n个接口，并且随着项目变动，我目前是手动写了一个d.ts，描述了一个interface，类似</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// api.d.ts</span></span><br><span class="line"><span class="keyword">export</span> interface <span class="title class_">Api</span>&#123;</span><br><span class="line">	<span class="attr">login</span>:<span class="function">()=&gt;</span>&#123;&#125;</span><br><span class="line">    xxx</span><br><span class="line">    xxx</span><br><span class="line">    xxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样，但是每新增一个接口，或者变动，我就要手动添加声明。请问有没有什么办法能把我解放出来TAT。</p>
<p>因为依赖了比较多的东西，我使用tsc命令单独为这个文件生成d.ts的时候会报错，无法生成。</p>
<p>求个答案，大佬们都是怎么做的。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的前端之旅（十六）——移动端调试技巧</title>
    <url>/2021/02/04/%E6%97%A0%E6%98%9F%E7%9A%84%E5%89%8D%E7%AB%AF%E4%B9%8B%E6%97%85%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89%E2%80%94%E2%80%94%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>常见的需求，开发移动端h5，在移动端浏览器或者移动端app上渲染。</p>
<p>前端不知道怎么在移动端调试，移动端不知道怎么调试网页。</p>
<p>经常出了问题不知道是找移动端解决还是找前端解决。</p>
<p>好了，我们举个例子：</p>
<p>公司小改改写了个页面，要在app的webview里加载，本地调试杠杠的，自己手机杠杠的，但是一上特意准备的测试机，就白屏了。</p>
<p>我号称是公司移动端里最会写前端的，前端里最会写移动端的。只能露一手了[LetMeSee]</p>
<p>如果你是前端，可以找个客户端，按此方法操作打开调试控制台，由你来调试网页上的问题</p>
<p>如果你是个移动端，你就可以按照这个方法，为前端同学准备好调试环境，剩下的网页调试工作交给他们</p>
<h1 id="如何查找问题"><a href="#如何查找问题" class="headerlink" title="如何查找问题"></a>如何查找问题</h1><p>其实有两种方式可以去做。</p>
<h2 id="一-VConsole"><a href="#一-VConsole" class="headerlink" title="一.VConsole"></a>一.VConsole</h2><p><a href="https://github.com/Tencent/vConsole/blob/dev/README_CN.md">VConsole</a>:如其描述，是一个轻量、可拓展、针对手机网页的前端开发者调试面板。</p>
<p>感谢腾讯，开源了这么好的一个工具。</p>
<p>但我总觉得，看日志不如打断点来的舒服。</p>
<h2 id="二-远程调试"><a href="#二-远程调试" class="headerlink" title="二.远程调试"></a>二.远程调试</h2><p>移动端分为iOS和Android，所以我会分别演示，如何在两端上进行远程调试。</p>
<h3 id="iOS篇"><a href="#iOS篇" class="headerlink" title="iOS篇"></a>iOS篇</h3><h4 id="1-准备："><a href="#1-准备：" class="headerlink" title="1.准备："></a>1.准备：</h4><p>mac，iPhone或iPad。</p>
<h4 id="2-使用移动设备加载网页"><a href="#2-使用移动设备加载网页" class="headerlink" title="2.使用移动设备加载网页"></a>2.使用移动设备加载网页</h4><p>比如我这举个例子，我使用app的webview加载页面</p>
<p><img src="/images/%E5%89%8D%E7%AB%AF16/3.png" alt="3.png"></p>
<h4 id="3-开启safari的开发模式"><a href="#3-开启safari的开发模式" class="headerlink" title="3.开启safari的开发模式"></a>3.开启safari的开发模式</h4><p>Safari-偏好设置-高级-在菜单栏显示开发</p>
<p><img src="/images/%E5%89%8D%E7%AB%AF16/1.png" alt="1.png"></p>
<p><img src="/images/%E5%89%8D%E7%AB%AF16/2.png" alt="2.png"></p>
<h4 id="4-打开开发菜单，点击对应网页地址"><a href="#4-打开开发菜单，点击对应网页地址" class="headerlink" title="4.打开开发菜单，点击对应网页地址"></a>4.打开开发菜单，点击对应网页地址</h4><p><img src="/images/%E5%89%8D%E7%AB%AF16/4.png" alt="4.png"></p>
<p>就可以看出，safari的控制台就跳出来了</p>
<p><img src="/images/%E5%89%8D%E7%AB%AF16/5.png" alt="5.png"></p>
<p>无论是想打断点还是打印，就都可以用了</p>
<p><img src="/images/%E5%89%8D%E7%AB%AF16/6.gif" alt="6.png"></p>
<h3 id="Android篇-真机"><a href="#Android篇-真机" class="headerlink" title="Android篇-真机"></a>Android篇-真机</h3><h4 id="1-准备：-1"><a href="#1-准备：-1" class="headerlink" title="1.准备："></a>1.准备：</h4><p>梯子，Chrome内核的浏览器（其实是指就是Chrome或者新版Edge），一部安卓设备，一根usb线</p>
<h4 id="2-打开梯子，并且添加google所有域名fq（看不懂的就开全局fq）"><a href="#2-打开梯子，并且添加google所有域名fq（看不懂的就开全局fq）" class="headerlink" title="2.打开梯子，并且添加google所有域名fq（看不懂的就开全局fq）"></a>2.打开梯子，并且添加google所有域名fq（看不懂的就开全局fq）</h4><h4 id="3-用usb线链接电脑和手机，并打开开发者模式"><a href="#3-用usb线链接电脑和手机，并打开开发者模式" class="headerlink" title="3.用usb线链接电脑和手机，并打开开发者模式"></a>3.用usb线链接电脑和手机，并打开开发者模式</h4><p>怎么打开开发者模式，自己百度，检测手机是否链接上了电脑可以使用adb命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure>
<p>输出列表里有设备就算连上了</p>
<p><img src="/images/%E5%89%8D%E7%AB%AF16/7.png" alt="7.png"></p>
<h4 id="4-用安卓chrome浏览器访问地址"><a href="#4-用安卓chrome浏览器访问地址" class="headerlink" title="4.用安卓chrome浏览器访问地址"></a>4.用安卓chrome浏览器访问地址</h4><p>上面使用了app的webview，这里我们就演示一下浏览器</p>
<p>安卓设备使用chrome浏览器访问地址</p>
<p>（目前使用其他浏览器暂时无法进行远程调试，但如果是app的webview是一定可以的）</p>
<h4 id="5-打开chrome网页"><a href="#5-打开chrome网页" class="headerlink" title="5.打开chrome网页"></a>5.打开chrome网页</h4><p>随便打开一个网页，F12，打开调试控制台</p>
<p>在从更多工具中，找到remote devices</p>
<p><img src="/images/%E5%89%8D%E7%AB%AF16/8.png" alt="8.png"></p>
<p>下方会弹出一个远程设备的窗口，点击其中的网页</p>
<p><img src="/images/%E5%89%8D%E7%AB%AF16/9.png" alt="9.png"></p>
<p>左侧会弹出已连接的设备和设备Chrome浏览器访问的网页</p>
<p><img src="/images/%E5%89%8D%E7%AB%AF16/10.png" alt="10.png"></p>
<p>点击inspect，会弹出一个手机端的控制台调试工具（此过程会根据不同的设备webkit内核版本下载不同依赖，因此需要梯子fq）</p>
<p><img src="/images/%E5%89%8D%E7%AB%AF16/11.png" alt="11.png"></p>
<p>接下来无论是想打断点还是打印，就都可以用了。</p>
<h3 id="Android-模拟器"><a href="#Android-模拟器" class="headerlink" title="Android-模拟器"></a>Android-模拟器</h3><h4 id="1-准备"><a href="#1-准备" class="headerlink" title="1.准备"></a>1.准备</h4><p>同上1，2，3步</p>
<h4 id="2-使用安卓模拟器中App的Webview访问地址"><a href="#2-使用安卓模拟器中App的Webview访问地址" class="headerlink" title="2.使用安卓模拟器中App的Webview访问地址"></a>2.使用安卓模拟器中App的Webview访问地址</h4><p>这里我们用app的webview来演示一下</p>
<p><img src="/images/%E5%89%8D%E7%AB%AF16/12.png" alt="12.png"></p>
<h4 id="3-chrome调试"><a href="#3-chrome调试" class="headerlink" title="3.chrome调试"></a>3.chrome调试</h4><p>这时你会发现，因为是模拟器，所以调试工具中，根本没有<code>remote devices</code></p>
<p>因此，我们直接访问这个网址</p>
<p><code>chrome://inspect/#devices</code></p>
<p><img src="/images/%E5%89%8D%E7%AB%AF16/13.png" alt="13.png"></p>
<p><img src="/images/%E5%89%8D%E7%AB%AF16/14.png" alt="14.png"></p>
<h1 id="这里额外推荐一下"><a href="#这里额外推荐一下" class="headerlink" title="这里额外推荐一下"></a>这里额外推荐一下</h1><p>安卓调试，没有梯子，可以使用edge，也是chromium相同的内核，访问地址<code>edge://inspect/#devices</code>也是可以调试的</p>
<h1 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h1><p>我司小改改遇到的问题是我们某个库打包没转ES5，在低版本的浏览器上报错了引起的，经过Babel转换后已经正常运行了<br><a href="http://blog.xingxiaowu.cn/2021/02/04/%E6%97%A0%E6%98%9F%E7%9A%84%E5%89%8D%E7%AB%AF%E4%B9%8B%E6%97%85%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89%E2%80%94%E2%80%94babel%E5%88%9D%E6%8E%A2/">无星的前端之旅（十五）——babel初探</a></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://developers.google.cn/web/tools/chrome-devtools/">Chrome DevTools</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的前端之旅（十四）——巧用plop生成模板进行偷懒</title>
    <url>/2021/01/13/%E6%97%A0%E6%98%9F%E7%9A%84%E5%89%8D%E7%AB%AF%E4%B9%8B%E6%97%85%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94%E5%B7%A7%E7%94%A8plop%E7%94%9F%E6%88%90%E6%A8%A1%E6%9D%BF%E8%BF%9B%E8%A1%8C%E5%81%B7%E6%87%92/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在开发过程中，总会有一些模板代码需要编写，比如我是写vue的，vue2中的各种namespace，vue3中的各种引入。几乎是每个vue文件都需要的。</p>
<p>每次写都累的一批，也毫无技术含量。纯体力活，但还不得不做。</p>
<p>这时候大伙可能会用各自习惯的编辑器去编写各式各样的代码块来减轻工作量。</p>
<p>但是团队中编辑器并非统一的，众所周知，前端不仅语言众多，开发工具也多的一批，也没有什么好的跨编辑器跨机子的代码块存储方式（大厂统一云编辑器的往后稍稍，不包含你们）</p>
<p>这个时候就发现了plop（在跟着<a href="https://juejin.cn/user/518625216445533">花裤衩</a>手摸手学习<a href="https://github.com/PanJiaChen/vue-element-admin">vue-element-admin</a>的时候学到的）。</p>
<h1 id="Plop解决了什么问题？"><a href="#Plop解决了什么问题？" class="headerlink" title="Plop解决了什么问题？"></a>Plop解决了什么问题？</h1><p>解决了上述的同一个项目跨编辑器跨机器编写前端代码块的问题。</p>
<h1 id="如何集成"><a href="#如何集成" class="headerlink" title="如何集成"></a>如何集成</h1><h2 id="一、集成plop到项目中"><a href="#一、集成plop到项目中" class="headerlink" title="一、集成plop到项目中"></a>一、集成plop到项目中</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i plop -D</span><br></pre></td></tr></table></figure>

<h2 id="二、根目录下新建一个文件夹放置模板和脚本命令（这里只举个例子）"><a href="#二、根目录下新建一个文件夹放置模板和脚本命令（这里只举个例子）" class="headerlink" title="二、根目录下新建一个文件夹放置模板和脚本命令（这里只举个例子）"></a>二、根目录下新建一个文件夹放置模板和脚本命令（这里只举个例子）</h2><figure class="highlight hbs"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="comment">&lt;!-- plop-templates/views/index.hbs --&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;&#123;#<span class="name"><span class="built_in">if</span></span> template&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123;<span class="name">lowerCase</span> name&#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">-main&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-variable">&#123;&#123; <span class="name">properCase</span> name &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;&#123;/<span class="name"><span class="built_in">if</span></span>&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;&#123;#<span class="name"><span class="built_in">if</span></span> script&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;</span></span></span><span class="template-variable">&#123;&#123; <span class="name">properCase</span> name &#125;&#125;</span><span class="language-xml">&#x27;,</span></span><br><span class="line"><span class="language-xml">  components: &#123;</span></span><br><span class="line"><span class="language-xml">  &#125;,</span></span><br><span class="line"><span class="language-xml">  props: &#123;</span></span><br><span class="line"><span class="language-xml">  &#125;,</span></span><br><span class="line"><span class="language-xml">  data: () =&gt; (&#123;</span></span><br><span class="line"><span class="language-xml">  &#125;),</span></span><br><span class="line"><span class="language-xml">  computed: &#123;&#125;,</span></span><br><span class="line"><span class="language-xml">  watch: &#123;&#125;,</span></span><br><span class="line"><span class="language-xml">  created() &#123;&#125;,</span></span><br><span class="line"><span class="language-xml">  mounted() &#123;&#125;,</span></span><br><span class="line"><span class="language-xml">  beforeCreate() &#123;&#125;, // 生命周期 - 创建之前</span></span><br><span class="line"><span class="language-xml">  beforeMount() &#123;&#125;, // 生命周期 - 挂载之前</span></span><br><span class="line"><span class="language-xml">  beforeUpdate() &#123;&#125;, // 生命周期 - 更新之前</span></span><br><span class="line"><span class="language-xml">  updated() &#123;&#125;, // 生命周期 - 更新之后</span></span><br><span class="line"><span class="language-xml">  beforeDestroy() &#123;&#125;, // 生命周期 - 销毁之前</span></span><br><span class="line"><span class="language-xml">  destroyed() &#123;&#125;, // 生命周期 - 销毁完成</span></span><br><span class="line"><span class="language-xml">  activated() &#123;&#125;,</span></span><br><span class="line"><span class="language-xml">  methods: &#123;&#125;,</span></span><br><span class="line"><span class="language-xml">&#125;;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;&#123;/<span class="name"><span class="built_in">if</span></span>&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;&#123;#<span class="name"><span class="built_in">if</span></span> style&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">.</span><span class="template-variable">&#123;&#123;<span class="name">lowerCase</span> name&#125;&#125;</span><span class="language-xml"><span class="language-css">-<span class="selector-tag">main</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;&#123;/<span class="name"><span class="built_in">if</span></span>&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// plop-templates/views/prompt.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; notEmpty &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../utils.js&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">description</span>: <span class="string">&#x27;新建一个页面&#x27;</span>,</span><br><span class="line">  <span class="attr">prompts</span>: [&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;input&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;name&#x27;</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;页面名称&#x27;</span>,</span><br><span class="line">    <span class="attr">validate</span>: <span class="title function_">notEmpty</span>(<span class="string">&#x27;name&#x27;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;checkbox&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;blocks&#x27;</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;需要包含什么:&#x27;</span>,</span><br><span class="line">    <span class="attr">choices</span>: [&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;&lt;template&gt;&#x27;</span>,</span><br><span class="line">      <span class="attr">value</span>: <span class="string">&#x27;template&#x27;</span>,</span><br><span class="line">      <span class="attr">checked</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;&lt;script&gt;&#x27;</span>,</span><br><span class="line">      <span class="attr">value</span>: <span class="string">&#x27;script&#x27;</span>,</span><br><span class="line">      <span class="attr">checked</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;style&#x27;</span>,</span><br><span class="line">      <span class="attr">value</span>: <span class="string">&#x27;style&#x27;</span>,</span><br><span class="line">      <span class="attr">checked</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="title function_">validate</span>(<span class="params">value</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (value.<span class="title function_">indexOf</span>(<span class="string">&#x27;script&#x27;</span>) === -<span class="number">1</span> &amp;&amp; value.<span class="title function_">indexOf</span>(<span class="string">&#x27;template&#x27;</span>) === -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27; &lt;template&gt; 和 &lt;script&gt; 是必须的.&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">actions</span>: <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> name = <span class="string">&#x27;&#123;&#123;properCase name&#125;&#125;&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> actions = [&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;add&#x27;</span>,</span><br><span class="line">      <span class="attr">path</span>: <span class="string">`src/views/<span class="subst">$&#123;name&#125;</span>/index.vue`</span>,</span><br><span class="line">      <span class="attr">templateFile</span>: <span class="string">&#x27;plop-templates/view/index.hbs&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: &#123;</span><br><span class="line">        name,</span><br><span class="line">        <span class="attr">template</span>: data.<span class="property">blocks</span>.<span class="title function_">includes</span>(<span class="string">&#x27;template&#x27;</span>),</span><br><span class="line">        <span class="attr">script</span>: data.<span class="property">blocks</span>.<span class="title function_">includes</span>(<span class="string">&#x27;script&#x27;</span>),</span><br><span class="line">        <span class="attr">style</span>: data.<span class="property">blocks</span>.<span class="title function_">includes</span>(<span class="string">&#x27;style&#x27;</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;];</span><br><span class="line">    <span class="keyword">return</span> actions;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>目录结构如图</p>
<p><img src="/images/%E5%89%8D%E7%AB%AF14/1.png" alt="1.png"></p>
<h2 id="三、根目录创建plop-js"><a href="#三、根目录创建plop-js" class="headerlink" title="三、根目录创建plop.js"></a>三、根目录创建plop.js</h2><p>这个是plop会读取的配置文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// plopfile.js</span></span><br><span class="line"><span class="keyword">const</span> viewGenerator = <span class="built_in">require</span>(<span class="string">&#x27;./plop-templates/view/prompt&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> componentGenerator = <span class="built_in">require</span>(<span class="string">&#x27;./plop-templates/component/prompt&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> storeGenerator = <span class="built_in">require</span>(<span class="string">&#x27;./plop-templates/store/prompt&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">plop</span>) =&gt;</span> &#123;</span><br><span class="line">  plop.<span class="title function_">setGenerator</span>(<span class="string">&#x27;view&#x27;</span>, viewGenerator);</span><br><span class="line">  plop.<span class="title function_">setGenerator</span>(<span class="string">&#x27;component&#x27;</span>, componentGenerator);</span><br><span class="line">  plop.<span class="title function_">setGenerator</span>(<span class="string">&#x27;store&#x27;</span>, storeGenerator);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="四、如何添加命令方便使用"><a href="#四、如何添加命令方便使用" class="headerlink" title="四、如何添加命令方便使用"></a>四、如何添加命令方便使用</h2><p>在package.json 添加 script脚本</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;new&quot;</span><span class="punctuation">:</span> <span class="string">&quot;plop&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="五、如何使用"><a href="#五、如何使用" class="headerlink" title="五、如何使用"></a>五、如何使用</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm run <span class="keyword">new</span></span><br></pre></td></tr></table></figure>

<h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><p><img src="/images/%E5%89%8D%E7%AB%AF14/2.gif" alt="2.gif"></p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>我提供两套我自己使用的模板，分别是vue2和vue3的</p>
<p><a href="/images/%E5%89%8D%E7%AB%AF14/vue2.zip">vue2.zip</a></p>
<p><a href="/images/%E5%89%8D%E7%AB%AF14/vue3.zip">vue3.zip</a></p>
<p>注意：store是采用了module是分开自注册的，如果有兴趣，可以看这篇<br><a href="http://blog.xingxiaowu.cn/2021/01/13/%E6%97%A0%E6%98%9F%E7%9A%84%E5%89%8D%E7%AB%AF%E4%B9%8B%E6%97%85%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94require.context%E5%92%8Cvuex%E6%8C%81%E4%B9%85%E5%8C%96/">无星的前端之旅（十三）——require.context和vuex持久化</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的前端之旅（十）——多环境打包+命令行参数读取</title>
    <url>/2020/09/04/%E6%97%A0%E6%98%9F%E7%9A%84%E5%89%8D%E7%AB%AF%E4%B9%8B%E6%97%85%EF%BC%88%E5%8D%81%EF%BC%89%E2%80%94%E2%80%94%E5%A4%9A%E7%8E%AF%E5%A2%83%E6%89%93%E5%8C%85+%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0%E8%AF%BB%E5%8F%96/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>多环境部署的时候总会有些参数需要写入</p>
<p>在vue-cli3创建的项目中可以通过webpack的配置文件写入</p>
<p>vue-cli4中没有了webpack配置文件，取而代之的事vue.config.js</p>
<p>实际上有两种方式可以完成这一需求</p>
<h1 id="Mode模式"><a href="#Mode模式" class="headerlink" title="Mode模式"></a><a href="https://cli.vuejs.org/zh/guide/mode-and-env.html">Mode模式</a></h1><p>这是vue-cli4提供的能力,通过创建</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.env.环境</span><br></pre></td></tr></table></figure>
<p>方式创建不同环境下的不同配套参数</p>
<p>需要注意的是</p>
<h3 id="只有以-VUE-APP-开头的变量会被-webpack-DefinePlugin-静态嵌入到客户端侧的包中。你可以在应用的代码中这样访问它们："><a href="#只有以-VUE-APP-开头的变量会被-webpack-DefinePlugin-静态嵌入到客户端侧的包中。你可以在应用的代码中这样访问它们：" class="headerlink" title="只有以 VUE_APP_ 开头的变量会被 webpack.DefinePlugin 静态嵌入到客户端侧的包中。你可以在应用的代码中这样访问它们："></a>只有以 VUE_APP_ 开头的变量会被 webpack.DefinePlugin 静态嵌入到客户端侧的包中。你可以在应用的代码中这样访问它们：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(process.env.VUE_APP_SECRET)</span><br></pre></td></tr></table></figure>
<h1 id="命令行注入"><a href="#命令行注入" class="headerlink" title="命令行注入"></a>命令行注入</h1><p>除了某些配套参数，可能还有些需要单独注入的参数，比如不同渠道id在Jenkins打包时可选用到。</p>
<p>这里直接举个例子</p>
<h2 id="1-如何写入参数"><a href="#1-如何写入参数" class="headerlink" title="1.如何写入参数"></a>1.如何写入参数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 修改前打包</span><br><span class="line">npm run build:dev</span><br><span class="line">## 修改后打包</span><br><span class="line">npm run build:dev -x1 -x2</span><br></pre></td></tr></table></figure>
<h2 id="2-如何读取参数"><a href="#2-如何读取参数" class="headerlink" title="2.如何读取参数"></a>2.如何读取参数</h2><p>新建js文件，例如:</p>
<p>在项目根目录下新建config文件夹，新建environment.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ./config/environment.js</span><br><span class="line"></span><br><span class="line">const configArgv = JSON.parse(process.env.npm_config_argv);</span><br><span class="line">// 获取到参数</span><br><span class="line">const original = configArgv.original.slice(1);</span><br><span class="line">// 参数1</span><br><span class="line">const x1 = original[1] ? original[1].replace(/-/g, &#x27;&#x27;) : &#x27;默认值1&#x27;;</span><br><span class="line">const x2 = original[2] ? original2.replace(/-/g, &#x27;&#x27;) : &#x27;默认值2&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  x1,x2</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="3-如何写入环境变量"><a href="#3-如何写入环境变量" class="headerlink" title="3.如何写入环境变量"></a>3.如何写入环境变量</h2><p><a href="https://cli.vuejs.org/zh/guide/mode-and-env.html#%E5%9C%A8%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BE%A7%E4%BB%A3%E7%A0%81%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">你可以在 vue.config.js 文件中计算环境变量。它们仍然需要以 VUE_APP_ 前缀开头。</a></p>
<p>也就是说，可以在vue.config.js引入上述的environment.js进行赋值</p>
<p>例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./vue.config.js</span><br><span class="line"></span><br><span class="line">const environment = require(&#x27;./config/environment&#x27;);</span><br><span class="line"></span><br><span class="line">process.env.VUE_APP_X1 = environment.x1;</span><br><span class="line">process.env.VUE_APP_X2 = environment.x2;</span><br></pre></td></tr></table></figure>

<h1 id="package-json中的script如何获取命令行输入的参数"><a href="#package-json中的script如何获取命令行输入的参数" class="headerlink" title="package.json中的script如何获取命令行输入的参数"></a>package.json中的script如何获取命令行输入的参数</h1><p>例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># package.json</span><br><span class="line">&#123;</span><br><span class="line">      &quot;scripts&quot;:&#123;</span><br><span class="line">            &quot;test&quot;:&quot;npx hexo clean &amp;&amp; hexo g -d&quot;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>命令行输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run test -- 参数1 参数2</span><br><span class="line"></span><br><span class="line">#实际上运行的就是</span><br><span class="line">npx hexo clean &amp;&amp; hexo g -d 参数1 参数2</span><br></pre></td></tr></table></figure>

<p>– 后面的参数会被自动补全到对应的命令后面</p>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的前端之旅（四）——小程序持续集成</title>
    <url>/2020/05/07/%E6%97%A0%E6%98%9F%E7%9A%84%E5%89%8D%E7%AB%AF%E4%B9%8B%E6%97%85%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>刚刚跑路到一家新公司。新公司的前端小改改负责开发小程序，为四十多家客户服务，而且是他们的账号主体。</p>
<p>换句话说，一套代码，要切换多个 appid 去打包上传多个小程序账号发布。</p>
<p>所以每次发布，同事都切来切去，麻烦的一批，疲于奔命。</p>
<p>因此需要做一套自动部署，将开发从这个上面解放出来，让运营/实施去完成这个发布操作，开发只需要专注于代码开发即可。</p>
<h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><p>这里分为两个技术选型。</p>
<h4 id="一-小程序的支持方式选型"><a href="#一-小程序的支持方式选型" class="headerlink" title="一.小程序的支持方式选型"></a>一.小程序的支持方式选型</h4><p>小程序的官网可以看到，他们支持三种方式</p>
<p><a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/cli.html">命令行 V2</a></p>
<p><a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/http.html">http</a></p>
<p><a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/ci.html">ci</a> ️❤️❤️❤️</p>
<h4 id="理由如下："><a href="#理由如下：" class="headerlink" title="理由如下："></a>理由如下：</h4><p>首先，我们需要明确，所谓的命令行 V2 和 http 远程调用，实际上是依赖</p>
<p>微信开发者工具</p>
<p>这个应用的，简介说的很清楚了，我这也就不截图了。</p>
<p>正常情况下，这种强依赖 application 的方式，在有其他脱离依赖的情况下，一定不是首选。</p>
<p>因此我们选择 miniprogram-ci 这种方式。具体的介绍也请看官网。</p>
<p>miniprogram-ci 有四种命令行调用命令：</p>
<p>预览；上传；npm 打包；设置代理。</p>
<p>具体看官网</p>
<h4 id="二-实现方式选型"><a href="#二-实现方式选型" class="headerlink" title="二.实现方式选型"></a>二.实现方式选型</h4><p>jenkins 构建 ️❤️️❤️️❤️❤️❤️</p>
<p>提供 GUI 页面调用 node 服务 ❤️❤️❤️❤️</p>
<p>自制 cli 方式集成 ️❤️️❤️❤️</p>
<h4 id="理由如下：-1"><a href="#理由如下：-1" class="headerlink" title="理由如下："></a>理由如下：</h4><p>Jenkins 老牌构建工具：专治各种工作流。方案成熟，首选。</p>
<p>提供 GUI 页面调用 node 服务：因为我们业务本身有一个专门的客户管理平台，可以考虑在这上面提供一些页面或功能，便于运营人员发版。但当前服务的接口是个 java 编写的，对于 ci 的 npm 包使用可能存在一些技术风险点。但从业务角度来看，效果是最好的。</p>
<p>自制 cli 方式集成：在<a href="https://juejin.im/post/5ea93384f265da7bd802a5af">无星的前端之旅（三）——cli 工程调试</a>可以看到,我们正在做一些 cli 工具，因此我们可以将这些东西放到 cli 工具中，全局安装即可使用。但我们的目的是把这些任务甩给运营/实施这些非技术人员，因此这种方式我们排除。</p>
<h1 id="综上-技术选型是-Jenkins-构建-CI"><a href="#综上-技术选型是-Jenkins-构建-CI" class="headerlink" title="综上,技术选型是 Jenkins 构建+CI"></a>综上,技术选型是 Jenkins 构建+CI</h1><h3 id="接下里就是实现了"><a href="#接下里就是实现了" class="headerlink" title="接下里就是实现了"></a>接下里就是实现了</h3><p>实现其实非常简单。</p>
<h3 id="1-去微信添加上传代码白名单，并下载上传代码的私钥"><a href="#1-去微信添加上传代码白名单，并下载上传代码的私钥" class="headerlink" title="1.去微信添加上传代码白名单，并下载上传代码的私钥"></a>1.去微信添加上传代码白名单，并下载上传代码的私钥</h3><p><a href="https://mp.weixin.qq.com/">官网地址</a>登录以后</p>
<p>侧边栏选择-开发-开发设置-小程序代码上传</p>
<p>然后添加用于构建机器的公网 ip，并下载私钥保存好。后面要用到。</p>
<h3 id="2-Jenkins-设置"><a href="#2-Jenkins-设置" class="headerlink" title="2.Jenkins 设置"></a>2.Jenkins 设置</h3><p>Jenkins 使用参数化构建，添加多个下拉参数。</p>
<h3 id="这里有个小坑。"><a href="#这里有个小坑。" class="headerlink" title="这里有个小坑。"></a>这里有个小坑。</h3><p>前面说了，我们是一套代码用于多个小程序发布，除了一些渠道化参数以外，所有的东西都相同。只是渠道化的参数有点多且需要一一匹配。</p>
<p>因为 Jenkins 不像前端，下拉框的展示是 key,真实值是 value。而是 key-value 都是一个值。所以如果所有参数都做成可选项，就需要发包人员去一一对应勾选，那这个发版就太难受了。</p>
<p>我们预期是：只要选择一个选项-客户主体，即可发包。</p>
<p>因此这里我换了一个思路（可能这个思路看起来很简单，但我确实想了很久，当时思维进入死胡同了）。我将所有的需要的值都写到展示的下拉栏中，第一个值用客户名称，用;做分隔符，最后再 shell 中切割字符串获取所需打包参数。</p>
<p>图中涉及敏感信息，我就打码了，能看出是个下拉栏</p>
<p>选择对应客户，配置和效果如下<br><img src="/images/%E5%89%8D%E7%AB%AF4/1.png"></p>
<p><img src="/images/%E5%89%8D%E7%AB%AF4/2.png"></p>
<p>在构建过程中，使用 ci 工具去做上传操作。</p>
<p><img src="/images/%E5%89%8D%E7%AB%AF4/3.png"><br>这里的 ${hospital}是下拉框的变量名。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">#等号两侧不要有空格</span><br><span class="line">#------------------赋值------------------</span><br><span class="line">echo &quot;赋值操作&quot;</span><br><span class="line">hospitalName=`echo $&#123;hospital&#125; | awk -F &quot;;&quot; &#x27;&#123;print $1&#125;&#x27;`</span><br><span class="line">http_env=`echo $&#123;hospital&#125; | awk -F &quot;;&quot; &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">fileName=`echo $&#123;hospital&#125; | awk -F &quot;;&quot; &#x27;&#123;print $3&#125;&#x27;`</span><br><span class="line">appid=`echo $&#123;hospital&#125; | awk -F &quot;;&quot; &#x27;&#123;print $4&#125;&#x27;`</span><br><span class="line">#------------------拉依赖------------------</span><br><span class="line">echo &quot;拉依赖&quot;</span><br><span class="line">cd ./internetHospital</span><br><span class="line">npm install</span><br><span class="line">#------------------执行构建------------------</span><br><span class="line">echo &quot;执行构建&quot;</span><br><span class="line">npx cross-env http_env=$&#123;http_env&#125; fileName=$&#123;fileName&#125; hospitalName=$&#123;hospitalName&#125; node build/build.js wx</span><br><span class="line">#------------------执行上传------------------</span><br><span class="line">echo &quot;执行上传&quot;</span><br><span class="line">npx miniprogram-ci upload --pp  ./dist/$&#123;fileName&#125;/wx --pkp ./privatekey/private.$&#123;appid&#125;.key --appid $&#123;appid&#125; --uv $&#123;version&#125; -r 1 --enable-es6 true</span><br><span class="line">echo &quot;上传完毕&quot;</span><br></pre></td></tr></table></figure>

<p>讲解一下（实际上你们可能需要关注的是第 4 步执行上传，第三步构建也建议了解一下）：</p>
<p>第一步赋值：</p>
<p>是我解析我打包需要的参数值，你们可能不需要，或者不同。</p>
<p>第二步拉依赖：</p>
<p>这没什么好说的，到代码文件夹下去拉依赖。</p>
<p>第三步执行构建：</p>
<p>这一步是我同事写的打包命令，我们用的 mpvue，需要做一个打包操作，产物才是能上传的小程序包。</p>
<p>但这一步要注意的是<a href="https://www.npmjs.com/package/npx">npx</a>和<a href="https://www.npmjs.com/package/cross-env">cross-env</a>,这两是啥，可以翻到文章最后看一下。</p>
<p>第四步上传：</p>
<p>就是纯调用微信的 miniprogram-ci，前面也说了怎么获取 appid。我都是放在 Jenkins 的下拉参数了。至于私钥，我是放在了项目目录下，因此 git 拉取后是能获取到私钥的。获取私钥的方式，各位可以各显神通。</p>
<p>成果：</p>
<p><img src="/images/%E5%89%8D%E7%AB%AF4/4.png"></p>
<h3 id="npx"><a href="#npx" class="headerlink" title="npx"></a>npx</h3><p>npx 可以帮助把项目中用到的一些工具的命令软连接提取出来（不知道这样描述对不对），举个例子，你在项目中下载 eslint，不是全局安装，执行 eslint 命令需要到 node_module/eslint/bin 下去找到 eslint 才能执行对应命令，使用 npx 则可以直接执行。（这里在使用微信的 miniprogram-ci 的时候，就排上用场了，我不希望在 Jenkins 宿主机的全局去安装 miniprogram-ci）</p>
<p>也可以在你本地不打算装一些模块，临时下载远程模块调用，可以加参数在调用后删除。（同理，不想宿主机全局安装，cross-env 就是这么用上的）</p>
<h3 id="cross-env"><a href="#cross-env" class="headerlink" title="cross-env"></a>cross-env</h3><p>运行跨平台设置和使用环境变量的脚本</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://github.com/yingye/Blog/issues/8">Jenkins 持续集成</a></p>
<p><a href="https://www.cnblogs.com/Smiled/p/10681625.html">自制 GUI 页面完成小程序打包发布</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的命令行与环境总结（一）-- 环境变量到底应该怎么配</title>
    <url>/2021/08/24/%E6%97%A0%E6%98%9F%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8E%E7%8E%AF%E5%A2%83%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%88%B0%E5%BA%95%E5%BA%94%E8%AF%A5%E6%80%8E%E4%B9%88%E9%85%8D/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>可能很多同学，看到环境变量就头痛，不知道怎么配，也不知道改什么</p>
<p>一旦要配置环境变量，就是上网到处翻，乱复制，出错了也不知道怎么排查</p>
<p>所以我打算就我的知识范畴，总结一下我在工作过程中，常用的环境配置和命令</p>
<p>如有不对，大佬们在评论区轻喷</p>
<p>我是用的是Mac，以下介绍大部分依据Mac和Linux，Windows老哥仅供参考</p>
<h1 id="SHELL环境介绍"><a href="#SHELL环境介绍" class="headerlink" title="SHELL环境介绍"></a>SHELL环境介绍</h1><p>首先我们需要介绍一下<code>SHELL环境</code></p>
<p>我们打开“终端”出现的黑框框里面的环境（也有的同学使用iterm2或者别的终端工具），管它叫<code>SHELL环境</code></p>
<p><img src="/images/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8E%E7%8E%AF%E5%A2%831/1.png" alt="1.png"></p>
<p><code>SHELL环境</code>有很多种，比较常见的是<code>bash</code>和<code>zsh</code></p>
<h1 id="bash和zsh"><a href="#bash和zsh" class="headerlink" title="bash和zsh"></a>bash和zsh</h1><p>在早期的Mac中，默认的shell环境为<code>bash</code></p>
<p>现在的新款mac中，默认的shell环境为<code>zsh</code></p>
<blockquote>
<p>当然，如果有同学不知道自己当前是什么<code>SHELL环境</code>，可以使用以下命令查看</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo $SHELL</span><br></pre></td></tr></table></figure>

<p>而老款mac安装新系统用到现在，如果没有修改过zsh，也会提示你切换</p>
<p><img src="/images/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8E%E7%8E%AF%E5%A2%831/2.png" alt="2.png"></p>
<p>所以在这里我们看到有命令提示，建议切换为zsh</p>
<p>切换命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>

<p>那么怎么查看本机有哪些<code>SHELL</code>呢</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /etc/shells</span><br></pre></td></tr></table></figure>

<h1 id="环境变量的配置文件"><a href="#环境变量的配置文件" class="headerlink" title="环境变量的配置文件"></a>环境变量的配置文件</h1><p>那么接下来，我们来了解一下环境变量配置文件</p>
<h2 id="什么是环境变量的配置文件？"><a href="#什么是环境变量的配置文件？" class="headerlink" title="什么是环境变量的配置文件？"></a>什么是环境变量的配置文件？</h2><p>我觉得摆概念，有些不太好理解，所以我想从作用来说。</p>
<blockquote>
<p>我觉得说的通俗一点，环境变量配置文件，就是你打开“终端”工具，终端工具会默认加载的文件。</p>
</blockquote>
<p>举个例子，假设你新建了一个a文件</p>
<p>每次终端打开的时候，都会默认加载a文件</p>
<p>那么，a文件中配置的环境变量，都会被加载到shell环境中</p>
<p>所以这时候，你将a文件认为是环境变量的配置文件，也没有什么不可以的</p>
<h2 id="环境变量配置文件"><a href="#环境变量配置文件" class="headerlink" title="环境变量配置文件"></a>环境变量配置文件</h2><h3 id="系统配置文件和用户配置文件"><a href="#系统配置文件和用户配置文件" class="headerlink" title="系统配置文件和用户配置文件"></a>系统配置文件和用户配置文件</h3><p>配置文件分两种，一种是整个系统的，一种是用户的</p>
<table>
<thead>
<tr>
<th align="left">系统</th>
<th align="center">用户</th>
</tr>
</thead>
<tbody><tr>
<td align="left">/etc/profile</td>
<td align="center">~/.bashrc</td>
</tr>
<tr>
<td align="left">/etc/bashrc</td>
<td align="center">~/.zshrc</td>
</tr>
<tr>
<td align="left">–</td>
<td align="center">~/.bash_profile</td>
</tr>
</tbody></table>
<p><code>/etc/</code>目录为系统主要配置目录</p>
<p>我们可以发现，系统级的都在<code>/etc/</code>下面</p>
<p>而用户相关配置都在<code>~</code>下面，因为实际上<code>cd ~</code>就会到对应的用户名目录下</p>
<p><img src="/images/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8E%E7%8E%AF%E5%A2%831/3.png" alt="3.png"></p>
<h3 id="加载顺序"><a href="#加载顺序" class="headerlink" title="加载顺序"></a>加载顺序</h3><p>基本是先加载系统的，再加载用户的</p>
<p>（这里有一个完整的顺序，但是我也没验证，不敢随便就复制粘贴上来）</p>
<p>其实也不用那么关心加载顺序，因为一般情况下，我们都只会修改用户下的具体的某一个环境变量文件，什么冲突啊之类的，几乎都不会在日常工作中出现。</p>
<h3 id="不同环境下的不同变量文件"><a href="#不同环境下的不同变量文件" class="headerlink" title="不同环境下的不同变量文件"></a>不同环境下的不同变量文件</h3><p>下方指的文件均为用户文件，也就是<code>~/.xxx</code></p>
<p>在我们上网查各种环境变量配置的时候，可以看到有不同的文件需要你去变更</p>
<p>有的会让你变更<code>.bash_profile</code>，有的会让你变更<code>.bashrc</code>，有的会让你变更<code>.zshrc</code></p>
<p>首先，我们需要使用上面介绍过的<code>echo $SHELL</code>看当前是什么shell环境</p>
<p>是<code>bash</code>的兄弟，一般而言是修改<code>~/.bash_profile</code>或者<code>~/.bashrc</code>任意一个即可</p>
<p>是<code>zsh</code>的兄弟，一般而言是修改<code>~/.zshrc</code>文件</p>
<h3 id="没有文件"><a href="#没有文件" class="headerlink" title="没有文件"></a>没有文件</h3><p>什么？</p>
<p>你没有这些文件怎么办？</p>
<p>简单，手动创建一个即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line"># 手动创建文件</span><br><span class="line">touch .bash_profile</span><br></pre></td></tr></table></figure>

<p>这不就有了么</p>
<p>创建好以后终端会主动去读，不需要做什么额外的操作</p>
<h1 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h1><p>刚刚说完了环境变量配置文件，那么现在来说说环境变量</p>
<h2 id="什么是环境变量"><a href="#什么是环境变量" class="headerlink" title="什么是环境变量"></a>什么是环境变量</h2><p>我们可以通过如下命令来查看当前的环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo $PATH</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8E%E7%8E%AF%E5%A2%831/6.png" alt="6.png"></p>
<p>其实就是提前注入了一些<code>path</code>，让我们可以快速执行某些可执行文件，免得每次都得找到具体路径。</p>
<p>可能有些同学不是很理解这句话。</p>
<p>这里我们来举2个例子:</p>
<h2 id="例子一：flutter环境变量的配置"><a href="#例子一：flutter环境变量的配置" class="headerlink" title="例子一：flutter环境变量的配置"></a>例子一：flutter环境变量的配置</h2><p>在配置flutter环境的时候，我们可以看到，在<code>git clone flutter</code>项目以后</p>
<p><img src="/images/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8E%E7%8E%AF%E5%A2%831/4.png" alt="4.png"></p>
<p>可以看到<code>flutter/bin/</code>目录下有个名为<code>flutter</code>的可执行文件</p>
<hr>
<p>这里插一个额外的知识点，一般情况下，你下载的这种需要配置环境变量的东西，都会有个<code>bin</code>目录，可执行文件一般都放在<code>bin</code>目录下，这是一个约定俗成的规则。</p>
<hr>
<p>一般咱们判断flutter环境是否安装成功，都是直接在终端执行<code>flutter -v</code>看看是否有反应</p>
<p>那如果咱们不配置环境变量，直接使用这个<code>bin/flutter</code>来执行这个命令，会怎么样？</p>
<p><img src="/images/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8E%E7%8E%AF%E5%A2%831/5.png" alt="5.png"></p>
<p>答案当然是，可行。</p>
<p>也就是说，配置好以后的效果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flutter -v</span><br><span class="line"># 等价于</span><br><span class="line">/Users/xing.wu/Documents/environment/flutter/bin/flutter -v</span><br></pre></td></tr></table></figure>
<p>因为所谓的配置环境变量，就是将<code>flutter</code>前面的路径，配置到默认的shell的path中。</p>
<p>即将<br><code>/Users/xing.wu/Documents/environment/flutter/bin/</code><br>配置到<code>path</code>中</p>
<h3 id="配置方法"><a href="#配置方法" class="headerlink" title="配置方法"></a>配置方法</h3><p>找到环境变量配置文件，在其中添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export PATH=/Users/xing.wu/Documents/environment/flutter/bin:$PATH</span><br></pre></td></tr></table></figure>

<p>换而言之，其他的环境变量配置，在没有特殊命令的情况下，都可以通过这种方式配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export PATH=xxxx:$PATH</span><br></pre></td></tr></table></figure>

<p>改完以后，可以选择重新打开一个新的终端，或者使用<code>source</code>命令来读取环境配置文件</p>
<p><code>source</code>命令是一个内置的shell命令,用于从当前shell会话中的文件读取和执行命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 其他环境变量文件自行修改哈</span><br><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure>

<h2 id="例子二：npm全局安装的包"><a href="#例子二：npm全局安装的包" class="headerlink" title="例子二：npm全局安装的包"></a>例子二：npm全局安装的包</h2><p>我这里是使用<code>nvm</code>安装的node环境，所以我加到path里的路径会带上<code>nvm</code></p>
<p>1.首先，我们看下我全局安装了哪些包</p>
<p><img src="/images/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8E%E7%8E%AF%E5%A2%831/7.png" alt="7.png"></p>
<p>可以看到我这有个全局的<code>@vue/cli</code></p>
<p>所以我可以使用<code>vue create project</code>来创建项目</p>
<p>2.那么看看这个vue的路径在哪</p>
<p><code>which vue</code></p>
<p><img src="/images/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8E%E7%8E%AF%E5%A2%831/8.png" alt="8.png"></p>
<p>可以看到，路径为<code>/Users/xing.wu/.nvm/versions/node/v15.14.0/bin/vue</code></p>
<p>在往前翻，看看我们<code>echo $PATH</code>的结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/Users/xing.wu/Documents/environment/flutter/bin:/Users/xing.wu/.nvm/versions/node/v15.14.0/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Library/Apple/usr/bin</span><br></pre></td></tr></table></figure>

<p>可以看到<code>/Users/xing.wu/.nvm/versions/node/v15.14.0/bin:</code>被我们加入到了环境变量中，因此才可以直接使用<code>vue</code>相关的命令，其他库同理。</p>
<p>我们可以看看这个<code>bin</code>目录</p>
<p><img src="/images/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8E%E7%8E%AF%E5%A2%831/9.png" alt="9.png"></p>
<p>所有和npm库中相关的可用执行文件的快捷方式或本体，都在这了。</p>
<h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>那么到此为止，Mac上当前是什么SHELL，配置文件是哪个文件，<code>path</code>如何配置，大家应该都知道了</p>
<p>相信以后的环境配置难不倒大家了～</p>
<p>这里留一个小问题：</p>
<p>以前mac系统中默认环境为<code>bash</code>，切到<code>zsh</code>以后，不会再读取<code>~.bash_profile</code>而是读取<code>~/.zshrc</code>了，那么怎么做，才能在更小改动的情况下，让以前的环境变量可以复用？</p>
<p>可以把答案写在评论区~</p>
]]></content>
      <categories>
        <category>shell</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的命令行与环境总结（二）-新mac如何安装开发环境(web,iOS,Android,flutter,react-native,java,go)</title>
    <url>/2021/09/24/%E6%97%A0%E6%98%9F%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8E%E7%8E%AF%E5%A2%83%E6%80%BB%E7%BB%93%EF%BC%88%E4%BA%8C%EF%BC%89-%E6%96%B0mac%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<p>我看谁还不会装环境！</p>
<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近新来的同事有点多，为了统一大家的开发环境和工具</p>
<p>专门写了环境安装文档，以供使用</p>
<p>所有命令，均在iterm2中输入</p>
<h1 id="Mac常用信息介绍"><a href="#Mac常用信息介绍" class="headerlink" title="Mac常用信息介绍"></a>Mac常用信息介绍</h1><p>有mac使用经验的用户可以跳过这一节</p>
<p>以前使用Windows的同学可以先看这一节</p>
<h2 id="键盘"><a href="#键盘" class="headerlink" title="键盘"></a>键盘</h2><p>Windows 上常用的ctrl键，在mac上使用command键代替（简称cmd键）</p>
<p><img src="/images/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8E%E7%8E%AF%E5%A2%832/1.png" alt="1.png"></p>
<p>在部分外接键盘上，是win键</p>
<h2 id="安装包下载"><a href="#安装包下载" class="headerlink" title="安装包下载"></a>安装包下载</h2><p>可以从AppStore下载</p>
<p>也可以从网页下载</p>
<h2 id="分盘"><a href="#分盘" class="headerlink" title="分盘"></a>分盘</h2><p>mac上默认标准只有一个盘，不会有分盘的概念</p>
<p>Windows的<code>我的电脑</code></p>
<p>mac上为finder（访达）</p>
<p><img src="/images/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8E%E7%8E%AF%E5%A2%832/2.png" alt="2.png"></p>
<h2 id="从网页下载安装包格式"><a href="#从网页下载安装包格式" class="headerlink" title="从网页下载安装包格式"></a>从网页下载安装包格式</h2><ul>
<li>dmg</li>
<li>pkg</li>
<li>zip</li>
</ul>
<p>从网页下载的安装包会有这三种格式</p>
<h3 id="dmg格式"><a href="#dmg格式" class="headerlink" title="dmg格式"></a>dmg格式</h3><p>双击安装</p>
<p>以企业微信为例子</p>
<p><img src="/images/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8E%E7%8E%AF%E5%A2%832/3.png" alt="3.png"></p>
<p>鼠标左键按住软件，拖到右边的文件夹中 </p>
<h3 id="pkg文件"><a href="#pkg文件" class="headerlink" title="pkg文件"></a>pkg文件</h3><p>双击以后，无脑下一步即可</p>
<h3 id="zip文件"><a href="#zip文件" class="headerlink" title="zip文件"></a>zip文件</h3><p>类似windows的绿色软件</p>
<p>解压缩以后，将得到的应用程序拖动到finder文件夹中，应用程序文件夹下即可</p>
<p><img src="/images/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8E%E7%8E%AF%E5%A2%832/4.png" alt="4.png"></p>
<h2 id="软件无法打开"><a href="#软件无法打开" class="headerlink" title="软件无法打开"></a>软件无法打开</h2><p><img src="/images/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8E%E7%8E%AF%E5%A2%832/5.png" alt="5.png"></p>
<p><img src="/images/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8E%E7%8E%AF%E5%A2%832/6.png" alt="6.png"></p>
<p>遇到这种类型的弹窗，第一个选择好，第二个选择取消</p>
<p><img src="/images/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8E%E7%8E%AF%E5%A2%832/7.png" alt="7.png"></p>
<p><img src="/images/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8E%E7%8E%AF%E5%A2%832/8.png" alt="8.png"></p>
<h2 id="添加finder默认可选件夹"><a href="#添加finder默认可选件夹" class="headerlink" title="添加finder默认可选件夹"></a>添加finder默认可选件夹</h2><p><img src="/images/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8E%E7%8E%AF%E5%A2%832/9.png" alt="9.png"></p>
<p><img src="/images/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8E%E7%8E%AF%E5%A2%832/10.png" alt="10.png"></p>
<h1 id="常用软件安装"><a href="#常用软件安装" class="headerlink" title="常用软件安装"></a>常用软件安装</h1><p>除了各自常用的开发软件，比如vscode,webstrom,idea,xcode,as之类的</p>
<p>以下软件需要安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">翻墙工具（各显神通）</span><br><span class="line"></span><br><span class="line">git</span><br><span class="line"></span><br><span class="line">iterm2</span><br><span class="line"></span><br><span class="line">Alfred4</span><br></pre></td></tr></table></figure>

<h2 id="翻墙工具"><a href="#翻墙工具" class="headerlink" title="翻墙工具"></a>翻墙工具</h2><p>不管用啥，只要用的顺手就行</p>
<p>开启以后，找到代理设置</p>
<p>不管是web的，客户端的，都一定能找到代理设置！！！</p>
<h3 id="这里以小飞机举例："><a href="#这里以小飞机举例：" class="headerlink" title="这里以小飞机举例："></a>这里以小飞机举例：</h3><p><img src="/images/Flutter2/1.png" alt="小飞机"></p>
<p>查看Http端口（mac默认为1087，Windows默认为1080）</p>
<p><img src="/images/Flutter2/2.jpeg" alt="http端口"></p>
<p>根据端口设置http和https代理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export http_proxy=http://127.0.0.1:1087;export https_proxy=http://127.0.0.1:1087;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="这个命令要记一下，以后的开发生涯很多地方会用到！！！"><a href="#这个命令要记一下，以后的开发生涯很多地方会用到！！！" class="headerlink" title="这个命令要记一下，以后的开发生涯很多地方会用到！！！"></a>这个命令要记一下，以后的开发生涯很多地方会用到！！！</h3><h3 id="这个命令要记一下，以后的开发生涯很多地方会用到！！！-1"><a href="#这个命令要记一下，以后的开发生涯很多地方会用到！！！-1" class="headerlink" title="这个命令要记一下，以后的开发生涯很多地方会用到！！！"></a>这个命令要记一下，以后的开发生涯很多地方会用到！！！</h3><h3 id="这个命令要记一下，以后的开发生涯很多地方会用到！！！-2"><a href="#这个命令要记一下，以后的开发生涯很多地方会用到！！！-2" class="headerlink" title="这个命令要记一下，以后的开发生涯很多地方会用到！！！"></a>这个命令要记一下，以后的开发生涯很多地方会用到！！！</h3><hr>
<p>如何测试是否成功</p>
<p>切记不要用ping <a href="http://www.google.com测试,你就是ping到明年也ping不通/">www.google.com测试，你就是Ping到明年也ping不通</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">测试方法一：</span><br><span class="line">curl www.google.com</span><br><span class="line">有回文则成功</span><br><span class="line"></span><br><span class="line">测试方法二：</span><br><span class="line">curl cip.cc</span><br><span class="line">看看返回的数据是否为节点ip</span><br></pre></td></tr></table></figure>

<h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><p>打开iterm2，输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git --version  </span><br></pre></td></tr></table></figure>

<p>如果有git，就输出版本</p>
<p>如果没有git，就会出现弹窗，安装即可</p>
<h2 id="alfred4"><a href="#alfred4" class="headerlink" title="alfred4"></a>alfred4</h2><h3 id="剪切板历史"><a href="#剪切板历史" class="headerlink" title="剪切板历史"></a>剪切板历史</h3><p><img src="/images/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8E%E7%8E%AF%E5%A2%832/11.png" alt="11.png"></p>
<p>cmd+alt+c   唤出剪切板历史</p>
<h3 id="快速搜索-百度搜索"><a href="#快速搜索-百度搜索" class="headerlink" title="快速搜索-百度搜索"></a>快速搜索-百度搜索</h3><p><img src="/images/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8E%E7%8E%AF%E5%A2%832/12.png" alt="12.png"></p>
<p><img src="/images/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8E%E7%8E%AF%E5%A2%832/13.png" alt="13.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.baidu.com/s?wd=&#123;query&#125;</span><br></pre></td></tr></table></figure>

<h3 id="快速搜索-Github搜索"><a href="#快速搜索-Github搜索" class="headerlink" title="快速搜索-Github搜索"></a>快速搜索-Github搜索</h3><p><img src="/images/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8E%E7%8E%AF%E5%A2%832/14.png" alt="14.png"></p>
<p><img src="/images/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8E%E7%8E%AF%E5%A2%832/15.png" alt="15.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/search?q=&#123;query&#125;</span><br></pre></td></tr></table></figure>

<p>唤起搜索 alt+空格  输入<code>github/baidu 要搜索的关键字</code> （注意中间有个空格）</p>
<p>例如：<code>github 123</code>或者<code>baidu 123</code></p>
<h3 id="有道插件"><a href="#有道插件" class="headerlink" title="有道插件"></a>有道插件</h3><p><a href="https://github.com/wensonsmith/YoudaoTranslate">YoudaoTranslate</a>下载</p>
<p>解压后导入</p>
<p><img src="/images/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8E%E7%8E%AF%E5%A2%832/16.png" alt="16.png"></p>
<p>具体配置，请参照右侧，只需要填写<code>youdao_appkey</code>和<code>youdao_secret</code>即可</p>
<p><img src="/images/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8E%E7%8E%AF%E5%A2%832/17.png" alt="17.png"></p>
<p>alt+空格，唤起Alfred输入框后，输入<code>yd 英文</code>即可（注意中间有个空格）</p>
<p>例如：<code>yd Hello World</code></p>
<h1 id="预备环境安装"><a href="#预备环境安装" class="headerlink" title="预备环境安装"></a>预备环境安装</h1><p>在安装完上述软件以后，我们来安装一些mac上的通用环境</p>
<h2 id="oh-my-zsh（git安装好以后操作）"><a href="#oh-my-zsh（git安装好以后操作）" class="headerlink" title="oh-my-zsh（git安装好以后操作）"></a>oh-my-zsh（git安装好以后操作）</h2><p>打开iterm2</p>
<p>所有命令从上到下依次执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 执行终端翻墙，见文章上方介绍的终端翻墙命令</span><br><span class="line">export http_proxy=http://127.0.0.1:1087;export https_proxy=http://127.0.0.1:1087;</span><br><span class="line"></span><br><span class="line">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</span><br><span class="line"></span><br><span class="line"># 安装zsh插件</span><br><span class="line">cd ~/.oh-my-zsh/custom/plugins</span><br><span class="line"># 高亮插件</span><br><span class="line">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git</span><br><span class="line"></span><br><span class="line">echo &quot;source $&#123;(q-)PWD&#125;/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh&quot; &gt;&gt; $&#123;ZDOTDIR:-$HOME&#125;/.zshrc</span><br><span class="line"></span><br><span class="line">source ./zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</span><br><span class="line"></span><br><span class="line"># 自动补全插件</span><br><span class="line">git clone https://github.com/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure>

<p>安装完毕以后</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line"></span><br><span class="line">open -e ~/.zshrc</span><br></pre></td></tr></table></figure>

<p>会弹出一个文本编辑</p>
<p>搜索plugin找到</p>
<p><img src="/images/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8E%E7%8E%AF%E5%A2%832/18.png" alt="18.png"></p>
<p>修改为</p>
<p><img src="/images/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8E%E7%8E%AF%E5%A2%832/19.png" alt="19.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plugins=(zsh-autosuggestions git zsh-syntax-highlighting)</span><br></pre></td></tr></table></figure>

<p>然后保存</p>
<p>在iterm2中输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure>

<h2 id="brew"><a href="#brew" class="headerlink" title="brew"></a>brew</h2><p>homebrew是mac上的包管理器，能非常方便的管理我们的各种环境和路径依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 执行终端翻墙，见文章上方介绍的终端翻墙命令</span><br><span class="line">export http_proxy=http://127.0.0.1:1087;export https_proxy=http://127.0.0.1:1087;</span><br><span class="line"></span><br><span class="line">/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</span><br></pre></td></tr></table></figure>

<p>中途出现需要输入密码的地方，填写开机密码，输入过程不会有显示，这是linux的机制，写完了回车就行</p>
<p><img src="/images/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8E%E7%8E%AF%E5%A2%832/20.png" alt="20.png"></p>
<p>点击enter键，继续下一步</p>
<p><img src="/images/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8E%E7%8E%AF%E5%A2%832/21.png" alt="21.png"></p>
<p>复制这段代码执行</p>
<h2 id="自动操作脚本"><a href="#自动操作脚本" class="headerlink" title="自动操作脚本"></a>自动操作脚本</h2><p>基于各自的ide，自行添加此脚本</p>
<p>可以直接在finder中通过ide打开项目，不再需要打开ide再去找项目文件夹了</p>
<p>以VSCode为例</p>
<p>VSCode的全名为：Visual Studio Code</p>
<p><img src="/images/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8E%E7%8E%AF%E5%A2%832/23.png" alt="23.png"></p>
<p><img src="/images/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8E%E7%8E%AF%E5%A2%832/24.png" alt="24.png"></p>
<p><img src="/images/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8E%E7%8E%AF%E5%A2%832/25.png" alt="25.png"></p>
<p><img src="/images/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8E%E7%8E%AF%E5%A2%832/26.png" alt="26.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">for f in &quot;$@&quot;</span><br><span class="line">do</span><br><span class="line">    open -a &quot;Visual Studio Code&quot; &quot;$f&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p><code>Visual Studio Code</code>可替换为任意ied的全名，例如<code>Android Studio</code>等</p>
<p>cmd + s 保存为任意名称</p>
<p><img src="/images/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8E%E7%8E%AF%E5%A2%832/27.png" alt="27.png"></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><img src="/images/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8E%E7%8E%AF%E5%A2%832/28.png" alt="28.png"></p>
<hr>
<p> 至此，预备工作准备完毕</p>
<hr>
<h1 id="iOS环境安装"><a href="#iOS环境安装" class="headerlink" title="iOS环境安装"></a>iOS环境安装</h1><p>iOS其实没啥要装的</p>
<p>Xcode安装完毕</p>
<h2 id="命令行工具安装"><a href="#命令行工具安装" class="headerlink" title="命令行工具安装"></a>命令行工具安装</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo xcode-select --install</span><br></pre></td></tr></table></figure>

<h2 id="cocoapods安装"><a href="#cocoapods安装" class="headerlink" title="cocoapods安装"></a>cocoapods安装</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export http_proxy=http://127.0.0.1:1087;export https_proxy=http://127.0.0.1:1087;</span><br><span class="line"></span><br><span class="line">brew install cocoapods</span><br></pre></td></tr></table></figure>

<p>如果遇到<code>pod install</code>下载不下来</p>
<p>可以先执行</p>
<p><code>export http_proxy=http://127.0.0.1:1087;export https_proxy=http://127.0.0.1:1087;</code></p>
<p>再下载</p>
<p>iOS环境安装完毕</p>
<h1 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h1><p>也很简单</p>
<p>先打开翻墙工具，开启代理</p>
<p><code>Android Studio</code>下载安装</p>
<p>安装完毕以后，打开iterm2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">open -e ~/.zshrc</span><br></pre></td></tr></table></figure>

<p>在环境变量文件最后添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># android</span><br><span class="line">export Android_Home=~/Library/Android/sdk</span><br><span class="line">export PATH=$Android_Home/tools:$PATH</span><br><span class="line">export PATH=$Android_Home/platform-tools:$PATH</span><br><span class="line">export PATH=$Android_Home/build-tools:$PATH%</span><br></pre></td></tr></table></figure>
<p>保存</p>
<p>打开iterm2执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure>

<p>安卓环境安装完毕</p>
<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="安装nvm"><a href="#安装nvm" class="headerlink" title="安装nvm"></a>安装nvm</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 执行终端翻墙，见文章上方介绍的终端翻墙命令</span><br><span class="line">export http_proxy=http://127.0.0.1:1087;export https_proxy=http://127.0.0.1:1087;</span><br><span class="line"></span><br><span class="line">brew install nvm</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">open -e ~/.zshrc</span><br></pre></td></tr></table></figure>

<p>在文件最后添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># nvm</span><br><span class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="line">  [ -s &quot;/opt/homebrew/opt/nvm/nvm.sh&quot; ] &amp;&amp; . &quot;/opt/homebrew/opt/nvm/nvm.sh&quot;  # This loads nvm</span><br><span class="line">  [ -s &quot;/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm&quot; ] &amp;&amp; . &quot;/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm&quot;  # This loads nvm bash_completion</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8E%E7%8E%AF%E5%A2%832/22.png" alt="22.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure>

<h2 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm ls-remote</span><br><span class="line"># 打印输出后面跟着lts的表示稳定版本</span><br><span class="line"># m1用户只能安装15以上版本，其余用户自行安装对应版本</span><br><span class="line">nvm install v15.14.0</span><br><span class="line"></span><br><span class="line">npm install npm -g --registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<h2 id="安装nrm并切换淘宝源"><a href="#安装nrm并切换淘宝源" class="headerlink" title="安装nrm并切换淘宝源"></a>安装nrm并切换淘宝源</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install nrm -g --registry https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">nrm use taobao</span><br></pre></td></tr></table></figure>

<h2 id="Vscode配置"><a href="#Vscode配置" class="headerlink" title="Vscode配置"></a>Vscode配置</h2><p>必备插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 正则</span><br><span class="line">any-rule</span><br><span class="line"># 自动修改标签</span><br><span class="line">Auto Rename Tag</span><br><span class="line"># 括号带颜色</span><br><span class="line">Bracket Pair Colorizer 2</span><br><span class="line"># Chinese</span><br><span class="line">Chinese</span><br><span class="line"># 颜色高亮</span><br><span class="line">Color Highlight</span><br><span class="line"># ESLint</span><br><span class="line">ESlint</span><br><span class="line"># Git插件</span><br><span class="line">GitLens — Git supercharged</span><br><span class="line"># 路径补充</span><br><span class="line">Path Intellisense</span><br><span class="line"># 主题</span><br><span class="line">vscode-icons</span><br></pre></td></tr></table></figure>

<p>如果是vue同学，再加两个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Vetur</span><br><span class="line">vue-helper</span><br></pre></td></tr></table></figure>

<p>配置项：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// icon主题</span></span><br><span class="line">    <span class="attr">&quot;workbench.iconTheme&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vscode-icons&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 打开页面不预览（不覆盖）</span></span><br><span class="line">    <span class="attr">&quot;workbench.editor.enablePreview&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// eslint自动修复</span></span><br><span class="line">    <span class="attr">&quot;editor.codeActionsOnSave&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;source.fixAll.eslint&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>web环境安装完毕</p>
<h1 id="flutter"><a href="#flutter" class="headerlink" title="flutter"></a>flutter</h1><p>先照着上面的iOS和Android环境安装</p>
<p>然后照着下面的安装</p>
<p><a href="https://juejin.cn/post/6844903937649164301">flutter环境安装</a></p>
<h1 id="react-native"><a href="#react-native" class="headerlink" title="react-native"></a>react-native</h1><p>先安装iOS的开发环境</p>
<p>再安装Android的开发环境</p>
<p>再安装web的开发环境</p>
<p>然后</p>
<h2 id="watchman"><a href="#watchman" class="headerlink" title="watchman"></a>watchman</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 执行终端翻墙，见文章上方介绍的终端翻墙命令</span><br><span class="line">export http_proxy=http://127.0.0.1:1087;export https_proxy=http://127.0.0.1:1087;</span><br><span class="line"></span><br><span class="line">brew install watchman</span><br><span class="line"></span><br><span class="line">npm i yarn -g</span><br></pre></td></tr></table></figure>

<p>react-native 环境安装完毕</p>
<h1 id="java"><a href="#java" class="headerlink" title="java"></a>java</h1><p>就装个jdk</p>
<p>对jdk版本无要求的，可以安装openjdk版本的</p>
<p>例如安装jdk8</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 执行终端翻墙，见文章上方介绍的终端翻墙命令</span><br><span class="line">export http_proxy=http://127.0.0.1:1087;export https_proxy=http://127.0.0.1:1087;</span><br><span class="line"></span><br><span class="line">brew install homebrew/cask-versions/adoptopenjdk8</span><br></pre></td></tr></table></figure>

<p>如果需要安装oracle版本的，可以参考<a href="https://juejin.cn/post/6850418118095798285">mac使用brew安装Java8</a></p>
<p>当然，直接下安装包安装也是ojbk的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 执行终端翻墙，见文章上方介绍的终端翻墙命令</span><br><span class="line">export http_proxy=http://127.0.0.1:1087;export https_proxy=http://127.0.0.1:1087;</span><br><span class="line"></span><br><span class="line">brew install maven</span><br></pre></td></tr></table></figure>
<p>java环境安装完毕</p>
<h1 id="go"><a href="#go" class="headerlink" title="go"></a>go</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 执行终端翻墙，见文章上方介绍的终端翻墙命令</span><br><span class="line">export http_proxy=http://127.0.0.1:1087;export https_proxy=http://127.0.0.1:1087;</span><br><span class="line"></span><br><span class="line">brew install go</span><br></pre></td></tr></table></figure>

<p>go就装好了</p>
<hr>
<p>其实也在探索更加方便的环境安装方式</p>
<p>比如打好一个docker镜像，或者使用写脚本的方式安装</p>
<p>但目前，还是先手动安装吧～～</p>
<h1 id="END"><a href="#END" class="headerlink" title="END"></a>END</h1>]]></content>
      <categories>
        <category>shell</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的微前端之旅（一）——微前端选型</title>
    <url>/2021/02/19/%E6%97%A0%E6%98%9F%E7%9A%84%E5%BE%AE%E5%89%8D%E7%AB%AF%E4%B9%8B%E6%97%85%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%BE%AE%E5%89%8D%E7%AB%AF%E9%80%89%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="微前端是什么"><a href="#微前端是什么" class="headerlink" title="微前端是什么"></a>微前端是什么</h1><p>我觉得没有什么说的必要，可以百度到</p>
<h1 id="微前端能解决什么"><a href="#微前端能解决什么" class="headerlink" title="微前端能解决什么"></a>微前端能解决什么</h1><p>也没有什么必要赘述</p>
<h1 id="微前端能为我们带来什么"><a href="#微前端能为我们带来什么" class="headerlink" title="微前端能为我们带来什么"></a>微前端能为我们带来什么</h1><p>不被时间所淘汰的技术选型！！！</p>
<p><a href="https://www.yuque.com/kuitos/gky7yw/rhduwc">微前端的核心价值</a></p>
<h1 id="选型开始"><a href="#选型开始" class="headerlink" title="选型开始"></a>选型开始</h1><h3 id="备选库"><a href="#备选库" class="headerlink" title="备选库"></a>备选库</h3><p><a href="https://single-spa.js.org/">SingleSpa</a>:可以说“万物基于SingleSpa”，当前流行的大量框架其实是SingleSpa的上层封装。</p>
<p><a href="https://qiankun.umijs.org/">qiankungithub</a>:阿里开源的一套，基于SingleSpa的上层封装，社区活跃。</p>
<p><a href="https://github.com/teambit/bit">bit</a>:当前比较流行的一套</p>
<p><a href="https://webpack.js.org/concepts/module-federation/">webpack5配合Module Federation</a>:是的，没错，webpack5配合Module Federation也能达到相同目的，但是目前资料较少</p>
<p><a href="https://docs.piral.io/guidelines/tutorials/01-introduction">piral</a> |<br><a href="https://frint.js.org/">frint</a> |<br><a href="https://github.com/SAP/luigi">luigi</a> |<br><a href="https://github.com/puzzle-js/puzzle-js">puzzle-js</a></p>
<h3 id="优势说明"><a href="#优势说明" class="headerlink" title="优势说明"></a>优势说明</h3><p>就当前看来，SingleSpa提供给较为基础的api，应用在项目中需要进行大量封装。</p>
<p>qiankun目前生态较好，中文文档齐全，有大量的先行者铺路。</p>
<p>bit生态发展较好，有大量使用者，英文文档齐全，并结合了webpack5的module federation。</p>
<h3 id="选择结果"><a href="#选择结果" class="headerlink" title="选择结果"></a>选择结果</h3><p>这里建议选择qiankun作为框架实践，因为中文文档齐全，且国内生态很好。</p>
<p>接下来就要进行业务开发了，冲！</p>
]]></content>
      <categories>
        <category>微前端</category>
      </categories>
      <tags>
        <tag>微前端</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的微前端之旅（三）——qiankun改造</title>
    <url>/2021/03/20/%E6%97%A0%E6%98%9F%E7%9A%84%E5%BE%AE%E5%89%8D%E7%AB%AF%E4%B9%8B%E6%97%85%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94qiankun%E6%94%B9%E9%80%A0/</url>
    <content><![CDATA[<h1 id="微前端改造"><a href="#微前端改造" class="headerlink" title="微前端改造"></a>微前端改造</h1><p>这里以Vue3为例子，主应用和子应用均使用vue3</p>
<p>路由的话，建议主应用和子应用使用相同模式，即均为history或者均为hash</p>
<p>以下先使用为history模式讲解，最后会写如何使用hash模式。</p>
<hr>
<h1 id="History模式"><a href="#History模式" class="headerlink" title="History模式"></a>History模式</h1><h1 id="主应用改造"><a href="#主应用改造" class="headerlink" title="主应用改造"></a>主应用改造</h1><p>一般情况下，我们会将带导航的<code>layout</code>的部分，直接放在主应用中。当然不是说不能拆，是能拆的，因为导航的<code>layout</code>明显是个路由不敏感部分，完全可以拆解为单独的子应用。</p>
<h2 id="1-添加qiankun"><a href="#1-添加qiankun" class="headerlink" title="1.添加qiankun"></a>1.添加qiankun</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add qiankun</span><br></pre></td></tr></table></figure>

<h2 id="2-vue-config-js"><a href="#2-vue-config-js" class="headerlink" title="2.vue.config.js"></a>2.vue.config.js</h2><p>其实没什么要改的，但我这还是建议把这两个加上</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">publicPath</span>: <span class="string">&#x27;/main/&#x27;</span>,</span><br><span class="line">  <span class="comment">// 修改打包名</span></span><br><span class="line">  <span class="attr">outputDir</span>: <span class="string">&#x27;main&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="3-router-js"><a href="#3-router-js" class="headerlink" title="3.router.js"></a>3.router.js</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="comment">// 这里就是publicPath了</span></span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(process.<span class="property">env</span>.<span class="property">BASE_URL</span>),</span><br><span class="line">  routes,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure>

<h2 id="4-加载微应用的改造，可以在src下建一个micro目录"><a href="#4-加载微应用的改造，可以在src下建一个micro目录" class="headerlink" title="4.加载微应用的改造，可以在src下建一个micro目录"></a>4.加载微应用的改造，可以在src下建一个micro目录</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|----index.js     //注册</span><br><span class="line">|----store.js     //应用间通信</span><br><span class="line">|----subapps.js   //配置信息</span><br></pre></td></tr></table></figure>

<h3 id="4-1-index-js"><a href="#4-1-index-js" class="headerlink" title="4.1 index.js"></a>4.1 index.js</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; registerMicroApps &#125; <span class="keyword">from</span> <span class="string">&#x27;qiankun&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> subapps <span class="keyword">from</span> <span class="string">&#x27;./subapps&#x27;</span>;</span><br><span class="line"><span class="comment">// 判断是否以某字符串开头</span></span><br><span class="line"><span class="comment">// 注册并加载</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">register</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 注册微应用</span></span><br><span class="line">  <span class="title function_">registerMicroApps</span>(subapps, &#123;</span><br><span class="line">    <span class="attr">beforeLoad</span>: <span class="function">(<span class="params">app</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;before load&#x27;</span>, app.<span class="property">name</span>),</span><br><span class="line">    <span class="attr">beforeMount</span>: [</span><br><span class="line">      <span class="function">(<span class="params">app</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;before mount&#x27;</span>, app.<span class="property">name</span>),</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">afterMount</span>: [</span><br><span class="line">      <span class="function">(<span class="params">app</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;before mount&#x27;</span>, app.<span class="property">name</span>),</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">beforeUnmount</span>: [</span><br><span class="line">      <span class="function">(<span class="params">app</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;before mount&#x27;</span>, app.<span class="property">name</span>),</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">afterUnmount</span>: [</span><br><span class="line">      <span class="function">(<span class="params">app</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;before mount&#x27;</span>, app.<span class="property">name</span>),</span><br><span class="line">    ],</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> register;</span><br></pre></td></tr></table></figure>
<h3 id="4-2-store-js"><a href="#4-2-store-js" class="headerlink" title="4.2 store.js"></a>4.2 store.js</h3><p>应用间通信，qiankun提供了一个简单的api<code>initGlobalState</code></p>
<p>但是这玩意不是“响应式”的，换句话说，它改变不会引起页面变化。</p>
<p>得益于vue3提供的<code>reactive</code>，我们可以很方便的构造一个响应式。<br>（同时也因为非常方便，所以也有很多大佬喊出了不再需要vuex，建议搜搜看，很有意思，当然这是题外话。）</p>
<p>并将这个响应式用于页面展示。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 应用间通信</span></span><br><span class="line"><span class="keyword">import</span> &#123; initGlobalState &#125; <span class="keyword">from</span> <span class="string">&#x27;qiankun&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化state,加reative使其变为响应式</span></span><br><span class="line"><span class="keyword">const</span> initialState = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">token</span>: <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = <span class="title function_">initGlobalState</span>(initialState);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听全局变化</span></span><br><span class="line">actions.<span class="title function_">onGlobalStateChange</span>(<span class="function">(<span class="params">newState, oldState</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;主应用监听&#x27;</span>, <span class="string">&#x27;变化前&#x27;</span>, oldState, <span class="string">&#x27;变化后&#x27;</span>, newState);</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">keys</span>(newState).<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">    initialState[key] = newState[key];</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取globalState</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getGlobalState</span>(<span class="params">key</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> key ? initialState[key] : initialState;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新通知所有微应用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setGlobalState</span>(<span class="params">globalState</span>) &#123;</span><br><span class="line">  actions.<span class="title function_">setGlobalState</span>(globalState);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 卸载全局变化</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">offGlobalStateChange</span>(<span class="params"></span>) &#123;</span><br><span class="line">  actions.<span class="title function_">offGlobalStateChange</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  actions,</span><br><span class="line">  getGlobalState,</span><br><span class="line">  setGlobalState,</span><br><span class="line">  offGlobalStateChange,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="4-2-subapps-js"><a href="#4-2-subapps-js" class="headerlink" title="4.2 subapps.js"></a>4.2 subapps.js</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;@/router/index&#x27;</span>;</span><br><span class="line"><span class="comment">// 此时在开发，测试环境，理论上已经挂载了subapps的入口</span></span><br><span class="line"><span class="keyword">const</span> baseUrl = process.<span class="property">env</span>.<span class="property">BASE_URL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> subapps = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;sub-login&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>: process.<span class="property">env</span>.<span class="property">VUE_APP_SUB_LOGIN</span>,</span><br><span class="line">    <span class="attr">container</span>: <span class="string">&#x27;#sub-apps&#x27;</span>,</span><br><span class="line">    <span class="attr">activeRule</span>: <span class="string">`<span class="subst">$&#123;baseUrl&#125;</span>sub-login`</span>,</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">      <span class="attr">routeBasePath</span>: <span class="string">&#x27;/sub-login&#x27;</span>,</span><br><span class="line">      <span class="attr">mainRouter</span>: router,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;sub-user-manage&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>: process.<span class="property">env</span>.<span class="property">VUE_APP_SUB_USER_MANAGE</span>,</span><br><span class="line">    <span class="attr">container</span>: <span class="string">&#x27;#sub-apps&#x27;</span>,</span><br><span class="line">    <span class="attr">activeRule</span>: <span class="string">`<span class="subst">$&#123;baseUrl&#125;</span>sub-user-manage`</span>,</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">      <span class="attr">routeBasePath</span>: <span class="string">&#x27;/sub-user-manage&#x27;</span>,</span><br><span class="line">      <span class="attr">mainRouter</span>: router,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> subapps;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>name，entry，container，activeRule</p>
<p>在第上一篇已经介绍过了</p>
<p>这里多了一个props，props意思是给子应用获取的对象，意味着有些东西，可以从主应用往下传递给子应用。这里我传递了两个值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">routeBasePath：子应用的路由地址前缀，在history模式下用于填写子应用的basepath，非常有用</span><br><span class="line"></span><br><span class="line">mainRouter：主应用的router，在history模式下应用间跳转非常有用</span><br></pre></td></tr></table></figure>
<p>这个东西我们还可以做点有意思的操作，比如:<a href="https://blog.xingxiaowu.cn/2021/03/20/%E6%97%A0%E6%98%9F%E7%9A%84%E5%BE%AE%E5%89%8D%E7%AB%AF%E4%B9%8B%E6%97%85%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94qiankun%E7%BA%BF%E4%B8%8A%E6%9C%8D%E5%8A%A1%E4%BB%A3%E7%90%86%E5%88%B0%E6%9C%AC%E5%9C%B0/">无星的微前端之旅（四）——qiankun线上服务代理到本地</a></p>
<h2 id="5-提供挂载节点-sub-apps"><a href="#5-提供挂载节点-sub-apps" class="headerlink" title="5.提供挂载节点#sub-apps"></a>5.提供挂载节点#sub-apps</h2><p>我们在路由定义中，把所有子应用的components都匹配到一个View中。</p>
<p>这个没什么写代码的意义，截个图直接掠过。</p>
<p><img src="/images/qiankun3/1.png" alt="1"></p>
<p>这个view提供一个dom节点用于后续挂载和启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;sub-apps&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Actions from &#x27;@/micro/store&#x27;;</span><br><span class="line">import &#123;</span><br><span class="line">  defineComponent, onMounted, onUnmounted,</span><br><span class="line">&#125; from &#x27;vue&#x27;;</span><br><span class="line">import &#123; start &#125; from &#x27;qiankun&#x27;;</span><br><span class="line"></span><br><span class="line">export default defineComponent(&#123;</span><br><span class="line">  name: &#x27;SubApps&#x27;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    </span><br><span class="line">    onMounted(async () =&gt; &#123;</span><br><span class="line">      console.log(&#x27;Subapps页面加载&#x27;);</span><br><span class="line">      if (!window.qiankunStarted) &#123;</span><br><span class="line">        window.qiankunStarted = true;</span><br><span class="line">        start();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    onUnmounted(() =&gt; &#123;</span><br><span class="line">      if (window.qiankunStarted) &#123;</span><br><span class="line">        window.qiankunStarted = false;</span><br><span class="line">        Actions.offGlobalStateChange();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    return &#123;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;less&quot;&gt;</span><br><span class="line">#sub-apps &#123;</span><br><span class="line">  height: 100%;</span><br><span class="line">  &gt;div:first-child &#123;</span><br><span class="line">    height: 100%;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><a href="https://qiankun.umijs.org/zh/faq#%E5%A6%82%E4%BD%95%E5%9C%A8%E4%B8%BB%E5%BA%94%E7%94%A8%E7%9A%84%E6%9F%90%E4%B8%AA%E8%B7%AF%E7%94%B1%E9%A1%B5%E9%9D%A2%E5%8A%A0%E8%BD%BD%E5%BE%AE%E5%BA%94%E7%94%A8">如何在主应用的某个路由页面加载微应用</a></p>
<p>这里有一个需要注意的点。不是js代码，而是css。</p>
<p>主应用加载子应用的时候，会新增一个qiankun的div盒子，可能这个盒子会影响样式，导致撑不开。所以需要使用css选择器让qiankun注入的盒子加一些css进行改变以达到预期效果。</p>
<p><img src="/images/qiankun2/1.png" alt="1"></p>
<h2 id="6-main-js修改"><a href="#6-main-js修改" class="headerlink" title="6.main.js修改"></a>6.main.js修改</h2><p>改造前：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认生成的main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">use</span>(store).<span class="title function_">use</span>(router).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>改造后：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span>;</span><br><span class="line"><span class="comment">// 注册</span></span><br><span class="line"><span class="keyword">import</span> register <span class="keyword">from</span> <span class="string">&#x27;./micro/index&#x27;</span>;</span><br><span class="line"><span class="comment">// 添加全局通信</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@/micro/store&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">use</span>(store).<span class="title function_">use</span>(router).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br><span class="line"><span class="comment">// 注册</span></span><br><span class="line"><span class="title function_">register</span>();</span><br></pre></td></tr></table></figure>

<p>到此为止，主应用改造完毕。</p>
<hr>
<h1 id="子应用改造"><a href="#子应用改造" class="headerlink" title="子应用改造"></a>子应用改造</h1><h2 id="1-vue-config-js添加核心配置"><a href="#1-vue-config-js添加核心配置" class="headerlink" title="1.vue.config.js添加核心配置"></a>1.vue.config.js添加核心配置</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> packageName = <span class="built_in">require</span>(<span class="string">&#x27;./package.json&#x27;</span>).<span class="property">name</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="comment">// 先写为/，后续会修改</span></span><br><span class="line">  <span class="attr">publicPath</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line"><span class="comment">//   输出目录重命名为项目名称，方便后期部署</span></span><br><span class="line">  <span class="attr">outputDir</span>: packageName,</span><br><span class="line"><span class="comment">// 来自qiankun文档的修改</span></span><br><span class="line">  <span class="attr">configureWebpack</span>: &#123;</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">      <span class="attr">library</span>: <span class="string">`<span class="subst">$&#123;packageName&#125;</span>-[name]`</span>,</span><br><span class="line">      <span class="attr">libraryTarget</span>: <span class="string">&#x27;umd&#x27;</span>,</span><br><span class="line">      <span class="attr">jsonpFunction</span>: <span class="string">`webpackJsonp_<span class="subst">$&#123;packageName&#125;</span>`</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 建议添加端口，不同模块加载不同端口，方便开发制定加载</span></span><br><span class="line">    <span class="attr">port</span>: <span class="number">3001</span>,</span><br><span class="line">    <span class="comment">// 必须添加，qiankun需要支持跨域</span></span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="2-添加public-path"><a href="#2-添加public-path" class="headerlink" title="2.添加public-path"></a>2.添加<a href="https://qiankun.umijs.org/zh/guide/tutorial#%E5%BE%AE%E5%BA%94%E7%94%A8">public-path</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (window.__POWERED_BY_QIANKUN__) &#123;</span><br><span class="line">  __webpack_public_path__ = window.__INJECTED_PUBLIC_PATH_BY_QIANKUN__;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>它的作用，点击标题查看文档</p>
<h2 id="3-src文件夹下新建一个micro-store-js，用于应用间通信相关"><a href="#3-src文件夹下新建一个micro-store-js，用于应用间通信相关" class="headerlink" title="3.src文件夹下新建一个micro/store.js，用于应用间通信相关"></a>3.src文件夹下新建一个micro/store.js，用于应用间通信相关</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局数据store</span></span><br><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> actions = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">const</span> initialState = <span class="title function_">reactive</span>(&#123;&#125;);</span><br><span class="line"><span class="keyword">let</span> routeBasePath = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setActions</span>(<span class="params">tmpActions</span>) &#123;</span><br><span class="line">  <span class="comment">// 如果有兴趣，还可以把这里的初始化和vuex关联起来</span></span><br><span class="line">  actions = tmpActions;</span><br><span class="line">  actions.<span class="title function_">onGlobalStateChange</span>(<span class="function">(<span class="params">newState, oldState</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;子应用监听&#x27;</span>, <span class="string">&#x27;变化前&#x27;</span>, oldState, <span class="string">&#x27;变化后&#x27;</span>, newState);</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(newState).<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">      initialState[key] = newState[key];</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setGlobalState</span>(<span class="params">state</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> actions.<span class="title function_">setGlobalState</span>(state);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getActions</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> actions;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getGlobalState</span>(<span class="params">key</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> key ? initialState[key] : initialState;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 基础数据</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setRouteBasePath</span>(<span class="params">path</span>) &#123;</span><br><span class="line">  routeBasePath = path;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 基础数据</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getRouteBasePath</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> routeBasePath;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  setActions,</span><br><span class="line">  getActions,</span><br><span class="line">  setGlobalState,</span><br><span class="line">  getGlobalState,</span><br><span class="line">  setRouteBasePath,</span><br><span class="line">  getRouteBasePath,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="4-router改造"><a href="#4-router改造" class="headerlink" title="4.router改造"></a>4.router改造</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Actions</span> <span class="keyword">from</span> <span class="string">&#x27;@/micro/store&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Login&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../views/Login/index.vue&#x27;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/register&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Register&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../views/Register/index.vue&#x27;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/config&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Config&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../views/Config/index.vue&#x27;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">setupRouter</span> = (<span class="params"></span>) =&gt; <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="comment">// 获取来自主应用的前缀</span></span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(<span class="title class_">Actions</span>.<span class="title function_">getRouteBasePath</span>()),</span><br><span class="line">  routes,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> setupRouter;</span><br></pre></td></tr></table></figure>

<h2 id="5-main-js改造"><a href="#5-main-js改造" class="headerlink" title="5.main.js改造"></a>5.main.js改造</h2><p>改造前：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认生成的main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">use</span>(store).<span class="title function_">use</span>(router).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>改造后：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注意哦，这一行引入不要忘记了，要加载最上面</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./public-path&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Actions</span> <span class="keyword">from</span> <span class="string">&#x27;@/micro/store&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> setupRouter <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> instance = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> router = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">props = &#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; container, routeBasePath, mainRouter &#125; = props;</span><br><span class="line">  <span class="comment">// 这里需要注意，往下注入的必须和子打包配置一致</span></span><br><span class="line">  <span class="title class_">Actions</span>.<span class="title function_">setRouteBasePath</span>(routeBasePath || process.<span class="property">env</span>.<span class="property">BASE_URL</span>);</span><br><span class="line">  router = <span class="title function_">setupRouter</span>();</span><br><span class="line">  instance = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line">  instance.<span class="title function_">use</span>(router);</span><br><span class="line">  instance.<span class="title function_">use</span>(store);</span><br><span class="line"></span><br><span class="line">  router.<span class="title function_">isReady</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    instance.<span class="title function_">mount</span>(container ? container.<span class="title function_">querySelector</span>(<span class="string">&#x27;#app&#x27;</span>) : <span class="string">&#x27;#app&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable language_">window</span>.<span class="property">__POWERED_BY_QIANKUN__</span>) &#123;</span><br><span class="line">  <span class="comment">// 如果是非乾坤访问，意思是子应用单独访问</span></span><br><span class="line">  <span class="title function_">render</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">bootstrap</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;%c &#x27;</span>, <span class="string">&#x27;color: green;&#x27;</span>, <span class="string">&#x27;vue3.0 app bootstraped&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">mount</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="comment">// 获取props中的全局通信</span></span><br><span class="line">  <span class="title class_">Actions</span>.<span class="title function_">setActions</span>(props);</span><br><span class="line">  <span class="comment">// 只有从qiankun访问，才会到这个生命周期</span></span><br><span class="line">  <span class="title function_">render</span>(props);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">unmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 这里千万不要忘记置空！！！！</span></span><br><span class="line">  instance.<span class="title function_">unmount</span>();</span><br><span class="line">  instance.<span class="property">_container</span>.<span class="property">innerHTML</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  instance = <span class="literal">null</span>;</span><br><span class="line">  router = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>好了，子应用到此就改造完毕了。</p>
<hr>
<h1 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h1><p>如果是hash模式，那么需要变动的地方就比较多了</p>
<h1 id="1-主应用和子应用中vue-config-js全部修改为"><a href="#1-主应用和子应用中vue-config-js全部修改为" class="headerlink" title="1.主应用和子应用中vue.config.js全部修改为"></a>1.主应用和子应用中vue.config.js全部修改为</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">publicPath</span>: <span class="string">&#x27;./&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="2-主应用和子应用中router修改为"><a href="#2-主应用和子应用中router修改为" class="headerlink" title="2.主应用和子应用中router修改为"></a>2.主应用和子应用中router修改为</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">setupRouter</span> = (<span class="params"></span>) =&gt; <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">  routes,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="3-主应用subapps-js修改为"><a href="#3-主应用subapps-js修改为" class="headerlink" title="3.主应用subapps.js修改为"></a>3.主应用subapps.js修改为</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;@/router/index&#x27;</span>;</span><br><span class="line"><span class="comment">// 此时在开发，测试环境，理论上已经挂载了subapps的入口</span></span><br><span class="line"><span class="keyword">const</span> baseUrl = <span class="string">&#x27;#/&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getActiveRule</span> = (<span class="params">hash</span>) =&gt; <span class="function">(<span class="params">location</span>) =&gt;</span> location.<span class="property">hash</span>.<span class="title function_">startsWith</span>(hash);</span><br><span class="line"><span class="keyword">const</span> subapps = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;sub-login&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>: process.<span class="property">env</span>.<span class="property">VUE_APP_SUB_LOGIN</span>,</span><br><span class="line">    <span class="attr">container</span>: <span class="string">&#x27;#sub-apps&#x27;</span>,</span><br><span class="line">    <span class="attr">activeRule</span>: <span class="title function_">getActiveRule</span>(<span class="string">`<span class="subst">$&#123;baseUrl&#125;</span>sub-login`</span>),</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">      <span class="attr">routeBasePath</span>: <span class="string">&#x27;/sub-login&#x27;</span>,</span><br><span class="line">      <span class="attr">mainRouter</span>: router,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;sub-user-manage&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>: process.<span class="property">env</span>.<span class="property">VUE_APP_SUB_USER_MANAGE</span>,</span><br><span class="line">    <span class="attr">container</span>: <span class="string">&#x27;#sub-apps&#x27;</span>,</span><br><span class="line">    <span class="attr">activeRule</span>: <span class="title function_">getActiveRule</span>(<span class="string">`<span class="subst">$&#123;baseUrl&#125;</span>sub-login`</span>),</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">      <span class="attr">routeBasePath</span>: <span class="string">&#x27;/sub-user-manage&#x27;</span>,</span><br><span class="line">      <span class="attr">mainRouter</span>: router,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> subapps;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>修改完毕。</p>
<p>至此，主应用和子应用均修改完毕。</p>
]]></content>
      <categories>
        <category>微前端</category>
      </categories>
      <tags>
        <tag>微前端</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的微前端之旅（二）—— qiankun的一些预知项</title>
    <url>/2021/02/19/%E6%97%A0%E6%98%9F%E7%9A%84%E5%BE%AE%E5%89%8D%E7%AB%AF%E4%B9%8B%E6%97%85%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%20qiankun%E5%81%9A%E4%BA%86%E5%95%A5/</url>
    <content><![CDATA[<p>这里是一些很浅很浅的东西，大佬们不要喷我=。=。</p>
<p>qiankun将应用分为两种：主应用，微（子）应用</p>
<h1 id="一-主应用是一个基座"><a href="#一-主应用是一个基座" class="headerlink" title="一.主应用是一个基座"></a>一.主应用是一个基座</h1><p>主应用是一个基座，承载着各个子应用。</p>
<p>主应用负责各个应用之间的加载，通信和调度。</p>
<p>带🔥都说，这是微服务在前端的应用，不过我没做过服务端，对微服务不是很了解，因此不敢乱说。</p>
<p>我只做过客户端，从客户端的角度来看，这看上去就类似于iOS的组件化。将模块解耦后，通过主工程进行加载调用。这样一来有客户端背景的同学是不是就比较好理解了。</p>
<h1 id="二-主应用通过注册好的配置表，去分别加载各自子应用的资源。"><a href="#二-主应用通过注册好的配置表，去分别加载各自子应用的资源。" class="headerlink" title="二.主应用通过注册好的配置表，去分别加载各自子应用的资源。"></a>二.主应用通过注册好的<a href="https://qiankun.umijs.org/zh/guide/tutorial#%E4%B8%BB%E5%BA%94%E7%94%A8">配置表</a>，去分别加载各自子应用的资源。</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; registerMicroApps, start &#125; <span class="keyword">from</span> <span class="string">&#x27;qiankun&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">registerMicroApps</span>([</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//   子应用的名称，需要唯一</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;reactApp&#x27;</span>,</span><br><span class="line">    <span class="comment">//   需要加载资源的地址</span></span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;//localhost:3000&#x27;</span>,</span><br><span class="line">    <span class="comment">// 用于替换dom的id</span></span><br><span class="line">    <span class="attr">container</span>: <span class="string">&#x27;#container&#x27;</span>,</span><br><span class="line">    <span class="comment">// 激活规则</span></span><br><span class="line">    <span class="attr">activeRule</span>: <span class="string">&#x27;/app-react&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;vueApp&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;//localhost:8080&#x27;</span>,</span><br><span class="line">    <span class="attr">container</span>: <span class="string">&#x27;#container&#x27;</span>,</span><br><span class="line">    <span class="attr">activeRule</span>: <span class="string">&#x27;/app-vue&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;angularApp&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;//localhost:4200&#x27;</span>,</span><br><span class="line">    <span class="attr">container</span>: <span class="string">&#x27;#container&#x27;</span>,</span><br><span class="line">    <span class="attr">activeRule</span>: <span class="string">&#x27;/app-angular&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">]);</span><br><span class="line"><span class="comment">// 启动 qiankun</span></span><br><span class="line"><span class="title function_">start</span>();</span><br></pre></td></tr></table></figure>

<p>这里可以看到两步：注册，启动</p>
<p>换句话说，注册和启动是可以分开的。</p>
<p>并且本身<a href="https://qiankun.umijs.org/zh/api#%E6%89%8B%E5%8A%A8%E5%8A%A0%E8%BD%BD%E5%BE%AE%E5%BA%94%E7%94%A8">手动加载loadMicroApp</a></p>
<p>这意味着，配置表可以从远端请求下来，进行动态修改，这就能做一些非常有意思的操作了[旺柴]:比如:<a href="https://blog.xingxiaowu.cn/2021/03/20/%E6%97%A0%E6%98%9F%E7%9A%84%E5%BE%AE%E5%89%8D%E7%AB%AF%E4%B9%8B%E6%97%85%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94qiankun%E7%BA%BF%E4%B8%8A%E6%9C%8D%E5%8A%A1%E4%BB%A3%E7%90%86%E5%88%B0%E6%9C%AC%E5%9C%B0/">无星的微前端之旅（四）——qiankun线上服务代理到本地</a></p>
<h1 id="三-entry"><a href="#三-entry" class="headerlink" title="三.entry"></a>三.entry</h1><p>entry虽然写的是一个地址，但实际上</p>
<p>指向的应该是具体的html！</p>
<p>指向的应该是具体的html！</p>
<p>指向的应该是具体的html！</p>
<p>重要的话说三遍</p>
<p>本地开发的时候，//localhost:3000 其实就是加载public文件夹中的html了。</p>
<p>而配置nginx上线的时候，一般都会加上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    root xxxx/xxx/;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其实指向的就是html。</p>
<p>因为无论是开发还是打包，spa类型项目都是加载html，html再去加载js，然后再来接管前端路由的。</p>
<h3 id="为什么要强调这个？"><a href="#为什么要强调这个？" class="headerlink" title="为什么要强调这个？"></a>为什么要强调这个？</h3><p>因为可能在某些场景下，不让配置nginx。</p>
<p>比如，将前端产物放到springboot的静态文件夹里上线，这种时候你可能就不知道这里填啥了，这里填子应用对应的html地址就行。</p>
<h1 id="container"><a href="#container" class="headerlink" title="container"></a>container</h1><p>微应用的容器节点的选择器或者 Element 实例。</p>
<p>其dom节点内会被插入一个dom节点，用于展示子应用的html内容。</p>
<p>如下图，sub-apps是主应用提供的dom节点</p>
<p><img src="/images/qiankun2/1.png" alt="1"><br><img src="/images/qiankun2/2.png" alt="2"></p>
<p>这意味这，如果你的某些子应用是路由不敏感的，配合activeRule完全可以同屏展示。</p>
<p>同时，另一方面，一些需要通过cdn引入的资源依赖，只需要在主应用引入即可，子应用不需要再引入，比如阿里的iconfont等。</p>
<p>如果子应用有单独访问的需求，可以在script标签添加一个<code>ignore</code>属性。这样主应用访问的时候，就不会引入两次。公共依赖处理等，都可以使用这种方式，详细可以往下看<code>五.公共依赖相关</code>。</p>
<h1 id="activeRule"><a href="#activeRule" class="headerlink" title="activeRule"></a>activeRule</h1><p>这就是子应用的激活规则。</p>
<p>别看大量的demo中这里填写的都是路由地址，你就认为这里写的是路由。</p>
<p>其实不然，它只表示激活规则，具体请看<a href="https://qiankun.umijs.org/zh/api#registermicroappsapps-lifecycles">文档</a></p>
<p>这意味这，如果使用function，返回true，配合不同的container，就能同时激活两个子应用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一般情况下，最佳实践，仍然是使用子应用的packagename作为前缀来制定路由激活规则，方便部署，也方便划分。</span><br></pre></td></tr></table></figure>

<p>另外使用hash路由，需要注意，path前面需要加上#/，并且最好加上如下方法，而不要直接使用string</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const getActiveRule = (hash) =&gt; (location) =&gt; location.hash.startsWith(hash);</span><br></pre></td></tr></table></figure>

<p>例如，有个子应用使用hash路由，前缀为sub-login，则写法如下，以避免某些情况下路由正确却不激活子应用，<a href="https://qiankun.umijs.org/zh/cookbook#activerule-%E4%BD%BF%E7%94%A8-locationhash-%E5%8C%BA%E5%88%86%E5%BE%AE%E5%BA%94%E7%94%A8">文档</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  name: &#x27;sub-login&#x27;,</span><br><span class="line">  entry: &#x27;//xxx&#x27;,</span><br><span class="line">  container: &#x27;#container&#x27;,</span><br><span class="line">   activeRule: getActiveRule(&#x27;#/sub-login&#x27;),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h1 id="四-子应用的js加载后怎么执行的"><a href="#四-子应用的js加载后怎么执行的" class="headerlink" title="四.子应用的js加载后怎么执行的"></a>四.子应用的js加载后怎么执行的</h1><p>请求到子应用以后，通过eval直接执行子应用代码。这个大家起一个子应用，然后打个断点，在浏览器中断点滚到最上面就能看到eval的包裹了。</p>
<h1 id="五-公共依赖相关"><a href="#五-公共依赖相关" class="headerlink" title="五.公共依赖相关"></a>五.公共依赖相关</h1><p>其实在我司的项目中，并没有做对应处理，但是也了解了一下相关的。</p>
<p>首先说这种微前端的设计预期：既然最大的价值是技术栈无关，那么还要做公共依赖，自然是不符合原本的设计预期的。</p>
<p>当然，也不是不能做。</p>
<p>结合实现方式分析一下，主应用本身是基座，那么主应用的依赖，必定是全部会被加载的，那么公共依赖，应当是加载主应用的依赖以后，就不需要加载子应用的了。</p>
<p>所以如果有相同依赖的情况下，子应用只需要打包的时候剔除，在主应用加载子应用的时候，子应用其实就能读到相同依赖。</p>
<h2 id="但是这时候需要考虑另一个问题：子应用独立运行访问。"><a href="#但是这时候需要考虑另一个问题：子应用独立运行访问。" class="headerlink" title="但是这时候需要考虑另一个问题：子应用独立运行访问。"></a>但是这时候需要考虑另一个问题：子应用独立运行访问。</h2><p>考虑到上述html的加载，实际上是把子应用的html内容加载到主应用的容器节点下，那意味着，如果子应用使用script标签做cdn加载，就能在子应用独立访问时，能够获取到对应依赖。</p>
<p>但是这样，前面的剔除操作不就白做了吗？我们需要对cdn加载的script标签添加一个<code>ignore</code>属性，这样在主应用中，就依然不会加载该资源了。</p>
<p>来自<a href="https://github.com/umijs/qiankun/issues/1260#issuecomment-774644038">issuse</a>。</p>
<hr>
<p>沙箱和css隔离我暂时还没有用到，所以没有什么要写的。</p>
]]></content>
      <categories>
        <category>微前端</category>
      </categories>
      <tags>
        <tag>微前端</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的微前端之旅（五）——qiankun遇到的一些坑</title>
    <url>/2021/03/20/%E6%97%A0%E6%98%9F%E7%9A%84%E5%BE%AE%E5%89%8D%E7%AB%AF%E4%B9%8B%E6%97%85%EF%BC%88%E4%BA%94%EF%BC%89%E2%80%94%E2%80%94qiankun%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/</url>
    <content><![CDATA[<h1 id="Vue3的router问题"><a href="#Vue3的router问题" class="headerlink" title="Vue3的router问题"></a>Vue3的router问题</h1><p>其实严格来说，这不是qiankun的问题，是vue-router4.x的问题。</p>
<p>解决方案：history模式使用<code>window.history</code>跳转，hash模式主应用添加<code>hashchange</code>事件发送</p>
<p>详情见<a href="https://github.com/umijs/qiankun/issues/1280">issues1280</a></p>
<h1 id="旧的jq项目改造，发现属性和方法丢失"><a href="#旧的jq项目改造，发现属性和方法丢失" class="headerlink" title="旧的jq项目改造，发现属性和方法丢失"></a>旧的jq项目改造，发现属性和方法丢失</h1><p>子应用包含多个script，其中有些是公共方法，其他js使用的时候提示找不到方法</p>
<p>解决方案：需要显式挂载到window</p>
<p>详情见<a href="https://github.com/umijs/qiankun/issues/1272">issues1272</a></p>
<h1 id="qiankun添加的div撑不满外部盒子"><a href="#qiankun添加的div撑不满外部盒子" class="headerlink" title="qiankun添加的div撑不满外部盒子"></a>qiankun添加的div撑不满外部盒子</h1><p>使用css选择器为qiankun添加的div加样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#sub-apps</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  &gt;<span class="selector-tag">div</span><span class="selector-pseudo">:first</span>-child &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="hash模式下无法激活子应用"><a href="#hash模式下无法激活子应用" class="headerlink" title="hash模式下无法激活子应用"></a>hash模式下无法激活子应用</h1><p>添加方法getActiveRule</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const getActiveRule = (hash) =&gt; (location) =&gt; location.hash.startsWith(hash);</span><br></pre></td></tr></table></figure>

<h1 id="子应用的接口devServer代理不生效"><a href="#子应用的接口devServer代理不生效" class="headerlink" title="子应用的接口devServer代理不生效"></a>子应用的接口devServer代理不生效</h1><p>这是合理的，因为所有js代码都会被主应用加载并通过eval执行，所以代理是不生效的，实际上会走主应用中devServer的代理。</p>
<p><del>那么能不能让各自走各自的devServer代理呢，答案是能。（要命了，我记得我看到过有一篇文章给了解决方案，但我忘记是哪一篇了。刚刚找了一圈没找到TAT）</del></p>
]]></content>
      <categories>
        <category>微前端</category>
      </categories>
      <tags>
        <tag>微前端</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的微前端之旅（六）——qiankun部署篇</title>
    <url>/2021/04/20/%E6%97%A0%E6%98%9F%E7%9A%84%E5%BE%AE%E5%89%8D%E7%AB%AF%E4%B9%8B%E6%97%85%EF%BC%88%E5%85%AD%EF%BC%89%E2%80%94%E2%80%94qiankun%E9%83%A8%E7%BD%B2%E7%AF%87/</url>
    <content><![CDATA[<p>部署也是根据不同的路由模式进行不同情况部署</p>
<p>假设主应用和子应用使用相同模式的路由</p>
<p>不是说使用不同路由不行，而是没那个必要去增加复杂性</p>
<p>我们以本机模拟服务器部署情况</p>
<p><img src="/images/qiankun6/1.png" alt="1.image"></p>
<p>如上图，我打包好了两份代码，分别位于<code>deploy</code>和<code>deployhash</code>文件夹</p>
<p>deploy文件夹内放置的是<code>history</code>模式的产物</p>
<p>deployhash文件夹内放置的是<code>hash</code>模式的产物</p>
<p>两个文件夹内的文件结构是一模一样的，这个图我们叫它<code>图1</code>，等哈记得回头来看</p>
<hr>
<p>—我是分割线—-</p>
<p>如果选择history模式，子应用需要修改publicPath和routerBasePath，这个不要忘记了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">publicPath</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span> ? <span class="string">`/subapps/<span class="subst">$&#123;packageName&#125;</span>`</span> : <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// router.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">setupRouter</span> = (<span class="params"></span>) =&gt; <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="comment">// routeBasePath是我在主应用传递下来的，这里就省略不写了，总之routerBasePath记得写就行了</span></span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(routeBasePath || process.<span class="property">env</span>.<span class="property">BASE_URL</span>),</span><br><span class="line">  routes,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>—我是分割线—-</p>
<hr>
<p>接下来，我们配置nginx</p>
<p>分别做出两种配置（是的，发现没有，他两除了try_files其实一模一样）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># history应用</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen 7777;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    <span class="comment"># 主应用</span></span><br><span class="line">    location / &#123;</span><br><span class="line">        root /Users/xing.wu/Desktop/deploy/main; </span><br><span class="line">        index index.html index.htm;</span><br><span class="line">        try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 子应用</span></span><br><span class="line">    location /subapps &#123;</span><br><span class="line">        root /Users/xing.wu/Desktop/deploy; </span><br><span class="line">        try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># hash应用</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen 9999;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    <span class="comment"># 主应用</span></span><br><span class="line">    location / &#123;</span><br><span class="line">        root /Users/xing.wu/Desktop/deployhash/main; </span><br><span class="line">        index index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 子应用</span></span><br><span class="line">    location /subapps &#123;</span><br><span class="line">        root /Users/xing.wu/Desktop/deployhash;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接着我们配置需要加载的子应用入口</p>
<p>我是把入口写在了vue的mode文件中区分加载环境</p>
<p>所以这里我就直接写关键的环境文件内容了</p>
<p>（其实两种路由的history配置文件也可以相同，无非是nginx配置了默认访问文件index.html，history可以少写一个index.html）</p>
<p><code>history</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">VUE_APP_SUB_LOGIN=/subapps/sub-login/</span><br><span class="line">VUE_APP_SUB_DOCTOR_MANAGE=/subapps/sub-doctor-manage/</span><br><span class="line">VUE_APP_SUB_DEPARTMENT_SIGN_MANAGE=/subapps/sub-department-sign-manage/</span><br><span class="line">VUE_APP_SUB_BASIC_INFO_MANAGE=/subapps/sub-basic-info-manage/</span><br><span class="line">VUE_APP_SUB_NETWORK_MANAGE=/subapps/sub-network-manage/</span><br><span class="line">VUE_APP_SUB_SIGNATURE_MANAGE=/subapps/sub-signature-manage/</span><br><span class="line">VUE_APP_SUB_USER_MANAGE=/subapps/sub-user-manage/</span><br></pre></td></tr></table></figure>
<p><code>hash</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">VUE_APP_SUB_LOGIN=/subapps/sub-login/index.html</span><br><span class="line">VUE_APP_SUB_DOCTOR_MANAGE=/subapps/sub-doctor-manage/index.html</span><br><span class="line">VUE_APP_SUB_DEPARTMENT_SIGN_MANAGE=/subapps/sub-department-sign-manage/index.html</span><br><span class="line">VUE_APP_SUB_BASIC_INFO_MANAGE=/subapps/sub-basic-info-manage/index.html</span><br><span class="line">VUE_APP_SUB_NETWORK_MANAGE=/subapps/sub-network-manage/index.html</span><br><span class="line">VUE_APP_SUB_SIGNATURE_MANAGE=/subapps/sub-signature-manage/index.html</span><br><span class="line">VUE_APP_SUB_USER_MANAGE=/subapps/sub-user-manage/index.html</span><br></pre></td></tr></table></figure>


<p>我们分开解析一下这两份配置</p>
<p>如果对nginx的基本配置不太熟悉的可以查看<a href="/2021/01/14/%E6%97%A0%E6%98%9F%E7%9A%84nginx%E9%85%8D%E7%BD%AE%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89-%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/">无星的nginx配置学习（一）-基础配置</a>和<a href="/2021/02/03/%E6%97%A0%E6%98%9F%E7%9A%84nginx%E9%85%8D%E7%BD%AE%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94Vue%20router%20history%E9%85%8D%E7%BD%AE/">无星的nginx配置学习（二）——Vue router history配置引发的思考</a></p>
<h2 id="history"><a href="#history" class="headerlink" title="history"></a>history</h2><h3 id="1-nginx配置"><a href="#1-nginx配置" class="headerlink" title="1.nginx配置"></a>1.nginx配置</h3><p>首先，我们需要配置加载主应用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    root /Users/xing.wu/Desktop/deploy/main; </span><br><span class="line">    index index.html index.htm;</span><br><span class="line">    try_files $uri $uri/ /index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们访问域名<code>http://localhost:7777/</code>等于访问<code>/Users/xing.wu/Desktop/deploy/main/</code></p>
<p>且默认访问访问文件index.html</p>
<p>因此，我们访问<code>http://localhost:7777/</code>就等于访问了主应用<code>/Users/xing.wu/Desktop/deploy/main/index.html</code></p>
<p>其次，我们需要配置加载子应用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location /subapps &#123;</span><br><span class="line">    root /Users/xing.wu/Desktop/deploy; </span><br><span class="line">    try_files $uri $uri/ /index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>举个例子，我们访问<code>SUB_LOGIN</code>这个子应用，从上述的描述文件可以得到<br><code>VUE_APP_SUB_LOGIN</code>的入口地址为<code>/subapps/sub-login/</code></p>
<p>因此，在项目中，加载<code>SUB_LOGIN</code>这个子应用应当访问的地址为<code>http://localhost:7777/subapps/sub-login/</code></p>
<p>从nginx看我们配置的结果，访问<code>http://localhost:7777/subapps/sub-login/</code> 等于 <code>/Users/xing.wu/Desktop/deploy/subapps/sub-login/index.html</code></p>
<p>翻到<code>图一</code>看一下路径，就能发现，一切都对上了</p>
<p>效果如下</p>
<p><img src="/images/qiankun6/2.png" alt="2.image"></p>
<h2 id="2-hash"><a href="#2-hash" class="headerlink" title="2.hash"></a>2.hash</h2><h3 id="1-nginx配置-1"><a href="#1-nginx配置-1" class="headerlink" title="1.nginx配置"></a>1.nginx配置</h3><p>一样，先是主应用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    root /Users/xing.wu/Desktop/deployhash/main; </span><br><span class="line">    index index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问<code>http://localhost:9999/</code>就等于访问了主应用<code>/Users/xing.wu/Desktop/deployhash/main/index.html</code></p>
<p>再是子应用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location /subapps &#123;</span><br><span class="line">    root /Users/xing.wu/Desktop/deployhash;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问<code>http://localhost:9999/subapps/sub-login/</code> 等于 <code>/Users/xing.wu/Desktop/deployhash/subapps/sub-login/index.html</code></p>
<p><img src="/images/qiankun6/3.png" alt="3.image"></p>
]]></content>
      <categories>
        <category>微前端</category>
      </categories>
      <tags>
        <tag>微前端</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的微前端之旅（四）——qiankun线上服务代理到本地</title>
    <url>/2021/03/20/%E6%97%A0%E6%98%9F%E7%9A%84%E5%BE%AE%E5%89%8D%E7%AB%AF%E4%B9%8B%E6%97%85%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94qiankun%E7%BA%BF%E4%B8%8A%E6%9C%8D%E5%8A%A1%E4%BB%A3%E7%90%86%E5%88%B0%E6%9C%AC%E5%9C%B0/</url>
    <content><![CDATA[<p>这个方式其实是我在上家公司的时候体验过，觉得确实很有意思。</p>
<p>所以这里来逆推一下实现方式。</p>
<h1 id="解决了什么痛点"><a href="#解决了什么痛点" class="headerlink" title="解决了什么痛点"></a>解决了什么痛点</h1><h2 id="1-开发一个模块，需要启动2-3个项目"><a href="#1-开发一个模块，需要启动2-3个项目" class="headerlink" title="1.开发一个模块，需要启动2-3个项目"></a>1.开发一个模块，需要启动2-3个项目</h2><p>在微前端的开发过程中，如果我们要在主应用中看效果，我们至少需要启动一个主应用，和一个待开发模块，如果项目具有登陆机制，我们还需要启动一个登陆模块。</p>
<p>换句话说，为了开发一个模块，我们需要至少启动三个项目。</p>
<h2 id="2-数据耦合的情况下，无法单独启动项目调试"><a href="#2-数据耦合的情况下，无法单独启动项目调试" class="headerlink" title="2.数据耦合的情况下，无法单独启动项目调试"></a>2.数据耦合的情况下，无法单独启动项目调试</h2><h2 id="3-特定环境下出现的bug"><a href="#3-特定环境下出现的bug" class="headerlink" title="3.特定环境下出现的bug"></a>3.特定环境下出现的bug</h2><p>可能某些bug依赖特定的数据，在测试环境出现了但在本地运行或开发环境运行正常。</p>
<h1 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h1><p>在成功发布一个版本以后，配置需要在<code>特定条件下</code>触发加载的<code>本地模块</code>，从而将线上服务的某些模块，代理到本地启动的模块，进行开发调试。</p>
<h1 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h1><p>前面几篇讲到，注册的配置信息其实是可以从远端拉取的，那么只需要有一个配置的地方，我们就可以动态修改这个配置列表。</p>
<p>换句话说，我们可以通过一些代码，配合需要配置列表，进行代理。</p>
<h2 id="1-预设特定条件"><a href="#1-预设特定条件" class="headerlink" title="1.预设特定条件"></a>1.预设特定条件</h2><p>比如我们预设一个特定条件：</p>
<p>环境为development或beta环境</p>
<p>且</p>
<p>成功读取远程配置列表</p>
<p>且</p>
<p>浏览器localStorage中存在名为developer的值</p>
<h2 id="2-使用可热更新读取的配置表，例如nacos提供"><a href="#2-使用可热更新读取的配置表，例如nacos提供" class="headerlink" title="2.使用可热更新读取的配置表，例如nacos提供"></a>2.使用可热更新读取的配置表，例如nacos提供</h2><p>举个例子：<br>构造一个对象，key表示开发者名字，value为需要代理到本地的数组，item的name为代理模块名称，entry表示入口地址，填写本地的运行地址就行。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 远程需要读取的配置项</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">xingwu</span>:[&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;sub-login&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>:<span class="string">&#x27;//localhost:3002&#x27;</span></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-修改主应用代码"><a href="#3-修改主应用代码" class="headerlink" title="3.修改主应用代码"></a>3.修改主应用代码</h2><h3 id="3-1-main-js"><a href="#3-1-main-js" class="headerlink" title="3.1 main.js"></a>3.1 main.js</h3><p>改造前</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span>;</span><br><span class="line"><span class="comment">// 注册</span></span><br><span class="line"><span class="keyword">import</span> register <span class="keyword">from</span> <span class="string">&#x27;./micro/index&#x27;</span>;</span><br><span class="line"><span class="comment">// 添加全局通信</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@/micro/store&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">use</span>(store).<span class="title function_">use</span>(router).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br><span class="line"><span class="comment">// 注册</span></span><br><span class="line"><span class="title function_">register</span>();</span><br></pre></td></tr></table></figure>

<p>改造后</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> api <span class="keyword">from</span> <span class="string">&#x27;./api&#x27;</span>;</span><br><span class="line"><span class="comment">// 注册</span></span><br><span class="line"><span class="keyword">import</span> register <span class="keyword">from</span> <span class="string">&#x27;./micro/index&#x27;</span>;</span><br><span class="line"><span class="comment">// 添加全局通信</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@/micro/store&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">use</span>(store).<span class="title function_">use</span>(router).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br><span class="line"><span class="comment">// 注册</span></span><br><span class="line"><span class="comment">// 获取远端开发者</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isDevelopment</span> = (<span class="params"></span>) =&gt; process.<span class="property">env</span>.<span class="property">VUE_APP_ENV_CONFIG</span> === <span class="string">&#x27;development&#x27;</span> || process.<span class="property">env</span>.<span class="property">VUE_APP_ENV_CONFIG</span> === <span class="string">&#x27;beta&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (isDevelopment) &#123;</span><br><span class="line">  <span class="comment">// 网络请求获取远端配置</span></span><br><span class="line">  api.<span class="title function_">getDeveloper</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">subApps</span> = response;</span><br><span class="line">  &#125;).<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">register</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="title function_">register</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>改造需要的注意点就是<code>注册时机</code></p>
<p>1.判断环境是否是development环境或beta环境。</p>
<p>这个可以根据配置.env文件中的环境变量属性，在不同环境执行不同mode打包做到。</p>
<p>2.如果加载成功，把加载好的结果存起来。</p>
<p>3.如果加载失败，也得继续注册，不然页面直接挂了。</p>
<h3 id="3-2-subapps"><a href="#3-2-subapps" class="headerlink" title="3.2 subapps"></a>3.2 subapps</h3><p>改造前：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;@/router/index&#x27;</span>;</span><br><span class="line"><span class="comment">// 此时在开发，测试环境，理论上已经挂载了subapps的入口</span></span><br><span class="line"><span class="keyword">const</span> baseUrl = process.<span class="property">env</span>.<span class="property">BASE_URL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> subapps = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;sub-login&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>: process.<span class="property">env</span>.<span class="property">VUE_APP_SUB_LOGIN</span>,</span><br><span class="line">    <span class="attr">container</span>: <span class="string">&#x27;#sub-apps&#x27;</span>,</span><br><span class="line">    <span class="attr">activeRule</span>: <span class="string">`<span class="subst">$&#123;baseUrl&#125;</span>sub-login`</span>,</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">      <span class="attr">routeBasePath</span>: <span class="string">&#x27;/sub-login&#x27;</span>,</span><br><span class="line">      <span class="attr">mainRouter</span>: router,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;sub-user-manage&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>: process.<span class="property">env</span>.<span class="property">VUE_APP_SUB_USER_MANAGE</span>,</span><br><span class="line">    <span class="attr">container</span>: <span class="string">&#x27;#sub-apps&#x27;</span>,</span><br><span class="line">    <span class="attr">activeRule</span>: <span class="string">`<span class="subst">$&#123;baseUrl&#125;</span>sub-user-manage`</span>,</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">      <span class="attr">routeBasePath</span>: <span class="string">&#x27;/sub-user-manage&#x27;</span>,</span><br><span class="line">      <span class="attr">mainRouter</span>: router,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> subapps;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>改造后：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;@/router/index&#x27;</span>;</span><br><span class="line"><span class="comment">// 此时在开发，测试环境，理论上已经挂载了subapps的入口</span></span><br><span class="line"><span class="keyword">const</span> baseUrl = process.<span class="property">env</span>.<span class="property">BASE_URL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> subapps = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;sub-login&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>: process.<span class="property">env</span>.<span class="property">VUE_APP_SUB_LOGIN</span>,</span><br><span class="line">    <span class="attr">container</span>: <span class="string">&#x27;#sub-apps&#x27;</span>,</span><br><span class="line">    <span class="attr">activeRule</span>: <span class="string">`<span class="subst">$&#123;baseUrl&#125;</span>sub-login`</span>,</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">      <span class="attr">routeBasePath</span>: <span class="string">&#x27;/sub-login&#x27;</span>,</span><br><span class="line">      <span class="attr">mainRouter</span>: router,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;sub-user-manage&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>: process.<span class="property">env</span>.<span class="property">VUE_APP_SUB_USER_MANAGE</span>,</span><br><span class="line">    <span class="attr">container</span>: <span class="string">&#x27;#sub-apps&#x27;</span>,</span><br><span class="line">    <span class="attr">activeRule</span>: <span class="string">`<span class="subst">$&#123;baseUrl&#125;</span>sub-user-manage`</span>,</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">      <span class="attr">routeBasePath</span>: <span class="string">&#x27;/sub-user-manage&#x27;</span>,</span><br><span class="line">      <span class="attr">mainRouter</span>: router,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断本地是否存在developer</span></span><br><span class="line"><span class="keyword">const</span> developer = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;developer&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">subApps</span> &amp;&amp; developer) &#123;</span><br><span class="line">  <span class="comment">// 获取远端定义的入口</span></span><br><span class="line">  <span class="keyword">const</span> tmpArray = <span class="variable language_">window</span>.<span class="property">subApps</span>[developer];</span><br><span class="line">  <span class="keyword">if</span> (tmpArray) &#123;</span><br><span class="line">    tmpArray.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      subapps.<span class="title function_">forEach</span>(<span class="function">(<span class="params">app</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (app.<span class="property">name</span> === item.<span class="property">name</span>) &#123;</span><br><span class="line">          app.<span class="property">entry</span> = item.<span class="property">entry</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> subapps;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>比如上面，我在远端定义了一个开发者xingwu</p>
<p>我只需要再在浏览器的localStorage手动添加一个developer:xingwu</p>
<p>就可以触发匹配，将我指定的模块，加载本地启动的模块，代理到本地。</p>
<p>而其他所有用户所有模块，均不受影响。</p>
<hr>
<p>就这样，完美解决了上面提出的痛点。</p>
<p>最后给大家看一下效果。</p>

<video src="/images/qiankun4/1.mp4" type="video/mp4" controls="controls" width="100%" height="100%">
</video>
 ]]></content>
      <categories>
        <category>微前端</category>
      </categories>
      <tags>
        <tag>微前端</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的自动化之旅（一）——PlayWright</title>
    <url>/2022/09/11/%E6%97%A0%E6%98%9F%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E4%B9%8B%E6%97%85%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94PlayWright/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>工作上有些视频学习任务，一天到晚要看视频学习；</p>
<p>关键还不能倍速，连播，非要手动点击下一个，非常苦恼。还时不时还跳一个弹窗出来，不回答就不继续播放，挂机都不行。</p>
<h1 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h1><p><code>selenium</code>，还用说吗？妥妥的大哥大</p>
<p><code>PlayWright</code>，微软的新生儿</p>
<p>所以我选<code>PlayWright</code></p>
<h1 id="在Linux上安装edge"><a href="#在Linux上安装edge" class="headerlink" title="在Linux上安装edge"></a>在Linux上安装edge</h1><p>问题来了，为什么要装<code>edge</code>，<code>chrome</code>不香么？</p>
<p>但是有一个问题啊，通过<code>chromedriver</code>调起来的是<code>chromium</code>，<code>chromium</code>默认不支持MP4封装h264编码的视频,默认只支持google自家的webm封装的VP9编码视频。</p>
<p>这不是要命，我最主要的需求就是看视频。</p>
<p>所以我们选择edge</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 在这里看可以安装的https://packages.microsoft.com/yumrepos/edge/</span><br><span class="line">sudo yum localinstall https://packages.microsoft.com/yumrepos/edge/microsoft-edge-stable-105.0.1343.27-1.x86_64.rpm</span><br><span class="line"># 可以使用看是否安装成功</span><br><span class="line">microsoft-edge --version</span><br></pre></td></tr></table></figure>

<h1 id="开启浏览器"><a href="#开启浏览器" class="headerlink" title="开启浏览器"></a>开启浏览器</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; chromium &#125; = <span class="built_in">require</span>(<span class="string">&#x27;playwright&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> browser = <span class="keyword">await</span> chromium.<span class="title function_">launch</span>(&#123;</span><br><span class="line">    <span class="comment">// 开发的时候写false，部署的时候使用true</span></span><br><span class="line">        <span class="attr">headless</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="comment">// 使用edge浏览器</span></span><br><span class="line">        <span class="attr">channel</span>: <span class="string">&#x27;msedge&#x27;</span>,</span><br><span class="line">        <span class="comment">// 默认开启控制台。不然无法自动播放视频</span></span><br><span class="line">        <span class="attr">devtools</span>: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="通过XPath寻找dom"><a href="#通过XPath寻找dom" class="headerlink" title="通过XPath寻找dom"></a>通过XPath寻找dom</h1><p>好多兄弟问，XPath怎么搞，好难算，好复杂</p>
<p>说实话兄弟，根本不用自己写啊。。。。</p>
<p>举个栗子：<br><img src="/images/%E8%87%AA%E5%8A%A8%E5%8C%961/1.png" alt="1"></p>
<p>直接复制就行了。。。</p>
<h1 id="一些常用操作"><a href="#一些常用操作" class="headerlink" title="一些常用操作"></a>一些常用操作</h1><h3 id="1-聚焦input并输入"><a href="#1-聚焦input并输入" class="headerlink" title="1.聚焦input并输入"></a>1.聚焦<code>input</code>并输入</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 我这里使用id聚焦</span></span><br><span class="line">page.<span class="title function_">fill</span>(<span class="string">&#x27;#id&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="2-点击按钮"><a href="#2-点击按钮" class="headerlink" title="2.点击按钮"></a>2.点击按钮</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用xpath</span></span><br><span class="line"><span class="keyword">await</span> page.<span class="title function_">click</span>(<span class="string">&#x27;xpath=//html/body/form/div[2]/div/div[1]/input[4]&#x27;</span>)</span><br><span class="line"><span class="comment">// 使用文字定位</span></span><br><span class="line"><span class="keyword">await</span> page.<span class="title function_">click</span>(<span class="string">&#x27;text=&#x27;</span> + <span class="string">&#x27;登录&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="3-等待某个dom节点渲染完成"><a href="#3-等待某个dom节点渲染完成" class="headerlink" title="3.等待某个dom节点渲染完成"></a>3.等待某个dom节点渲染完成</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 例如我这里等待一张图片渲染完成后获取这个图片</span></span><br><span class="line"><span class="keyword">const</span> img0 = <span class="keyword">await</span> page.<span class="title function_">waitForSelector</span>(<span class="string">&#x27;id=Img0&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="4-获取所有可匹配成功的dom"><a href="#4-获取所有可匹配成功的dom" class="headerlink" title="4.获取所有可匹配成功的dom"></a>4.获取所有可匹配成功的dom</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在获取表格内所有列或者所有行时,尤为有效</span></span><br><span class="line"><span class="keyword">const</span> domlist = <span class="keyword">await</span> page.$$(<span class="string">&#x27;xpath=//*[@id=&quot;mian&quot;]/form/div/table/tbody/tr/td/table[2]/tbody/tr/td/table[1]/tbody/tr/td/table/tbody/tr/td[1]/table/tbody/tr/td[2]/table[4]/tbody/tr/td[3]/span&#x27;</span>)</span><br></pre></td></tr></table></figure>


<h3 id="5-浏览器后退"><a href="#5-浏览器后退" class="headerlink" title="5.浏览器后退"></a>5.浏览器后退</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> page.<span class="title function_">goBack</span>()</span><br></pre></td></tr></table></figure>


<h3 id="6-拦截网络请求并替换结果"><a href="#6-拦截网络请求并替换结果" class="headerlink" title="6.拦截网络请求并替换结果"></a>6.拦截网络请求并替换结果</h3><p>在网络请求发起的页面,使用以下这个函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">forbidRequest</span> = <span class="keyword">async</span> (<span class="params">page</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 参数可以填请求地址或者正则表达式,例如:/aaa$/以aaa开头的请求</span></span><br><span class="line">    page.<span class="title function_">route</span>(<span class="string">&#x27;参数&#x27;</span>, <span class="keyword">async</span> route =&gt; &#123;</span><br><span class="line">        <span class="comment">// Fetch original response.</span></span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> page.<span class="property">request</span>.<span class="title function_">fetch</span>(route.<span class="title function_">request</span>());</span><br><span class="line">        <span class="comment">// Add a prefix to the title.</span></span><br><span class="line">        <span class="keyword">let</span> body = &#123;&#125;</span><br><span class="line">        <span class="comment">// 这里要注意,一定要转json字符串</span></span><br><span class="line">        <span class="keyword">const</span> result = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(body)</span><br><span class="line">        route.<span class="title function_">fulfill</span>(&#123;</span><br><span class="line">          <span class="comment">// Pass all fields from the response.</span></span><br><span class="line">          response,</span><br><span class="line">          <span class="comment">// Override response body.</span></span><br><span class="line">          <span class="attr">body</span>:result,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其他基本没啥了,跟着官网看文档就好了.</p>
]]></content>
      <categories>
        <category>PlayWright</category>
      </categories>
      <tags>
        <tag>PlayWright</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的自动化之旅（三）——PlayWright配置项和常见问题</title>
    <url>/2023/03/17/%E6%97%A0%E6%98%9F%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E4%B9%8B%E6%97%85%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94PlayWright%E6%8F%90%E4%BA%A4%E9%80%89%E6%8B%A9%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>这次我们来聊一聊<code>playwright</code>的一些配置项</p>
<h1 id="一、登录保存数据"><a href="#一、登录保存数据" class="headerlink" title="一、登录保存数据"></a>一、登录保存数据</h1><p>网站每次都要登录，很烦，没必要</p>
<p>所以我们登录之后，可以把<code>cookie</code>或者<code>session</code>什么的保存起来</p>
<p>下次登录再把数据注入</p>
<p>这样就不用再登录了</p>
<h2 id="1-先正常登录"><a href="#1-先正常登录" class="headerlink" title="1.先正常登录"></a>1.先正常登录</h2><p>就写代码登录</p>
<h2 id="2-保存数据"><a href="#2-保存数据" class="headerlink" title="2.保存数据"></a>2.保存数据</h2><p>通过<code>context.storageState</code>保存数据到本地文件<br>例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 保存登录状态</span></span><br><span class="line"> <span class="keyword">await</span> context.<span class="title function_">storageState</span>(&#123;</span><br><span class="line">     <span class="attr">path</span>: dirPath + <span class="string">&#x27;/auth/auth.json&#x27;</span>,</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>
<h2 id="3-回到初始化，生成brower时，通过文件注入"><a href="#3-回到初始化，生成brower时，通过文件注入" class="headerlink" title="3.回到初始化，生成brower时，通过文件注入"></a>3.回到初始化，生成brower时，通过文件注入</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> authState = <span class="built_in">require</span>(<span class="string">&#x27;../auth/auth.json&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> browser = <span class="keyword">await</span> chromium.<span class="title function_">launch</span>(&#123;</span><br><span class="line">        <span class="attr">headless</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="comment">// 使用edge浏览器</span></span><br><span class="line">        <span class="attr">channel</span>: <span class="string">&#x27;msedge&#x27;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> context = <span class="keyword">await</span> browser.<span class="title function_">newContext</span>(&#123;</span><br><span class="line">        <span class="attr">storageState</span>: authState ?? &#123;&#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> page = <span class="keyword">await</span> context.<span class="title function_">newPage</span>(&#123;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="二、忽略不安全的https"><a href="#二、忽略不安全的https" class="headerlink" title="二、忽略不安全的https"></a>二、忽略不安全的https</h1><p>自签名证书，这个很常见。</p>
<p>很多情况下，使用自签名证书做测试环境或者内网环境的https，是一种非常常见且低成本的https方式。</p>
<p>但是自签名证书因为没有CA认证，浏览器会报非专用链接提示</p>
<p>playwright在访问此类地址时，也会有相同的提示，导致无法进行正常的自动化工作。</p>
<p>我们可以通过配置playwright的设置项，让浏览器默认忽略此类问题。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> browser = <span class="keyword">await</span> chromium.<span class="title function_">launch</span>(&#123;</span><br><span class="line">    <span class="attr">headless</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 使用edge浏览器</span></span><br><span class="line">    <span class="attr">channel</span>: <span class="string">&#x27;msedge&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> context = <span class="keyword">await</span> browser.<span class="title function_">newContext</span>(&#123;</span><br><span class="line">    <span class="attr">storageState</span>: authState ?? &#123;&#125;,</span><br><span class="line">    <span class="comment">// 忽略https的问题</span></span><br><span class="line">    <span class="attr">ignoreHTTPSErrors</span>: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> page = <span class="keyword">await</span> context.<span class="title function_">newPage</span>(&#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="三、上传文件"><a href="#三、上传文件" class="headerlink" title="三、上传文件"></a>三、上传文件</h1><p>有些网页流程中，需要上传文件。</p>
<p>例如发邮件时需要上传附件</p>
<p>这时候就有点犯难，因为上传文件的框，它不是网页，它是Windows程序</p>
<p>其实<code>playwright</code>对此已有处理，使用<code>fileChooser</code>即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 文件路径，绝对路径！</span><br><span class="line">const filePath = &#x27;xxxx&#x27;</span><br><span class="line">const fileChooserPromise = page.waitForEvent(&#x27;filechooser&#x27;);</span><br><span class="line">await page.click(&#x27;text=添加附件&#x27;);</span><br><span class="line">const fileChooser = await fileChooserPromise;</span><br><span class="line">await fileChooser.setFiles(filePath);</span><br></pre></td></tr></table></figure>

<h1 id="四、下载文件"><a href="#四、下载文件" class="headerlink" title="四、下载文件"></a>四、下载文件</h1><p>比如把文件下载在当前项目路径下等</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [download] = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>([</span><br><span class="line">    <span class="comment">// 指定等待下载事件</span></span><br><span class="line">    page.<span class="title function_">waitForEvent</span>(<span class="string">&#x27;download&#x27;</span>),</span><br><span class="line">    <span class="comment">// 点击下载元素</span></span><br><span class="line">    mainFrame.<span class="title function_">locator</span>(<span class="string">&#x27;xpath=xxx&#x27;</span>).<span class="title function_">click</span>(),</span><br><span class="line">]);</span><br><span class="line"><span class="comment">// 获取文件下载路径</span></span><br><span class="line"><span class="comment">// const path = await download.path();</span></span><br><span class="line"><span class="comment">// 获取文件全称，含后缀</span></span><br><span class="line"><span class="comment">// const fileName = download.suggestedFilename();</span></span><br><span class="line"><span class="comment">// 自己设置文件名称</span></span><br><span class="line"><span class="keyword">const</span> fileName = <span class="string">&#x27;xxxx&#x27;</span></span><br><span class="line"><span class="comment">// 保存文件,参数为文件路径</span></span><br><span class="line"><span class="keyword">await</span> download.<span class="title function_">saveAs</span>(<span class="string">&#x27;filepath&#x27;</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PlayWright</category>
      </categories>
      <tags>
        <tag>PlayWright</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的自动化之旅（二）——PlayWright的一些常见问题</title>
    <url>/2023/03/17/%E6%97%A0%E6%98%9F%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E4%B9%8B%E6%97%85%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94PlayWright%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>好久没写<code>playwright</code>的相关内容了，但最近用的还是挺多的，有些常见的问题，决定还是写下来。</p>
<h1 id="内网安装"><a href="#内网安装" class="headerlink" title="内网安装"></a>内网安装</h1><p>我所在的公司内网是不联网的，只有一个<code>npm私有源</code>，并且上游源是需要通过审批才能更新的。</p>
<p>说人话就是，有的包有，有的包没有，没有的包也没办法从上游源拉取。</p>
<p>幸运的是，有<code>playwright</code>的低版本。</p>
<p>不幸的是，安装过程中需要安装若干浏览器内核，在内网是无法下载的。</p>
<p>不过更幸运的是，在掘金随手点开的<a href="https://juejin.cn/post/7096074759158366221">一篇文章</a>，看到有人提到了这个。</p>
<p>对作者表示感谢。</p>
<p>这里引用一下。</p>
<blockquote>
<p>在可以进行外网访问的电脑上，随便新建一个文件夹</p>
</blockquote>
<blockquote>
<p><code>npm i @playwright/test -D</code></p>
</blockquote>
<blockquote>
<p>如果你像我一样，是有版本限制的，请下载对应版本号的包，例如我这里用<code>1.24.3</code></p>
</blockquote>
<blockquote>
<p><code>npm i  @playwright/test@1.24.3 -D</code></p>
</blockquote>
<blockquote>
<p>再 <code>npx playwright@1.24.3 install</code></p>
</blockquote>
<blockquote>
<p>访问<code>C:\Users\用户名\AppData\Local\ms-playwright</code></p>
</blockquote>
<blockquote>
<p>压缩，然后到内网电脑的相同地址解压，再<code>npm install plawright@1.24.3</code>即可</p>
</blockquote>
<p>官方文档的<a href="https://playwright.dev/docs/ci#caching-browsers">地址</a></p>
<h1 id="操作iframe内的dom"><a href="#操作iframe内的dom" class="headerlink" title="操作iframe内的dom"></a>操作iframe内的dom</h1><p>先找到<code>iframe</code>的id,再通过<code>iframe</code>找到对应的dom</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> iframe = page.<span class="title function_">frameLocator</span>(<span class="string">&#x27;#my-iframe&#x27;</span>)</span><br><span class="line"><span class="keyword">await</span> iframe.<span class="title function_">locator</span>(<span class="string">&quot;selectro&quot;</span>).<span class="title function_">click</span>()</span><br></pre></td></tr></table></figure>

<h1 id="获取dom"><a href="#获取dom" class="headerlink" title="获取dom"></a>获取dom</h1><p>通过<code>locator</code>获取<code>.elementHandles()</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> elements = <span class="keyword">await</span> page.<span class="title function_">locator</span>(<span class="string">&#x27;tr&#x27;</span>, &#123; <span class="attr">has</span>: page.<span class="title function_">locator</span>(<span class="string">&#x27;text=&#x27;</span> + text), <span class="attr">class</span>: <span class="string">&#x27;towntr&#x27;</span> &#125;).<span class="title function_">elementHandles</span>();</span><br><span class="line"><span class="comment">// 获取文字</span></span><br><span class="line"><span class="keyword">const</span> text = <span class="keyword">await</span> elements[<span class="number">0</span>].<span class="title function_">innerText</span>()</span><br></pre></td></tr></table></figure>

<h1 id="某些情况下输入框无法输入"><a href="#某些情况下输入框无法输入" class="headerlink" title="某些情况下输入框无法输入"></a>某些情况下输入框无法输入</h1><p>本来对于输入框，应该使用<code>page.fill()</code>去输入</p>
<p>但是总有一些奇奇怪怪的情况，无法输入</p>
<p>对于这种情况，我们可以通过<code>page.key</code>去操作键盘输入</p>
<p>例如我要输入账号密码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> account = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">const</span> password = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> page.<span class="property">keyboard</span>.<span class="title function_">insertText</span>(account);</span><br><span class="line"><span class="keyword">await</span> page.<span class="property">keyboard</span>.<span class="title function_">press</span>(<span class="string">&#x27;Tab&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pArray = password.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; pArray.<span class="property">length</span>; index ++)&#123;</span><br><span class="line">  <span class="keyword">const</span> element = <span class="title function_">pArray</span>(index)</span><br><span class="line">  <span class="keyword">await</span> page.<span class="property">keyboard</span>.<span class="title function_">down</span>(element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PlayWright</category>
      </categories>
      <tags>
        <tag>PlayWright</tag>
      </tags>
  </entry>
  <entry>
    <title>权限判断-位运算</title>
    <url>/2018/07/08/%E6%9D%83%E9%99%90%E5%88%A4%E6%96%AD-%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<p>角色权限判断，这应该是大部分应用都有的功能，那么如何进行权限判断？</p>
<p>这里说下我们用的思路，可能会比较low，各位看官别笑。<br><img src="/images/%E4%BD%8D%E8%BF%90%E7%AE%97/1.jpg"></p>
<p>打个比方，我现在有A,B,C,D四个功能。要对某个账户是否具有这些功能权限做判断。<br>我们有个list，里面存放着这个账户所有的权限。（list从哪来？当然是后台请求回来啊！）<br>A功能对应的权限是=&gt;0,以此类推B=&gt;1,C=&gt;2,D=&gt;3这样子。</p>
<p>那么如果我有一个账号拥有所有权限，list就是【0，1，2，3】，如果没有B权限就是【0，2，3，4】这样子，相信大家都应该明白我要表达的意思了。</p>
<p>那么要判断是否拥有某个权限，这时候肯定就会说，遍历一下list不就知道了？那如果权限比较多呢？而且你不觉得这样更low么=。=<br>所以这个时候，我们可以使用位运算打成这个目的:</p>
<p>先说我们用来判断的方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//判断是否存在权限，permission是所有权限展示中的某个权限，只有一个&amp;，不是两个，别搞错了</span><br><span class="line">    hasPermission(permission) &#123;</span><br><span class="line">        return permission &amp; GlobalValue.authValue</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>再定义一个包含了所有权限的声明</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//所有权限列表展示</span><br><span class="line">export let Permission = &#123;</span><br><span class="line">    A: Math.pow(2, 0),   //A功能</span><br><span class="line">    B: Math.pow(2, 1),   //B功能</span><br><span class="line">    C: Math.pow(2, 2),    //C功能</span><br><span class="line">    D: Math.pow(2, 3),   //D功能</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在我们和后台请求拿到某个角色所包含的list的时候，对list做如下操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (authList &amp;&amp; authList.length &gt; 0) &#123;</span><br><span class="line">      let authValue = 0</span><br><span class="line">      for (let i = 0; i &lt; authList.length; i++) &#123;</span><br><span class="line">          let index = authList[i]</span><br><span class="line">          let permission = Math.pow(2, index)</span><br><span class="line">          authValue += permission</span><br><span class="line">      &#125;</span><br><span class="line">      return authValue//我在代码里GlobalValue.authValue = authValue存起来了，你们也找个全局的东西存起来就好</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>P.S.如果看懂了就不用往下看了，不浪费大牛的时间~~</p>
<p>可能各位没看懂老哥会很迷我在干嘛，这一步操作是干什么？别慌，让我们往下看</p>
<p>我们举一个例子来解释这个问题。假设我当前账号只有AC两个功能，那么我拿到的authList是多少呢？很简单：【0，2】</p>
<p>那么根据上面for循环的一顿操作，我这个返回的authValue会是多少呢？</p>
<p>2的0次方+2的2次方=5，这个数学就不多说了。。<br>那么现在我们可以知道，authValue = 5，<br>那么假设我现在要判断当前账户是否存在A功能权限：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let isHave =  this. hasPermission(Permission.A)</span><br></pre></td></tr></table></figure>
<p>那么接下来重点来了，这就需要一丢丢离散数学的知识了<br>其实就是对Permission.A&amp;5这一步进行计算<br>先转成二进制再进行&amp;运算</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">            0 0 0 0 1</span><br><span class="line">    &amp;       0 0 1 0 1</span><br><span class="line">————————————————————————————————</span><br><span class="line">            0 0 0 0 1</span><br><span class="line"></span><br><span class="line">结果是：2的0次方=1</span><br></pre></td></tr></table></figure>
<p>0代表false，非0代表true<br>所以答案是，有A权限</p>
<p>那么判断是否有B权限也是一样的，判断Permission.B&amp;5</p>
<p>同样先转成二进制再进行&amp;运算</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">            0 0 0 1 0</span><br><span class="line">    &amp;       0 0 1 0 1</span><br><span class="line">————————————————————————————————</span><br><span class="line">            0 0 0 0 0</span><br><span class="line"></span><br><span class="line">结果是：0</span><br></pre></td></tr></table></figure>
<p>所以答案是，没有B权限</p>
<p>相信讲到这里应该都明白了。如果不明白&amp;的操作，可以百度一下离散数学这个&amp;的操作。其实说简单一点就是1&amp;1=1，0&amp;任何=0（不保证对哈，就理解性的看下这句话，不是严格模式=。=）<br>所以综上：在做任何权限判断时，都可以使用这种位运算的方式来进行判断。</p>
<p>其他没了emmm</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的饥荒（一）——安装</title>
    <url>/2022/10/03/%E6%97%A0%E6%98%9F%E7%9A%84%E9%A5%A5%E8%8D%92%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>一个朋友喜欢玩饥荒,但是总是一个人没意思</p>
<p>联机版又不会搭房间,去淘宝租服务器一个月20起步</p>
<p>本着友好助人的美好品德</p>
<p>帮朋友买了台2G4H 4M的服务器,一年才260,房间我负责搭,平时闲置的服务器我随便用</p>
<p>我可真是个乐于助人的好人</p>
<p>我们先选Centos7,然后开动</p>
<h1 id="服务器安全组开放端口"><a href="#服务器安全组开放端口" class="headerlink" title="服务器安全组开放端口"></a>服务器安全组开放端口</h1><p>服务器安全组把<code>20-21</code>,<code>60000-60100</code>放开,<code>10998-10999</code>为饥荒端口,也放开</p>
<h1 id="一-搭FTP"><a href="#一-搭FTP" class="headerlink" title="一.搭FTP"></a>一.搭FTP</h1><p>为啥要搭FTP,其实主要是为了方便上传和下载文件,<code>scp</code>多少还是有点麻烦了</p>
<h2 id="1-防火墙开放端口-不必关"><a href="#1-防火墙开放端口-不必关" class="headerlink" title="1.防火墙开放端口,不必关"></a>1.防火墙开放端口,不必关</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># firewall-cmd --permanent --zone=public --add-service=ftp</span></span><br><span class="line"><span class="comment"># 开放常用端口</span></span><br><span class="line">firewall-cmd --zone=public --list-ports</span><br><span class="line"><span class="comment"># 不行就重启一下</span></span><br><span class="line"><span class="comment"># systemctl restart firewalld.service</span></span><br></pre></td></tr></table></figure>

<h2 id="2-安装vsftpd"><a href="#2-安装vsftpd" class="headerlink" title="2.安装vsftpd"></a>2.安装vsftpd</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install vsftpd* -y</span><br></pre></td></tr></table></figure>

<h2 id="3-启动vsftpd"><a href="#3-启动vsftpd" class="headerlink" title="3.启动vsftpd"></a>3.启动vsftpd</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm –ql vsftpd | more</span><br><span class="line">systemctl  restart   vsftpd.service</span><br><span class="line">ps   -ef |grep  vsftpd</span><br></pre></td></tr></table></figure>
<h2 id="4-配置"><a href="#4-配置" class="headerlink" title="4.配置"></a>4.配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/vsftpd/vsftpd.conf </span><br></pre></td></tr></table></figure>
<p>直接用我下面这个吧</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 开启匿名访问</span><br><span class="line">anonymous_enable=NO</span><br><span class="line">#启用本地系统用户访问</span><br><span class="line">local_enable=YES</span><br><span class="line">#本地系统用户写入全县</span><br><span class="line">write_enable=YES</span><br><span class="line">#本地用户创建文件目录默认权限掩码</span><br><span class="line">local_umask=022</span><br><span class="line">#打印目录显示纤细，通常用于用户第一次访问目录时，信息提示</span><br><span class="line">dirmessage_enable=YES</span><br><span class="line"># 启用上传/下载日志记录</span><br><span class="line">xferlog_enable=YES</span><br><span class="line"># ftp使用20端口进行数据传输</span><br><span class="line">connect_from_port_20=YES</span><br><span class="line">#chown_uploads=YES</span><br><span class="line">#chown_username=whoever</span><br><span class="line">#xferlog_file=/var/log/xferlog</span><br><span class="line">#日志文件根据xferlog的标准写入</span><br><span class="line">xferlog_std_format=YES</span><br><span class="line">#idle_session_timeout=600</span><br><span class="line">#data_connection_timeout=120</span><br><span class="line">#nopriv_user=ftpsecure</span><br><span class="line">#async_abor_enable=YES</span><br><span class="line">#ascii_upload_enable=YES</span><br><span class="line">#ascii_download_enable=YES</span><br><span class="line">#ftpd_banner=Welcome to blah FTP service.</span><br><span class="line">#deny_email_enable=YES</span><br><span class="line">#banned_email_file=/etc/vsftpd/banned_emails</span><br><span class="line">#ls_recurse_enable=YES</span><br><span class="line">#打开就对了</span><br><span class="line">listen=YES</span><br><span class="line">#关掉就完事</span><br><span class="line"># listen_ipv6=NO</span><br><span class="line">#登录ftp服务器根据/etc/pam.d/vsftpd内容认证</span><br><span class="line">pam_service_name=vsftpd</span><br><span class="line">#Vsftpd.user_list和ftpusers配置文件离的用户禁止访问ftp</span><br><span class="line">userlist_enable=YES</span><br><span class="line">#设置vsftpd于tcp wrapper结合进行主机访问</span><br><span class="line">tcp_wrappers=YES</span><br><span class="line"></span><br><span class="line"># 被动模式</span><br><span class="line">pasv_enable=YES</span><br><span class="line">pasv_min_port=60000</span><br><span class="line">pasv_max_port=60100</span><br><span class="line"># 修改ftp默认目录</span><br><span class="line">local_root=/home</span><br><span class="line">chroot_local_user=YES</span><br><span class="line">anon_root=/home/anon</span><br><span class="line"></span><br><span class="line">local_enable=YES</span><br><span class="line">write_enable=YES</span><br><span class="line">#</span><br></pre></td></tr></table></figure>
<h2 id="5-启动ftp专用账号"><a href="#5-启动ftp专用账号" class="headerlink" title="5.启动ftp专用账号"></a>5.启动ftp专用账号</h2><p>这里照抄参考资料<a href="https://blog.csdn.net/D1179869625/article/details/122984871">Centos7 搭建FTP服务器</a></p>
<h3 id="新增账号"><a href="#新增账号" class="headerlink" title="新增账号"></a>新增账号</h3><p>本次计划目的添加一个管理员账号，使用管理员账号上传管理文件，匿名用户可以查看下载，但是没有其他权限。默认账号路径在/home下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">useradd admin</span><br><span class="line"><span class="built_in">echo</span> admin12345|passwd --stdin admin</span><br></pre></td></tr></table></figure>

<h3 id="新建目录"><a href="#新建目录" class="headerlink" title="新建目录"></a>新建目录</h3><p><img src="/images/%E9%A5%A5%E8%8D%921/1png.png" alt="1.png"></p>
<h3 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart vsftpsd</span><br></pre></td></tr></table></figure>

<h3 id="下载FileZilla"><a href="#下载FileZilla" class="headerlink" title="下载FileZilla"></a>下载<code>FileZilla</code></h3><p><a href="https://www.filezilla.cn/">https://www.filezilla.cn/</a></p>
<h3 id="使用FileZilla"><a href="#使用FileZilla" class="headerlink" title="使用FileZilla"></a>使用<code>FileZilla</code></h3><p>软件使用应该不用说了</p>
<h1 id="二-安装SteamCMD"><a href="#二-安装SteamCMD" class="headerlink" title="二.安装SteamCMD"></a>二.安装SteamCMD</h1><h2 id="1-安装SteamCMD所需库"><a href="#1-安装SteamCMD所需库" class="headerlink" title="1.安装SteamCMD所需库"></a>1.安装SteamCMD所需库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum update	</span><br><span class="line"></span><br><span class="line">sudo yum -y install glibc.i686 libstdc++.i686 libcurl4-gnutls-dev.i686 libcurl.i686 screen</span><br></pre></td></tr></table></figure>

<h2 id="2-安装SteamCMD"><a href="#2-安装SteamCMD" class="headerlink" title="2.安装SteamCMD"></a>2.安装SteamCMD</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home &amp;&amp; <span class="built_in">mkdir</span> steamcmd &amp;&amp; <span class="built_in">cd</span> steamcmd</span><br><span class="line"></span><br><span class="line">wget https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz</span><br><span class="line"></span><br><span class="line">tar -xvzf steamcmd_linux.tar.gz</span><br><span class="line"></span><br><span class="line">./steamcmd.sh</span><br></pre></td></tr></table></figure>

<h2 id="3-下载饥荒服务端"><a href="#3-下载饥荒服务端" class="headerlink" title="3.下载饥荒服务端"></a>3.下载饥荒服务端</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先执行设置下载地址</span></span><br><span class="line">force_install_dir /home/dstserver</span><br><span class="line"><span class="comment"># 匿名登陆</span></span><br><span class="line">login anonymous</span><br><span class="line"><span class="comment"># 这里注意,使用的是update,如果存在,则更新,如果不存在,则下载</span></span><br><span class="line">app_update 343050 validate</span><br></pre></td></tr></table></figure>

<h2 id="4-解决libcurl-gnutls-so-4缺失问题"><a href="#4-解决libcurl-gnutls-so-4缺失问题" class="headerlink" title="4.解决libcurl-gnutls.so.4缺失问题"></a>4.解决<code>libcurl-gnutls.so.4</code>缺失问题</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -s /usr/lib/libcurl.so.4 /home/dstserver/bin/lib32/libcurl-gnutls.so.4</span><br></pre></td></tr></table></figure>

<h2 id="5-生成主世界-master-start-sh-和洞穴-cave-start-sh-命令"><a href="#5-生成主世界-master-start-sh-和洞穴-cave-start-sh-命令" class="headerlink" title="5.生成主世界(master_start.sh)和洞穴(cave_start.sh)命令"></a>5.生成主世界(master_start.sh)和洞穴(cave_start.sh)命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/dstserver/bin</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;./dontstarve_dedicated_server_nullrenderer -console -persistent_storage_root /home/dstsave -conf_dir dst -cluster World1 -shard Master&quot;</span> &gt; master_start.sh</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;./dontstarve_dedicated_server_nullrenderer -console -persistent_storage_root /home/dstsave -conf_dir dst -cluster World1 -shard Caves&quot;</span> &gt; cave_start.sh</span><br><span class="line"></span><br><span class="line"><span class="built_in">chmod</span> +x master_start.sh cave_start.sh</span><br></pre></td></tr></table></figure>

<h2 id="6-启动一次世界生成默认文件"><a href="#6-启动一次世界生成默认文件" class="headerlink" title="6.启动一次世界生成默认文件"></a>6.启动一次世界生成默认文件</h2><p>肯定链接失败,报没有token,这是预期内的,不用担心</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./master_start.sh</span><br></pre></td></tr></table></figure>
<p>启动完成后<code>Ctrl+C</code>关闭服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./cave_start.sh</span><br></pre></td></tr></table></figure>
<p>启动完成后<code>Ctrl+C</code>关闭服务</p>
<p>此时可以看到<code>home</code>目录下生成了两个文件夹<code>dstsave</code>和<code>dstsever</code></p>
<p><code>dstsave</code>: 数据文件,里面包含世界,存档</p>
<p><code>dstsever</code>: 服务端文件</p>
<h2 id="7-在自己电脑上创建饥荒世界"><a href="#7-在自己电脑上创建饥荒世界" class="headerlink" title="7.在自己电脑上创建饥荒世界"></a>7.在自己电脑上创建饥荒世界</h2><p>创建完毕后,回到饥荒首页的左下角,有个游戏数据,点一下会打开本地文件夹,李米娜包含了刚刚创建的世界</p>
<p><code>Cluster_*</code>文件夹是世界数据,12345表示创建的第几个世界.</p>
<p>文件夹内包含</p>
<p><code>Master</code>:主世界配置<br><code>Caves</code>:洞穴配置<br><code>cluster.ini</code>:房间配置</p>
<p>我们要做的,就是通过<code>ftp</code>,将这些内容,放到服务器的<code>/home/dstsave/dst/World1</code>目录下.</p>
<h2 id="8-获取token"><a href="#8-获取token" class="headerlink" title="8.获取token"></a>8.获取token</h2><p>回到饥荒客户端首页,左下角有个叫<code>账户信息</code>的按钮,点击跳转<code>Klei</code>,点击<code>我的游戏</code>,再点击右上角<code>Don’t Strave Together Servers</code>,下方有个<code>添加新的服务器</code>,随便填个名字就行了,会得到一个<code>token</code>,复制这个<code>token</code></p>
<h2 id="9-在服务器上放置token"><a href="#9-在服务器上放置token" class="headerlink" title="9.在服务器上放置token"></a>9.在服务器上放置token</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /home/dstsave/dst/World1</span><br><span class="line">touch cluster_token.txt</span><br><span class="line">vim cluster_token.txt</span><br></pre></td></tr></table></figure>
<p>把<code>token</code>放进去</p>
<h1 id="三-启动饥荒"><a href="#三-启动饥荒" class="headerlink" title="三.启动饥荒"></a>三.启动饥荒</h1><h2 id="1-启动"><a href="#1-启动" class="headerlink" title="1.启动"></a>1.启动</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/dstserver/bin</span><br></pre></td></tr></table></figure>
<h2 id="2-screen命令"><a href="#2-screen命令" class="headerlink" title="2.screen命令"></a>2.<code>screen</code>命令</h2><p>通过<code>-R</code>启动一个容器,如果存在,则进入容器,如果不存在,则创建一个容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">screen -R master</span><br><span class="line">./master_start.sh</span><br></pre></td></tr></table></figure>
<p>如果没报错并且看到<code>Simple pause</code>就代表启动成功，按下<code>Ctrl+A</code>然后再按下<code>Ctrl+D</code>就可以让服务后台运行，并回到原来的控制台</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">screen -R caves</span><br><span class="line"></span><br><span class="line">./cave_start.sh</span><br></pre></td></tr></table></figure>
<p>洞穴同理</p>
<p>要看<code>log</code>就继续使用<code>screen -R master</code>或者<code>screen -R caves</code></p>
<h2 id="3-查看端口"><a href="#3-查看端口" class="headerlink" title="3.查看端口"></a>3.查看端口</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 主世界</span><br><span class="line">netstat -nlp |grep :10999</span><br><span class="line"># 洞穴</span><br><span class="line">netstat -nlp |grep :10998</span><br></pre></td></tr></table></figure>
<p>关闭应用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kill -9 pid</span><br></pre></td></tr></table></figure>

<p>到这里为止,我们的饥荒已经成功启动了</p>
<p>下一篇我们来说mod<a href="2022/10/03/%E6%97%A0%E6%98%9F%E7%9A%84%E9%A5%A5%E8%8D%92%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94Mod">无星的饥荒（二）——Mod</a></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/D1179869625/article/details/122984871">Centos7 搭建FTP服务器</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/146379848">饥荒搭建</a></p>
]]></content>
      <categories>
        <category>饥荒</category>
      </categories>
      <tags>
        <tag>饥荒</tag>
      </tags>
  </entry>
  <entry>
    <title>无星的饥荒（二）——Mod</title>
    <url>/2022/10/03/%E6%97%A0%E6%98%9F%E7%9A%84%E9%A5%A5%E8%8D%92%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94Mod/</url>
    <content><![CDATA[<p>我们来讲讲,已经启动的服务器,怎么配置mod</p>
<h1 id="一-暂停饥荒服务"><a href="#一-暂停饥荒服务" class="headerlink" title="一.暂停饥荒服务"></a>一.暂停饥荒服务</h1><p>通过<code>netstat</code>和<code>kill</code>把服务器暂停先.</p>
<h1 id="二-解析各个文件夹"><a href="#二-解析各个文件夹" class="headerlink" title="二.解析各个文件夹"></a>二.解析各个文件夹</h1><h2 id="1-dstsave"><a href="#1-dstsave" class="headerlink" title="1.dstsave"></a>1.<code>dstsave</code></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /home/dstsave/dst/World1</span><br><span class="line">ls</span><br></pre></td></tr></table></figure>

<p>里面包含两个两个文件夹<code>Master``Caves</code></p>
<p>前面说过,<code>Master</code>为主世界,<code>Caves</code>为洞穴</p>
<p>实际上两个文件夹里的内容都差不多,我们这里只说<code>mod</code>相关配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 修改的话,最好Master和Caves两者同步修改,这里以Master为例</span><br><span class="line">cd Master</span><br><span class="line">vim ./modoverrides.lua</span><br></pre></td></tr></table></figure>

<p><code>modoverrides.lua</code>实际上就是所有的<code>mod</code>配置信息。</p>
<p>要开关<code>mod</code>或者修改<code>mod</code>的<code>options</code>就在这个文件里修改。</p>
<p>开关见<code>enable</code></p>
<h3 id="问题：里面都是worker-数字，我怎么知道哪个数字是哪个mod"><a href="#问题：里面都是worker-数字，我怎么知道哪个数字是哪个mod" class="headerlink" title="问题：里面都是worker-数字，我怎么知道哪个数字是哪个mod"></a>问题：里面都是<code>worker-数字</code>，我怎么知道哪个数字是哪个mod</h3><p>如果你的所有的<code>mod</code>都是从<code>steam</code>创意工坊下载的，我们可以通过分享按钮查看id</p>
<p>例如：</p>
<p><img src="/images/%E9%A5%A5%E8%8D%922/1.png" alt="1.png"></p>
<p><img src="/images/%E9%A5%A5%E8%8D%922/2.png" alt="2.png"></p>
<p>那么我们就得到所有mod和id之间的对应关系。</p>
<h2 id="2-dstserver"><a href="#2-dstserver" class="headerlink" title="2.dstserver"></a>2.<code>dstserver</code></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /home/dstserver</span><br><span class="line">ls</span><br></pre></td></tr></table></figure>

<p>其中包含一个<code>mods</code>文件夹，其中所有的<code>mod</code>都会下载在里面</p>
<p><code>mods</code>中存在一个名为<code>dedicated_server_mods_setup.lua</code>的文件</p>
<p>如果我们需要<code>新增</code>某个mod，则需要在其中新增</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">ServerModSetup(<span class="string">&quot;id&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>例如：<code>ServerModSetup(&quot;362175979&quot;)</code></p>
<h1 id="三-修改mod"><a href="#三-修改mod" class="headerlink" title="三.修改mod"></a>三.修改mod</h1><p>经过第二步，应该就大致了解了。<br>先改<code>/home/dstsave/dst/World1/Master/modoverrides.lua</code><br>和<code>/home/dstsave/dst/World1/Caves/modoverrides.lua</code></p>
<p>如果是新增<code>Mod</code>，则往<code>/home/dstserver/mods/dedicated_server_mods_setup.lua</code>新增<code>ServerModSetup(&quot;id&quot;)</code></p>
<h1 id="四-神话书说"><a href="#四-神话书说" class="headerlink" title="四.神话书说"></a>四.神话书说</h1><p><code>神话书说</code>是个很有意思的mod，他分为<code>神话书说世界</code>和<code>神话书说人物</code></p>
<p>这里有个需要注意的地方，在带有<code>神话书说</code>这俩mod的世界<code>第一次</code>启动时</p>
<p>必须要先关闭<code>神话书说人物</code>，仅开启<code>神话书说世界</code></p>
<p>在<code>master_start.sh</code>启动成功后，关闭服务</p>
<p>再开启<code>神话书说人物</code>,再次启动<code>master_start.sh</code>,才能正常使用神话书说的人物</p>
<p>不然会因为顺序问题，人物加载失败，导致无法生成世界。</p>
]]></content>
      <categories>
        <category>饥荒</category>
      </categories>
      <tags>
        <tag>饥荒</tag>
      </tags>
  </entry>
  <entry>
    <title>苹果卡验证的问题，终于™解决了</title>
    <url>/2020/02/15/%E8%8B%B9%E6%9E%9C%E5%8D%A1%E9%AA%8C%E8%AF%81%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%8C%E7%BB%88%E4%BA%8E%E2%84%A2%E8%A7%A3%E5%86%B3%E4%BA%86/</url>
    <content><![CDATA[<p>有一说一，在国内上传app到App Store，用transport上传，我打赌你肯定见过这个页面，这个正在验证能卡几个钟头。</p>
<p>“正在验证App-正在通过App Store进行认证…”</p>
<p><img src="/images/%E8%8B%B9%E6%9E%9C%E5%8D%A1%E9%AA%8C%E8%AF%81%E7%9A%84%E9%97%AE%E9%A2%98/1.png" alt="1.png"></p>
<h3 id="终于在stackoverflow这里找到了答案（不是最高票那个）。"><a href="#终于在stackoverflow这里找到了答案（不是最高票那个）。" class="headerlink" title="终于在stackoverflow这里找到了答案（不是最高票那个）。"></a>终于在<a href="https://stackoverflow.com/questions/22443425/application-loader-stuck-at-authenticating-with-the-itunes-store-when-uploadin/59261475#59261475">stackoverflow</a>这里找到了答案（不是最高票那个）。</h3><p><img src="/images/%E8%8B%B9%E6%9E%9C%E5%8D%A1%E9%AA%8C%E8%AF%81%E7%9A%84%E9%97%AE%E9%A2%98/2.png" alt="2.png"></p>
<p><img src="/images/%E8%8B%B9%E6%9E%9C%E5%8D%A1%E9%AA%8C%E8%AF%81%E7%9A%84%E9%97%AE%E9%A2%98/3.png" alt="3.png"></p>
<p>真的🐂🍺。</p>
<p>所以你要做的操作就是</p>
<h3 id="1-删除该缓存文件夹（删之前你可以看看是多大，我这是2-5M）"><a href="#1-删除该缓存文件夹（删之前你可以看看是多大，我这是2-5M）" class="headerlink" title="1.删除该缓存文件夹（删之前你可以看看是多大，我这是2.5M）"></a>1.删除该缓存文件夹（删之前你可以看看是多大，我这是2.5M）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/Users/your_user_name/Library/Caches/com.apple.amp.itmstransporter/</span><br></pre></td></tr></table></figure>

<h3 id="2-打开梯子"><a href="#2-打开梯子" class="headerlink" title="2.打开梯子"></a>2.打开梯子</h3><p>打开梯子，原因不用我多说，国内的这个网络你懂得。</p>
<h3 id="3-开启终端代理（不建议直接双击运行图中地址下的iTMSTransporter这个程序）"><a href="#3-开启终端代理（不建议直接双击运行图中地址下的iTMSTransporter这个程序）" class="headerlink" title="3.开启终端代理（不建议直接双击运行图中地址下的iTMSTransporter这个程序）"></a>3.开启终端代理（不建议直接双击运行图中地址下的iTMSTransporter这个程序）</h3><p>不建议直接双击运行iTMSTransporter，原因是双击直接开了终端运行，你会发现，巨慢无比，因为没翻出去，你可能几个钟头都下不完。</p>
<p>这里建议，打开梯子以后，开启终端代理。</p>
<p>如果你开的是🛫，先开全局，再建议看下有没有一个叫“一键复制终端代理命令”的按钮，点一下，然后复制到终端运行一下，这样就开启了终端代理。</p>
<p>你可以通过以下命令测试你当前的终端是什么ip</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl cip.cc</span><br></pre></td></tr></table></figure>
<p><img src="/images/%E8%8B%B9%E6%9E%9C%E5%8D%A1%E9%AA%8C%E8%AF%81%E7%9A%84%E9%97%AE%E9%A2%98/5.png" alt="5.png"></p>
<h3 id="4-运行如下命令"><a href="#4-运行如下命令" class="headerlink" title="4.运行如下命令"></a>4.运行如下命令</h3><p>再开启终端代理后，执行如下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/Applications/Xcode.app/Contents/SharedFrameworks/ContentDeliveryServices.framework/Versions/A/itms/bin/iTMSTransporter; exit</span><br></pre></td></tr></table></figure>

<p>然后你就会发现疯狂刷命令行，在下东西，等下完终端退出后，你可以发现，你的缓存文件夹变大了</p>
<p>（我目前是macOs 10.15.3 (19D76)，Xcode 11.3.1 (11C504),66M）</p>
<h3 id="5-关掉梯子，重新打开transport上传即可"><a href="#5-关掉梯子，重新打开transport上传即可" class="headerlink" title="5.关掉梯子，重新打开transport上传即可"></a>5.关掉梯子，重新打开transport上传即可</h3><p><img src="/images/%E8%8B%B9%E6%9E%9C%E5%8D%A1%E9%AA%8C%E8%AF%81%E7%9A%84%E9%97%AE%E9%A2%98/4.png" alt="4.png"></p>
<p>尽情享受高速上传！</p>
<h3 id="P-S-最后感谢来自好友大壮同学提供的梯子，不然我可能要死了"><a href="#P-S-最后感谢来自好友大壮同学提供的梯子，不然我可能要死了" class="headerlink" title="P.S:最后感谢来自好友大壮同学提供的梯子，不然我可能要死了"></a>P.S:最后感谢来自好友大壮同学提供的梯子，不然我可能要死了</h3>]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>个推--静默推送</title>
    <url>/2018/08/09/%E9%9D%99%E9%BB%98%E6%8E%A8%E9%80%81%E4%B9%8B%E4%B8%AA%E6%8E%A8iOS%E7%89%88/</url>
    <content><![CDATA[<p>因为公司业务关系，希望在iOS在后台的时候能存活去做某些业务操作（其实就是流氓的后台保活=。=）<br>最早是使用后台定位实现的，信心满满的去上架，结果被苹果爸爸锤的头都破了。连续被拒3次，申请打电话苹果代表也锤了我一顿，申请苹果审核申诉又被锤了一顿。想一想我真是头铁啊emmm<br>闲话不多说，开始这篇博客的主题<br>我们的业务其实很简单，就是后台有业务数据来了，客户端哪怕在后台也要处理。</p>
<p>#苹果的保活无非三种方式<br>###1.后台播放无声音乐<br>###2.后台定位<br>###3.推送唤醒</p>
<p>##播放音乐<br>直接被我pass了，我觉得机审都会把我拒了。。。压根不考虑</p>
<p>##后台定位<br>正好我们的业务吐过硬扯还能和业务办公场所扯上关系，头铁就是上！通过后台定位让app保活，成功实现了。不过被🍎爸爸锤了。方案二，pass</p>
<p>##推送唤醒<br>那这时候，就剩这最后一种方式了。<br>推送分两种，本地推送和远程推送。<br>####本地推送<br>本地推送其实类似于一个定时器，到了触发的时候就会触发。一般有很多用来做闹钟或者提示用户签到一类的场景。不过根据我的测试，当应用在后台三分钟后，被挂起以后这个本地推送就不再继续推送了。（也不知道是不是我的测试问题，反正我是没能保活成功。）</p>
<p>####静默推送（不用voip，有的个推运营人员是非技术，回答让你搞voip，别被忽悠了）<br>静默推送其实是远程推送的一种。在个推中，都属于透传消息（建议看一下这一篇）<a href="https://www.jianshu.com/p/3c4dd45f3485">个推：什么是普通推送？什么是透传消息？</a><br>相信在看我这个前老哥们肯定也搜过其他的博客文章<br>无一例外肯定提到了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;aps&quot;: &#123;</span><br><span class="line">        &quot;content-available&quot;: 1,</span><br><span class="line">        &quot;sound&quot;: &quot;com.gexin.ios.silence&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个东西，不过万一有没搜到的呢emmm我还是再说一遍<br>content-available属性。0是非静默，1是静默<br>个推中，无声，sound属性：com.gexin.ios.silence（其他的推送是不是如此我就不太清楚了）<br>###alert，body切记不要写东西，要传值往最后看<br>###接下来是傻瓜式教程<br>###准备工作<br>####1.推送证书准备好<br>这部分太多教程了，随便搜一个搞一下就差不多了，不上图了。记得导出的p12要放到个推平台哟。<br>####2.打开开关<br><img src="/images/%E4%B8%AA%E6%8E%A8-%E9%9D%99%E9%BB%98%E6%8E%A8%E9%80%81/1.png" alt="推送开关"></p>
<p><img src="/images/%E4%B8%AA%E6%8E%A8-%E9%9D%99%E9%BB%98%E6%8E%A8%E9%80%81/2.png" alt="允许后台推送"></p>
<p>####3.代码部分<br><img src="/images/%E4%B8%AA%E6%8E%A8-%E9%9D%99%E9%BB%98%E6%8E%A8%E9%80%81/3.png" alt="静默推送回调"><br>就在这个里面了，当被挂起的时候，收到推送，执行这里的代码，唤醒app30s左右的时间，让你尽情的做自己想做的事😝。<br>我把生命周期写在下面，也好复制粘贴去搜索，我是不是很体贴=。=</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo fetchCompletionHandler:(void (^)(UIBackgroundFetchResult result))completionHandler</span><br></pre></td></tr></table></figure>
<p>接下来怎么处理就是你们自己去做业务处理了~</p>
<p>####如何不要后台配合自行测试？<br>个推官网是干什么用的啊？<br>小伙子来来来，又是两篇傻瓜式教程（内容如标题，如果都会了就不用看了~）<br><a href="https://www.jianshu.com/p/f59568676d3a">个推-开发环境推送测试</a><br><a href="https://www.jianshu.com/p/2fa7d0c28640">个推-iOS特定人群推送</a><br>####打开个推官网<br><img src="/images/%E4%B8%AA%E6%8E%A8-%E9%9D%99%E9%BB%98%E6%8E%A8%E9%80%81/4.png" alt="创建推送"></p>
<p><img src="/images/%E4%B8%AA%E6%8E%A8-%E9%9D%99%E9%BB%98%E6%8E%A8%E9%80%81/5.png" alt="图1"><br><img src="/images/%E4%B8%AA%E6%8E%A8-%E9%9D%99%E9%BB%98%E6%8E%A8%E9%80%81/6.png" alt="图2"><br>然后推就完事了~~~~</p>
<p>这时候你应该能确定是可行的了。<br>接下来就更简单了，让后台加入联调。<br>####如果后台是java<br>简单：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload.setContentAvailable(1);</span><br><span class="line">payload.setSound(&quot;com.gexin.ios.silence&quot;);</span><br></pre></td></tr></table></figure>
<p>如果你还想传值，有自定义设置key-value方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload.addCustomMsg(&quot;key&quot;,&quot;value&quot;);</span><br></pre></td></tr></table></figure>
<p>就完事了。<br>祝各位老哥顺利完成需求，不用砍死产品经理~</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
</search>
